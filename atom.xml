<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zimo</title>
  
  <subtitle>zimoの博客</subtitle>
  <link href="https://wuzimo233.github.io/atom.xml" rel="self"/>
  
  <link href="https://wuzimo233.github.io/"/>
  <updated>2022-05-04T15:17:15.697Z</updated>
  <id>https://wuzimo233.github.io/</id>
  
  <author>
    <name>Zimo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue-图书管理案例</title>
    <link href="https://wuzimo233.github.io/posts/12.html"/>
    <id>https://wuzimo233.github.io/posts/12.html</id>
    <published>2022-05-04T15:17:00.000Z</published>
    <updated>2022-05-04T15:17:15.697Z</updated>
    
    <content type="html"><![CDATA[<p>吗</p><h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><ul><li>有vue基础</li></ul><h1 id="什么是uni-app"><a href="#什么是uni-app" class="headerlink" title="什么是uni-app"></a>什么是uni-app</h1><ul><li>uni-app 是DCloud公司打造的一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝）、快应用等多个平台。</li></ul><h2 id="HTML结构-简单了解"><a href="#HTML结构-简单了解" class="headerlink" title="HTML结构(简单了解)"></a>HTML结构(简单了解)</h2><ol><li>View容器–类似于div</li><li>text文本–包裹文本</li><li>swiper–轮播图</li><li>img–图片</li><li>video–视频</li><li>button–按钮</li></ol><h2 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h2><ol><li>属性<ul><li>字体</li><li>大小</li><li>布局：float</li></ul></li><li>选择器<br> class</li><li>取值与单位<ul><li>px</li><li>color</li><li>rpx 自动根据屏幕大小比例进行适配</li></ul></li><li>盒子模型<br> margin:外边距<br> padding:内边距<br> border:边框</li><li>弹性盒子模型<br> 更好的布局</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;吗&lt;/p&gt;
&lt;h1 id=&quot;前置条件&quot;&gt;&lt;a href=&quot;#前置条件&quot; class=&quot;headerlink&quot; title=&quot;前置条件&quot;&gt;&lt;/a&gt;前置条件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;有vue基础&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;什么是uni-app&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="uni-app" scheme="https://wuzimo233.github.io/tags/uni-app/"/>
    
  </entry>
  
  <entry>
    <title>Vue-图书管理案例</title>
    <link href="https://wuzimo233.github.io/posts/11.html"/>
    <id>https://wuzimo233.github.io/posts/11.html</id>
    <published>2022-04-26T04:00:00.000Z</published>
    <updated>2022-04-29T16:41:10.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><ul><li>安装Visual Studio Code（代码编辑器）</li><li>电脑已安装node.js</li><li>配置好vue相关文件</li></ul><h1 id="开始构建"><a href="#开始构建" class="headerlink" title="开始构建"></a>开始构建</h1><ul><li><p>电脑任意位置新建文件夹命名为”Vue-图书管理”</p></li><li><p>新建文件index.html 并创建基本html结构</p></li><li><p>因为是局部使用vue ，需要cdn方式引入Vue</p><pre class="line-numbers language-none"><code class="language-none">&lt;script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"&gt;&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>开始 new vue实例 并赋值为vm，在其内部构建</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;    const vm = new Vue({      el:'#app', //获取vue的边界element元素 即展示的区域      data:{      },      methods:{                      }    })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将data里放入图书的数组数据</p><pre class="line-numbers language-none"><code class="language-none">data:{    books: [        {            id: 1,            name: "三国演义",            price: "12",        },        {            id: 2,            name: "水浒传",            price: "20",        },        {            id: 3,            name: "红楼梦",            price: "20512",        },        {            id: 4,            name: "西游记",            price: "212",        },    ],},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>布局基本html样式</p><pre class="line-numbers language-none"><code class="language-none">&lt;h2&gt;图书管理&lt;/h2&gt;&lt;div id="app"&gt;    &lt;div &gt;        编号：&lt;input type="text" v-model="obj.id"&gt;        名称：&lt;input type="text" v-model="obj.name"&gt;         价格：&lt;input type="text" v-model="obj.price"&gt;        &lt;button type="submit" @click="submit"&gt;提交&lt;/button&gt;    &lt;/div&gt;    &lt;p&gt;图书总数: {{num}}&lt;/p&gt;    &lt;table border="1" cellspacing='0' width="300px"&gt;        &lt;tr&gt;            &lt;th&gt;编号&lt;/th&gt;            &lt;th&gt;名称&lt;/th&gt;            &lt;th&gt;价格&lt;/th&gt;            &lt;th&gt;操作&lt;/th&gt;        &lt;/tr&gt;        &lt;tr v-for="(item,index) in books" :key="item.id"&gt;            &lt;td&gt;{{item.id}}&lt;/td&gt;            &lt;td&gt;{{item.name}}&lt;/td&gt;            &lt;td&gt;{{item.price}}&lt;/td&gt;            &lt;td&gt;                &lt;a href=""&gt;编辑&lt;/a&gt; |                &lt;a href=""&gt;删除&lt;/a&gt;            &lt;/td&gt;        &lt;/tr&gt;    &lt;/table&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>增加添加图书功能</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;      const vm = new Vue({          el:'#app', //获取vue的边界element元素 即展示的区域          data:{              obj:{                  id:'',                  name:'',                  price:'',              },              newobj:'',              num:'',              books: [                  {                      id: 1,                      name: "三国演义",                      price: "12",                  },                  {                      id: 2,                      name: "水浒传",                      price: "20",                  },                  {                      id: 3,                      name: "红楼梦",                      price: "21",                  },                  {                      id: 4,                      name: "西游记",                      price: "22",                  },              ],          },          methods:{              submit(){                  // 1.获取用户输入的信息 并保存到data里的obj里                  this.newobj = this.o                      // 2. 追加数组 将obj对象推入data中 books里                  this.books.push(this.newob                      // 3. 清空输入框的信息                  this.obj = {                      id:'',                      name:'',                      price:'',                  }              },          }      })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编辑图书功能</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;    &lt;h2&gt;图书管理&lt;/h2&gt;    &lt;div id="app"&gt;        &lt;div &gt;            编号：&lt;input type="text" v-model="obj.id" :disabled="isDisabled"&gt;            名称：&lt;input type="text" v-model="obj.name"&gt;             价格：&lt;input type="text" v-model="obj.price"&gt;            &lt;button type="submit" @click="submit" :disabled="noSubmit"&gt;提交&lt;/button&gt;        &lt;/div&gt;        &lt;p&gt;图书总数: {{num}}&lt;/p&gt;        &lt;table border="1" cellspacing='0' width="300px"&gt;            &lt;tr&gt;                &lt;th&gt;编号&lt;/th&gt;                 &lt;th&gt;名称&lt;/th&gt;                &lt;th&gt;价格&lt;/th&gt;                &lt;th&gt;操作&lt;/th&gt;            &lt;/tr&gt;            &lt;tr v-for="(item,index) in books" :key="item.id"&gt;                &lt;td&gt;{{item.id}}&lt;/td&gt;                &lt;td&gt;{{item.name}}&lt;/td&gt;                &lt;td&gt;{{item.price}}&lt;/td&gt;                &lt;td&gt;                    &lt;a href="##" @click.prevent="editor(index)"&gt;编辑&lt;/a&gt; |                    &lt;a href="##"&gt;删除&lt;/a&gt;                &lt;/td&gt;            &lt;/tr&gt;        &lt;/table&gt;    &lt;/div&gt;    &lt;script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"&gt;&lt;/script&gt;        &lt;script&gt;        Vue.config.productionTip= false;        const vm = new Vue({            el:'#app', //获取vue的边界element元素 即展示的区域            data:{                noSubmit:false, //禁止提交按钮的状态                isDisabled:false, //默认可以点击                indexData:'', //存储index标识                obj:{                    id:'',                    name:'',                    price:'',                },                newobj:'',                num:'2',                books: [                    {                        id: 1,                        name: "三国演义",                        price: "12",                    },                    {                        id: 2,                        name: "水浒传",                        price: "20",                    },                    {                        id: 3,                        name: "红楼梦",                        price: "21",                    },                    {                        id: 4,                        name: "西游记",                        price: "22",                    },                ],            },            methods:{                // 提交按钮                submit(){                    // 判断是否是提交新数据还是修改旧数据                    if(this.isDisabled) {                        //编辑功能:                        // 方法 1： 获取index 找操作的行元素 修改它                        // console.log('编辑');                        // console.log('编辑的当前行',this.books[this.indexData]);                        // this.books[this.indexData].name = this.obj.name                        // this.books[this.indexData].price = this.obj.price                                                // 方法 2： 找id  获取编辑的id == books里面的id                        // 使用方法 some 查找原数组里是否有某元素 如果有返回true                        // ele 可以获取books数组的每一项                        this.books.some( (ele) =&gt; {                           if( ele.id == this.obj.id){ //这个ele就是编辑的数据                            ele.name = this.obj.name                            ele.price = this.obj.price                            return true                           }                        })                        // 释放禁止按钮                        this.isDisabled = false;                    }else { //添加功能                        // 1.获取用户输入的信息 并保存到data里的obj里                        this.newobj = this.obj                            // 2. 追加数组 将obj对象推入data中 books里                        this.books.push(this.newobj)                        }                    // 3. 清空输入框的信息                    this.obj = {                        id:'',                        name:'',                        price:'',                    }                },                // 编辑按钮                editor(index){                    //1 获取当前行的数据  渲染到文本框中                    console.log(this.books[index]);                    // this.obj.id = this.books[index].id                    // this.obj.name = this.books[index].name                    // this.obj.price = this.books[index].price                    this.obj = this.books[index]                    // 2. 编辑的时候--编号禁止操作                    this.isDisabled = true;                    // 3. 存储index下标---目的：提交的时候 修改的是哪个数据用                    this.indexData = index;                }            },            //侦听器            watch:{               "obj.name":function(val){                    console.log('监听了数据变化',val);                    var flag = this.books.some(ele =&gt; {                        return ele.name == val                    })                    if(flag) {                        this.noSubmit = true                        alert('已经存在相同名称书籍')                    } else {                        this.noSubmit = false                    }                                       }            }        })    &lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前置条件&quot;&gt;&lt;a href=&quot;#前置条件&quot; class=&quot;headerlink&quot; title=&quot;前置条件&quot;&gt;&lt;/a&gt;前置条件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;安装Visual Studio Code（代码编辑器）&lt;/li&gt;
&lt;li&gt;电脑已安装node.js&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="vue案例" scheme="https://wuzimo233.github.io/tags/vue%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>Vue路由拦截</title>
    <link href="https://wuzimo233.github.io/posts/9.html"/>
    <id>https://wuzimo233.github.io/posts/9.html</id>
    <published>2022-04-20T17:28:00.000Z</published>
    <updated>2022-04-29T16:41:05.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="路由拦截案例："><a href="#路由拦截案例：" class="headerlink" title="路由拦截案例："></a>路由拦截案例：</h1><h2 id="从零开始创建一个新的项目"><a href="#从零开始创建一个新的项目" class="headerlink" title="从零开始创建一个新的项目"></a>从零开始创建一个新的项目</h2><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><h4 id="安装Visual-Studio-Code"><a href="#安装Visual-Studio-Code" class="headerlink" title="安装Visual Studio Code"></a>安装Visual Studio Code</h4><ul><li>官网地址：(<a href="https://code.visualstudio.com/)%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85">https://code.visualstudio.com/)下载安装</a></li><li>Visual Studio Code(VS Code)是微软2015年推出的一个轻量但功能强大的源代码编辑器，基于 Electron 开发，支持 Windows、Linux 和 macOS 操作系统。内置了对JavaScript，TypeScript和Node.js的支持并且具有丰富的其它语言和扩展的支持，功能超级强大。</li><li>简单来说就是我们编写代码的必备工具</li></ul><h4 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h4><ul><li><p>Node 是一个让 JavaScript 运行在服务端的开发平台，它让 JavaScript 成为与PHP、Python、Perl、Ruby 等服务端语言平起平坐的脚本语言。发布于2009年5月，由Ryan Dahl开发，实质是对Chrome V8引擎进行了封装。</p></li><li><p>通俗点讲 Node.js是一个JavaScript编程语言的运行环境，在没有node.js之前，JavaScript代码几乎只能在浏览器中运行，通过浏览器解释执行。浏览器其实也是JavaScript的一个运行环境，JavaScript在浏览器中运行主要是面向客户端这方面的。后来node.js诞生了，JavaScript就可以在node.js中来运行了，JavaScript可以基于node.js环境做服务端开发。<strong>所以node.js也是JavaScript的服务端运行环境</strong>。</p></li><li><p>官方下载地址(<a href="https://nodejs.org/en/">https://nodejs.org/en/</a>) 或者中文网站(<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a>)</p></li><li><p>一般选LTS长期稳定版嘛 基本功能都差不多，点击下载并安装</p></li><li><p>安装时，安装路径可以自由更改，最后英文路径或者默认，其它点下一步</p></li><li><p>安装后，打开Win+R，输入cmd，窗口中输入：node -v 或 npm -v 查看版本号</p></li></ul><h4 id="安装vue脚手架（vue-cli）"><a href="#安装vue脚手架（vue-cli）" class="headerlink" title="安装vue脚手架（vue-cli）"></a>安装vue脚手架（vue-cli）</h4><p>官网地址：(<a href="https://cli.vuejs.org/zh/guide/installation.html">https://cli.vuejs.org/zh/guide/installation.html</a>)</p><ul><li>Window + R键打开运行界面，并输入cmd，点击确定。</li><li>输入命令：npm install -g @vue/cli  安装脚手架</li><li>或者 yarn global add @vue/cli 安装（前提先安装yarn 使用： npm i yarn -g）</li><li>vue –version 或 vue -V 查看当前版本号</li></ul><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><h4 id="配置下载地址"><a href="#配置下载地址" class="headerlink" title="配置下载地址"></a>配置下载地址</h4><blockquote><p>（如果出现Unexpected token .. in JSON at position …. 那么执行）</p></blockquote><ul><li>下载慢可以切换成淘宝的国内镜像：<br>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org/</a> </li><li>查看是否切换成功<br>npm config get registry </li><li>强制清除npm缓存：<br>npm cache clean –force</li><li>再执行安装npm：<br>npm install -g npm</li></ul><h4 id="通过命令创建"><a href="#通过命令创建" class="headerlink" title="通过命令创建"></a>通过命令创建</h4><ul><li>任选一个文件夹位置创建，例如桌面的一个新建文件夹里</li><li>将新建文件夹拖入vscode里面 将鼠标移动到该文件夹上 右键终端打开</li><li>输入 vue create xxx  (xxx是项目的名称为小写英文)</li><li>后续就根据项目配置进行选择，上下箭头是移动，空格是确认选择，回车是执行。如果没有，直接回车</li></ul><h4 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h4><ul><li>进入项目目录！！！</li><li>npm run serve 运行或者 yarn serve</li></ul><h2 id="配置路由组件"><a href="#配置路由组件" class="headerlink" title="配置路由组件"></a>配置路由组件</h2><ul><li>配置路由组件 – login登录界面 layout-布局界面（首页-新闻-我的）</li><li>简单说就是 layout组件里包含首页、新闻、我的 等界面，而在login组件里包含登录，且login和layout是平级的关系</li></ul><ol><li>删除HomeView.vue里的默认信息改名为Home，添加 <h1>首页</h1> </li><li>AboutView.vue组件改名About，里面 h1信息This is an about page改为 我的</li><li>添加News.vue组件，添加h1新闻界面</li><li>在views下新建Login组件，添加h1登录界面</li><li>在views下新建Layout组件</li><li>配置路由router下的index.js</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;路由拦截案例：&quot;&gt;&lt;a href=&quot;#路由拦截案例：&quot; class=&quot;headerlink&quot; title=&quot;路由拦截案例：&quot;&gt;&lt;/a&gt;路由拦截案例：&lt;/h1&gt;&lt;h2 id=&quot;从零开始创建一个新的项目&quot;&gt;&lt;a href=&quot;#从零开始创建一个新的项目&quot; class=&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="vue案例" scheme="https://wuzimo233.github.io/tags/vue%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>TEST</title>
    <link href="https://wuzimo233.github.io/posts/10.html"/>
    <id>https://wuzimo233.github.io/posts/10.html</id>
    <published>2022-04-20T08:15:00.000Z</published>
    <updated>2022-04-20T17:27:34.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用hexo发布文章遇到的问题"><a href="#使用hexo发布文章遇到的问题" class="headerlink" title="使用hexo发布文章遇到的问题"></a>使用hexo发布文章遇到的问题</h2><p>使用两个花括号报错</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用hexo发布文章遇到的问题&quot;&gt;&lt;a href=&quot;#使用hexo发布文章遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;使用hexo发布文章遇到的问题&quot;&gt;&lt;/a&gt;使用hexo发布文章遇到的问题&lt;/h2&gt;&lt;p&gt;使用两个花括号报错&lt;/p&gt;
</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JS" scheme="https://wuzimo233.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS进阶学习</title>
    <link href="https://wuzimo233.github.io/posts/8.html"/>
    <id>https://wuzimo233.github.io/posts/8.html</id>
    <published>2022-04-18T13:53:00.000Z</published>
    <updated>2022-04-18T14:26:33.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES6高级"><a href="#ES6高级" class="headerlink" title="ES6高级"></a>ES6高级</h2><p><strong>待更新。。。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ES6高级&quot;&gt;&lt;a href=&quot;#ES6高级&quot; class=&quot;headerlink&quot; title=&quot;ES6高级&quot;&gt;&lt;/a&gt;ES6高级&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;待更新。。。&lt;/strong&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JS" scheme="https://wuzimo233.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Vue进阶知识学习</title>
    <link href="https://wuzimo233.github.io/posts/6.html"/>
    <id>https://wuzimo233.github.io/posts/6.html</id>
    <published>2022-04-18T13:42:00.000Z</published>
    <updated>2022-04-29T16:41:24.726Z</updated>
    
    <content type="html"><![CDATA[<p>该页面假设你已经阅读过了组件基础。如果你还对组件不太了解，推荐你先阅读它。</p><h1 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h1><h2 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h2><ol><li>创建一个组件Mycomp.vue</li><li>在需要用到的地方引入：<pre class="line-numbers language-none"><code class="language-none">import Mycomp from './components/Mycomp.vue'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>注册组件<pre class="line-numbers language-none"><code class="language-none">export default { name: 'App', components: {     Mycomp }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用组件在 template <pre class="line-numbers language-none"><code class="language-none">&lt;Mycomp&gt;&lt;/Mycomp&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="组件组成"><a href="#组件组成" class="headerlink" title="组件组成"></a>组件组成</h2><ol><li>template 视图</li><li>script 逻辑</li><li>style  样式</li></ol><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><ol><li><p>注册全局组件 在Vue对象身上有个Vue.component() 注册全局组件 在所有的组件中 不需要引入 可以直接使用</p></li><li><p>语法：<br>Vue.component(‘my-component-name’, {</p><pre><code>  // ... 选项 ...</code></pre><p>  })</p></li><li><p>代码演示</p><pre class="line-numbers language-none"><code class="language-none">// import Vue from 'vue'//运行时：vue.runtime.js import Vue from 'vue/dist/vue'/注册全局组件(放到main.js)// Vue.component('组件名称',{内容配置})Vue.component('my-comp',{    //视图 template :template作为属性使用 必须vue.js （完整版的vue.js）  默认引入-运行时-vue.runtime.js     template:'&lt;div&gt; &lt;h2&gt;我是一个全局组件&lt;/h2&gt; &lt;p&gt;{{ msg }}&lt;/p&gt;&lt;/div&gt;',    //数据    data(){        return {            msg:'hello vue全局组件'        }    },    //方法    methods:{    }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="全局组件–可以挂载创建好的局部组件-注册全局"><a href="#全局组件–可以挂载创建好的局部组件-注册全局" class="headerlink" title="全局组件–可以挂载创建好的局部组件 注册全局"></a>全局组件–可以挂载创建好的局部组件 注册全局</h2><p>import MyBanner from ‘./components/MyBanner.vue’<br>// Vue.component(‘MyBanner’,MyBanner)<br>Vue.component(MyBanner.name,MyBanner)</p></li></ol><h1 id="组件中的data为什么是函数"><a href="#组件中的data为什么是函数" class="headerlink" title="组件中的data为什么是函数"></a>组件中的data为什么是函数</h1><p>答案<br>避免组件中的数据互相影响。同一个组件被复用多次会创建多个实例，如果 data 是一个对象的话，这些实例用的是同一个构造函数。为了保证组件的数据独立，要求每个组件都必须通过 data 函数返回一个对象作为组件的状态。</p><h1 id="computed和watch的区别"><a href="#computed和watch的区别" class="headerlink" title="computed和watch的区别"></a>computed和watch的区别</h1><h1 id="action-与-mutation-的区别"><a href="#action-与-mutation-的区别" class="headerlink" title="action 与 mutation 的区别"></a>action 与 mutation 的区别</h1><ul><li>mutation 是同步更新， $watch 严格模式下会报错</li><li>action 是异步操作，可以获取数据后调用 mutation 提交最终数据</li></ul><h1 id="Vue-组件通讯有哪几种方式"><a href="#Vue-组件通讯有哪几种方式" class="headerlink" title="Vue 组件通讯有哪几种方式"></a>Vue 组件通讯有哪几种方式</h1><p><strong>父传子</strong><br>通过props传递<br>父亲提供数据通过属性 props传给儿子；儿子通过 $on 绑父亲的事件，再通过 $emit 触发自己的事件（发布订阅）<br>利用父子关系 $parent 、 $children </p><p><strong>子传父</strong><br>在父组件中给子组件绑定一个自定义的事件，子组件通过$emit()触发该事件并传值。<br>父组件： &lt;child @receive = ‘receive’ /&gt;<br>子组件: this.$emit(‘receive’,’传递的数据’)</p><p><strong>兄弟组件传值</strong><br>通过中央通信 let bus = new Vue()<br>prop 验证，和默认值</p><h1 id="v-for-为什么要加-key"><a href="#v-for-为什么要加-key" class="headerlink" title="v-for 为什么要加 key"></a>v-for 为什么要加 key</h1><h1 id="v-model-原理"><a href="#v-model-原理" class="headerlink" title="v-model 原理"></a>v-model 原理</h1><h1 id="怎样理解-Vue-的单向数据流"><a href="#怎样理解-Vue-的单向数据流" class="headerlink" title="怎样理解 Vue 的单向数据流"></a>怎样理解 Vue 的单向数据流</h1><h1 id="Vue2-x响应式数据-双向绑定原理"><a href="#Vue2-x响应式数据-双向绑定原理" class="headerlink" title="Vue2.x响应式数据/双向绑定原理"></a>Vue2.x响应式数据/双向绑定原理</h1><p>整体思路是数据劫持+观察者模式<br>Vue 数据双向绑定主要是指：数据变化更新视图，视图变化更新数据。其中，View变化更新Data，可以通过事件监听的方式来实现，所以 Vue数据双向绑定的工作主要是如何根据Data变化更新View。</p><h1 id="虚拟-DOM-是什么-有什么优缺点"><a href="#虚拟-DOM-是什么-有什么优缺点" class="headerlink" title="虚拟 DOM 是什么 有什么优缺点"></a>虚拟 DOM 是什么 有什么优缺点</h1><hr><h1 id="谈一下对-vuex-的个人理解"><a href="#谈一下对-vuex-的个人理解" class="headerlink" title="谈一下对 vuex 的个人理解"></a>谈一下对 vuex 的个人理解</h1><h1 id="vuex是什么"><a href="#vuex是什么" class="headerlink" title="vuex是什么"></a>vuex是什么</h1><p>Vuex 是一个专为 Vue.js应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 devtools extension，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p><h1 id="怎么使用vuex"><a href="#怎么使用vuex" class="headerlink" title="怎么使用vuex"></a>怎么使用vuex</h1><h1 id="vuex中有几个核心属性，分别是什么？"><a href="#vuex中有几个核心属性，分别是什么？" class="headerlink" title="vuex中有几个核心属性，分别是什么？"></a>vuex中有几个核心属性，分别是什么？</h1><ol><li>一共有5个核心属性，分别是:</li></ol><ul><li>state 唯一数据源,Vue 实例中的 data 遵循相同的规则</li><li>getters 可以认为是 store 的计算属性,就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。Getter 会暴露为 store.getters 对象，你可以以属性的形式访问这些值.</li><li>mutation 更改 Vuex 的 store 中的状态的唯一方法是提交 mutation,非常类似于事件,通过store.commit 方法触发</li><li>action Action 类似于 mutation，不同在于Action 提交的是 mutation，而不是直接变更状态，Action 可以包含任意异步操作</li><li>module 由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。</li></ul><hr><h1 id="路由页面管理（vue-router）"><a href="#路由页面管理（vue-router）" class="headerlink" title="路由页面管理（vue-router）"></a>路由页面管理（vue-router）</h1><h1 id="什么是vue-router"><a href="#什么是vue-router" class="headerlink" title="什么是vue-router"></a>什么是vue-router</h1><h1 id="怎么使用vue-router"><a href="#怎么使用vue-router" class="headerlink" title="怎么使用vue-router"></a>怎么使用vue-router</h1><h1 id="怎么定义vue-router的动态路由？怎么获取传过来的动态参数？"><a href="#怎么定义vue-router的动态路由？怎么获取传过来的动态参数？" class="headerlink" title="怎么定义vue-router的动态路由？怎么获取传过来的动态参数？"></a>怎么定义vue-router的动态路由？怎么获取传过来的动态参数？</h1><h1 id="vue-router-路由钩子函数是什么-执行顺序是什么"><a href="#vue-router-路由钩子函数是什么-执行顺序是什么" class="headerlink" title="vue-router 路由钩子函数是什么 执行顺序是什么"></a>vue-router 路由钩子函数是什么 执行顺序是什么</h1><h1 id="路由拦截方法"><a href="#路由拦截方法" class="headerlink" title="路由拦截方法"></a>路由拦截方法</h1><p><strong>待更新。。。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;该页面假设你已经阅读过了组件基础。如果你还对组件不太了解，推荐你先阅读它。&lt;/p&gt;
&lt;h1 id=&quot;注册&quot;&gt;&lt;a href=&quot;#注册&quot; class=&quot;headerlink&quot; title=&quot;注册&quot;&gt;&lt;/a&gt;注册&lt;/h1&gt;&lt;h2 id=&quot;局部组件&quot;&gt;&lt;a href=&quot;#局部组件</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="vue" scheme="https://wuzimo233.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>JS基础知识</title>
    <link href="https://wuzimo233.github.io/posts/7.html"/>
    <id>https://wuzimo233.github.io/posts/7.html</id>
    <published>2022-04-17T17:00:00.000Z</published>
    <updated>2022-04-22T17:59:48.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript基础知识点"><a href="#JavaScript基础知识点" class="headerlink" title="JavaScript基础知识点"></a>JavaScript基础知识点</h1><h2 id="了解-JavaScript"><a href="#了解-JavaScript" class="headerlink" title="了解 JavaScript"></a>了解 JavaScript</h2><h3 id="JavaScript是什么"><a href="#JavaScript是什么" class="headerlink" title="JavaScript是什么"></a>JavaScript是什么</h3><ul><li>JavaScript是一种运行在客户端（浏览器）高级的、解释型的编程语言的，实现人机交互效果</li><li>由ECMA（欧洲电脑制造商协会）通过ECMAScript实现语言的标准化。被世界上的绝大多数网站所使用，也被世界主流浏览器（Chrome、IE、Firefox、Safari、Opera）支持</li><li>JavaScript乍一听与Java在名字上相似，但其实是雷锋与雷锋塔、老婆和老婆饼的关系hhh</li><li>一般简称JS，以下都以JS称呼</li></ul><h3 id="JS的作用（做什么）"><a href="#JS的作用（做什么）" class="headerlink" title="JS的作用（做什么）"></a>JS的作用（做什么）</h3><ul><li>网页特效 （监听用户的一些行为让网页做出对应的反馈） </li><li>表单验证 （针对表单数据的合法性进行判断）</li><li>数据交互 （获取后台的数据，渲染到前端页面）</li><li>服务端编程（node.js） </li></ul><h3 id="JS的组成（有什么）"><a href="#JS的组成（有什么）" class="headerlink" title="JS的组成（有什么）"></a>JS的组成（有什么）</h3><p>JS 是由ECMAScript和WebApi 组成。WebApi又由DOM（页面文档对象模型）和BOM（浏览器对象模型）构成</p><ul><li>ECMAScript是由网景的布兰登·艾克开发的一种脚本语言的标准化规范；最初命名为Mocha，后来改名为LiveScript，最后重命名为JavaScript[1]。</li><li>DOM 操作文档，比如对页面元素进行移动、大小、添加删除等操作</li><li>Bom 操作浏览器，比如页面弹窗，检测窗口宽度，存储数据到浏览器等</li></ul><h3 id="JS的位置"><a href="#JS的位置" class="headerlink" title="JS的位置"></a>JS的位置</h3><h4 id="内部引入"><a href="#内部引入" class="headerlink" title="内部引入"></a>内部引入</h4><ul><li>直接在HTML文件中引入（一般在标签的底部使用）<pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;    alert('我是内部引入的JS')&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="外部引入"><a href="#外部引入" class="headerlink" title="外部引入"></a>外部引入</h4><ul><li>是指将JS文件外置在HTML文件的外部，在head标签内引入相对路径中的JS文件</li><li>使代码更加有序，易于复用，且没有了脚本的混合，HTML也会更加易读<pre class="line-numbers language-none"><code class="language-none">&lt;head&gt;    &lt;script src="./my.js"&gt;&lt;/script&gt;&lt;/head&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="内联使用"><a href="#内联使用" class="headerlink" title="内联使用"></a>内联使用</h4><ul><li>在标签内部使用<pre class="line-numbers language-none"><code class="language-none">&lt;button onclick="alert('我是内联JS')"&gt;我是按钮&lt;/button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="JS注释"><a href="#JS注释" class="headerlink" title="JS注释"></a>JS注释</h3><ul><li>单行注释 // xxx</li><li>多行注释 /* xxx */</li></ul><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><ul><li>了解什么是字面量前，先知道什么是语法？<blockquote><p>是人和计算机打交道的规则—我们按照这个规则去敲代码</p></blockquote></li><li>比如输入语法：<pre class="line-numbers language-none"><code class="language-none">document.write('输出的文字-文字展示到页面')document.write('&lt;h1&gt;我是嵌套的h1标签&lt;/h1&gt;')alert('要输出的内容-弹框形式展示到页面')console.log('控制台打印的内容')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在计算机科学中，字面量（literal）是在计算机中描述 事/物<br>比如:</li><li>初级前端开发薪水是：8k 此时8k就是数字字面量</li><li>‘hello world’ ：这是字符串字面量</li><li>还有其他数组字面量、对象字面量</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量是什么？"><a href="#变量是什么？" class="headerlink" title="变量是什么？"></a>变量是什么？</h3><ul><li>通俗来讲：变量是计算机存储数据的“容器”</li><li>白话：变量就是一个装东西的盒子</li><li>变量不是数据本身，它们仅仅是一个用于存储数值的容器，可以理解为是一个个用来装东西的盒子~<br>例如：用户在网页输入自己姓名或者电话等信息时候，就是通过变量存储。</li></ul><h3 id="变量的声明方式"><a href="#变量的声明方式" class="headerlink" title="变量的声明方式"></a>变量的声明方式</h3><p>在JS中<strong>创建变量被称为声明变量</strong>，JS中变量声明又分为显示声明和隐式声明。其中显示声明中，声明关键字有var、let、const、function、class、import </p><ul><li><strong>let 变量名</strong></li><li>语法：声明关键字 + 变量名</li><li>let 即关键字（let：允许、让、要），所谓关键字是系统提供的专门用来声明（定义）变量的词语</li><li>注意let不能多次声明一个变量名 </li><li>可以一次声明多个变量 let age=18,name=’zimo’;<pre class="line-numbers language-none"><code class="language-none">// 声明关键字 + 变量名let age;age = 18;   // 变量声明后一般会赋值 也可以连写let age = 18;age = 19;   // 变量可以更新值  document.write(age);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol><li>案例：用户输入姓名后，页面显示刚才用户输入的姓名<pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;   let name = (prompt('请输入您的姓名'))   document.write(name)&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>案例：交换变量的值<br>需求：2个不同变量的变量去交换其值。<pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;    let num1 = 10    let num2 = 20    let num3 = ''    num3 = num1    num1 = num2    num2 = num3    console.log(num1,num2);&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="变量本质"><a href="#变量本质" class="headerlink" title="变量本质"></a>变量本质</h3><p>先了解一下内存：是计算机存储数据的地方，相当于一个空间<br>变量：是程序在内存中申请的一块用来存放数据的小空间</p><h3 id="变量的命名规则与规范"><a href="#变量的命名规则与规范" class="headerlink" title="变量的命名规则与规范"></a>变量的命名规则与规范</h3><ul><li>不能用关键字<br>比如：let var if for等</li><li>只能使用下划线、字母、数字、$组成，且数字不能开头</li><li>字母严格区分大小写</li><li>起名要有意义</li><li>遵守小驼峰命名法 （第一个单词首字母小写，后面每个单词首字母大写，如：UserName）</li></ul><h3 id="拓展-let-与-var-区别"><a href="#拓展-let-与-var-区别" class="headerlink" title="拓展 let 与 var 区别"></a>拓展 let 与 var 区别</h3><ul><li>let为了解决var的一些问题</li><li>var可以先使用 在声明（不合理）</li><li>var声明过的变量可以重复声明（不合理）</li><li>比如变量提升、全局变量、没有块级作用域等等</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript基础知识点&quot;&gt;&lt;a href=&quot;#JavaScript基础知识点&quot; class=&quot;headerlink&quot; title=&quot;JavaScript基础知识点&quot;&gt;&lt;/a&gt;JavaScript基础知识点&lt;/h1&gt;&lt;h2 id=&quot;了解-JavaScript</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JS" scheme="https://wuzimo233.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Vue基础知识学习</title>
    <link href="https://wuzimo233.github.io/posts/5.html"/>
    <id>https://wuzimo233.github.io/posts/5.html</id>
    <published>2022-04-17T11:47:00.000Z</published>
    <updated>2022-04-29T16:41:33.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue的安装"><a href="#Vue的安装" class="headerlink" title="Vue的安装"></a>Vue的安装</h2><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><h4 id="安装Visual-Studio-Code"><a href="#安装Visual-Studio-Code" class="headerlink" title="安装Visual Studio Code"></a>安装Visual Studio Code</h4><ul><li>官网地址：(<a href="https://code.visualstudio.com/)%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85">https://code.visualstudio.com/)下载安装</a></li><li>Visual Studio Code(VS Code)是微软2015年推出的一个轻量但功能强大的源代码编辑器，基于 Electron 开发，支持 Windows、Linux 和 macOS 操作系统。内置了对JavaScript，TypeScript和Node.js的支持并且具有丰富的其它语言和扩展的支持，功能超级强大。</li><li>简单来说就是我们编写代码的必备工具</li></ul><h4 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h4><ul><li><p>Node 是一个让 JavaScript 运行在服务端的开发平台，它让 JavaScript 成为与PHP、Python、Perl、Ruby 等服务端语言平起平坐的脚本语言。发布于2009年5月，由Ryan Dahl开发，实质是对Chrome V8引擎进行了封装。</p></li><li><p>通俗点讲 Node.js是一个JavaScript编程语言的运行环境，在没有node.js之前，JavaScript代码几乎只能在浏览器中运行，通过浏览器解释执行。浏览器其实也是JavaScript的一个运行环境，JavaScript在浏览器中运行主要是面向客户端这方面的。后来node.js诞生了，JavaScript就可以在node.js中来运行了，JavaScript可以基于node.js环境做服务端开发。<strong>所以node.js也是JavaScript的服务端运行环境</strong>。</p></li><li><p>官方下载地址(<a href="https://nodejs.org/en/">https://nodejs.org/en/</a>) 或者中文网站(<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a>)</p></li><li><p>一般选LTS长期稳定版嘛 基本功能都差不多，点击下载并安装</p></li><li><p>安装时，安装路径可以自由更改，最后英文路径或者默认，其它点下一步</p></li><li><p>安装后，打开Win+R，输入cmd，窗口中输入：node -v 或 npm -v 查看版本号</p></li></ul><h4 id="安装vue脚手架（vue-cli）"><a href="#安装vue脚手架（vue-cli）" class="headerlink" title="安装vue脚手架（vue-cli）"></a>安装vue脚手架（vue-cli）</h4><p>官网地址：(<a href="https://cli.vuejs.org/zh/guide/installation.html">https://cli.vuejs.org/zh/guide/installation.html</a>)</p><ul><li>Window + R键打开运行界面，并输入cmd，点击确定。</li><li>输入命令：npm install -g @vue/cli  安装脚手架</li><li>或者 yarn global add @vue/cli 安装（前提先安装yarn 使用： npm i yarn -g）</li><li>vue –version 或 vue -V 查看当前版本号</li></ul><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><h4 id="配置下载地址"><a href="#配置下载地址" class="headerlink" title="配置下载地址"></a>配置下载地址</h4><blockquote><p>（如果出现Unexpected token .. in JSON at position …. 那么执行）</p></blockquote><ul><li>下载慢可以切换成淘宝的国内镜像：<br>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org/</a> </li><li>查看是否切换成功<br>npm config get registry </li><li>强制清除npm缓存：<br>npm cache clean –force</li><li>再执行安装npm：<br>npm install -g npm</li></ul><h4 id="通过命令创建"><a href="#通过命令创建" class="headerlink" title="通过命令创建"></a>通过命令创建</h4><ul><li>任选一个文件夹位置创建，例如桌面的一个新建文件夹里</li><li>将新建文件夹拖入vscode里面 将鼠标移动到该文件夹上 右键终端打开</li><li>输入 vue create xxx  (xxx是项目的名称为小写英文)</li><li>后续就根据项目配置进行选择，上下箭头是移动，空格是确认选择，回车是执行。如果没有，直接回车</li></ul><h4 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h4><ul><li>进入项目目录！！！</li><li>npm run serve 运行或者 yarn serve</li></ul><h2 id="Vue介绍"><a href="#Vue介绍" class="headerlink" title="Vue介绍"></a>Vue介绍</h2><ol><li>Vue是渐进式（渐进式：项目中可以逐步使用vue框架 可以使用一部分 或者是整个项目） JavaScript 框架</li><li>框架为单页面的应用程序 （Vue项目入口：只有一个页面 index.html ）</li><li>跳转的页面路由功能-  路由 （其他页面组件）</li><li>框架里面使用的是虚拟DOM 没有js BOM DOM </li></ol><p>特点： MVVM 模式；代码简洁体积小，运行效率高，适合移动PC端开发；本身只关注 UI （和 react 相似），可以轻松引入 Vue 插件或其他的第三方库进行开发。</p><h2 id="Vue的优缺点"><a href="#Vue的优缺点" class="headerlink" title="Vue的优缺点"></a>Vue的优缺点</h2><p><strong>优点：</strong></p><blockquote><p><strong>轻量级框架</strong>：只关注视图层，是一个构建数据的视图集合，大小只有几十kb；简单易学：国人开发，中文文档，不存在语言障碍 ，易于理解和学习；<br><strong>双向数据绑定</strong>：保留了angular的特点，在数据操作方面更为简单；<br><strong>组件化</strong>：保留了react的优点，实现了html的封装和重用，在构建单页面应用方面有着独特的优势；<br><strong>视图，数据，结构分离</strong>：使数据的更改更为简单，不需要进行逻辑代码的修改，只需要操作数据就能完成相关操作；<br><strong>虚拟DOM</strong>：dom操作是非常耗费性能的，不再使用原生的dom操作节点，极大解放dom操作，但具体操作的还是dom不过是换了另一种方式；<br><strong>运行速度更快</strong>:相比较与react而言，同样是操作虚拟dom，就性能而言，vue存在很大的优势。<br><strong>缺点：</strong></p></blockquote><ol><li>单页面应用程序，首页加载速度慢  </li><li>不利于搜索引擎优化  </li></ol><h2 id="Vue的使用"><a href="#Vue的使用" class="headerlink" title="Vue的使用"></a>Vue的使用</h2><h3 id="局部使用Vue"><a href="#局部使用Vue" class="headerlink" title="局部使用Vue"></a>局部使用Vue</h3><ol><li>引入 Vue 的cnd网址 或者是下载到本地js文件  （类似：jquery.js）</li><li>创建vue实例  </li><li>代码演示<pre class="line-numbers language-none"><code class="language-none">&lt;head&gt;    //引入js文件夹里的vue    &lt;script src="./JS/vue.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;!-- 使用vue --&gt;    &lt;div id="app"&gt;        &lt;p&gt;这是vue的区域了 app--&lt;/p&gt;        &lt;p&gt;获取vue的信息：{{msg}}&lt;/p&gt;    &lt;/div&gt;    &lt;!-- 创建vue实例 --&gt;    &lt;script&gt;        const vm = new Vue({            el:'#app',//获取element元素            data:{                msg:'hello vue',            }        })    &lt;/script&gt;&lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="搭建vue项目"><a href="#搭建vue项目" class="headerlink" title="搭建vue项目"></a>搭建vue项目</h3><p><strong>1.兼容性</strong><br>Vue 不支持 IE8 及以下版本，因为 Vue 使用了 IE8 无法模拟的 ECMAScript 5 特性。但它支持所有兼容 ECMAScript 5 的浏览器。</p><p><strong>2.安装nodejs</strong></p><ul><li>Node 是一个让 JavaScript 运行在服务端的开发平台，它让 JavaScript 成为与PHP、Python、Perl、Ruby 等服务端语言平起平坐的脚本语言。发布于2009年5月，由Ryan Dahl开发，实质是对Chrome V8引擎进行了封装。</li><li>通俗点讲 Node.js是一个JavaScript编程语言的运行环境，在没有node.js之前，JavaScript代码几乎只能在浏览器中运行，通过浏览器解释执行。浏览器其实也是JavaScript的一个运行环境，JavaScript在浏览器中运行主要是面向客户端这方面的。后来node.js诞生了，JavaScript就可以在node.js中来运行了，JavaScript可以基于node.js环境做服务端开发。<strong>所以node.js也是JavaScript的服务端运行环境</strong>。</li><li>官方下载地址(<a href="https://nodejs.org/en/">https://nodejs.org/en/</a>) 或者中文网站(<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a>)</li><li>一般选LTS长期稳定版嘛 基本功能都差不多，点击下载并安装</li><li>安装时，安装路径可以自由更改，最后英文路径或者默认，其它点下一步</li><li>安装后，打开Win+R，输入cmd，窗口中输入：node -v 或 npm -v 查看版本号</li></ul><p><strong>3.安装vue 命令行工具 (CLI)</strong></p><ul><li>介绍：Vue 提供了一个官方的 CLI，为单页面应用 (SPA) 快速搭建繁杂的脚手架。CLI是一个全局安装的 npm 包，提供了终端里的 vue 命令。它可以通过 vue create 快速搭建一个新项。</li><li>网址：<a href="https://cli.vuejs.org/zh/">https://cli.vuejs.org/zh/</a></li><li>版本：Vue CLI 4.x 需要 Node.js v8.9 或更高版本 (推荐 v10 以上)</li><li>先安装yarn:  npm i yarn -g (推荐)</li><li>安装vue-cli：<br> npm install -g @vue/cli   （下载模块：npm  install 模块 ）<br>   或者<br> yarn global add @vue/cli   （下载模块：yarn add  模块 ）</li><li>检查其版本是否正确<br>vue –version</li></ul><p><strong>4.创建一个vue项目–通过脚手架vue-cli</strong> </p><ol><li>创建vue项目： vue create vue-project<br>说明：vue项目名称最好是英文 不能包含驼峰命名法</li><li>按需项目需要的依赖配置</li><li>进入项目<br>cd 项目名称</li><li>启动项目<br>npm run serve<br>或者<br>yarn serve </li><li>打包项目<br>npm run build </li></ol><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><blockquote><p>node_moudles   安装包依赖 –模块<br>public         单页面入口 - index.html<br>src             资源文件 – 前端<br>– – assets     静态文件资源 - 放置 css js images<br>– – components 公共组件 - 组件化 （样式 布局 效果）<br>– – App.vue    根组件<br>– – main.js    入口配置文件<br>.browserslistrc 浏览器配置<br>.gitignore      上传git仓库 忽略的文件配置<br>babel.config.js babel配置<br>package.json    项目配置文件 （查看项目安装的依赖 版本 名称… ）<br>readme.md       项目说明文件<br>yarn.lock       配置信息 忽略</p></blockquote><h2 id="Vue组件组成"><a href="#Vue组件组成" class="headerlink" title="Vue组件组成"></a>Vue组件组成</h2><ol><li><p>组成-三部分</p><ol><li>template  视图标签  （template标签不会被渲染 只是包裹作用） 必写</li><li>script    逻辑代码  </li><li>style     样式   lang=’less/scss’ scoped </li></ol></li><li><p>创建组件 </p><ol><li>xxx.vue  后缀.vue结尾</li><li>三部分组件  快捷键 vue</li></ol></li><li><p>组件使用</p><ol><li>引入组件 </li><li>注册组件</li><li>使用组件<pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;    //1. 引入组件    import Banner from './components/Banner.vue'    export default {        name: 'App',        //2. 注册组件        components: {            Banner,        }    }&lt;/script&gt; &lt;!-- 3. 使用组件 --&gt;&lt;Banner&gt;&lt;/Banner&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><h2 id="vue基础语法"><a href="#vue基础语法" class="headerlink" title="vue基础语法"></a>vue基础语法</h2><p><strong>指令：就是以 v-指令=’js环境’ 具体特定的工具 ，指令。</strong></p><h3 id="插值操作-模板语法"><a href="#插值操作-模板语法" class="headerlink" title="插值操作 (模板语法)"></a>插值操作 (模板语法)</h3><ol><li>作用：获取vue数据 显示视图 模板语法来声明式地将数据渲染进 DOM </li><li>语法：</li></ol><p><strong>Mustache</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;div id="app"&gt;  &lt;h2&gt;{{message}}&lt;/h2&gt;  &lt;h2&gt;{{message}}, 李银河!&lt;/h2&gt;  &lt;!--mustache语法中,不仅仅可以直接写变量,也可以写简单的表达式--&gt;  // 获取data里的数据  &lt;h2&gt;{{firstName + lastName}}&lt;/h2&gt;  &lt;h2&gt;{{firstName + ' ' + lastName}}&lt;/h2&gt;  &lt;h2&gt;{{firstName}} {{lastName}}&lt;/h2&gt;  &lt;h2&gt;{{counter * 2}}&lt;/h2&gt;&lt;/div&gt;&lt;script src="../js/vue.js"&gt;&lt;/script&gt;&lt;script&gt;  const app = new Vue({    el: '#app',    // 提供数据    data: {      message: '你好啊',      firstName: 'kobe',      lastName: 'bryant',      counter: 100    },  })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="指令介绍"><a href="#指令介绍" class="headerlink" title="指令介绍"></a>指令介绍</h3><h4 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h4><p>在某些情况下，我们可能不希望界面随意的跟随改变<br>这个时候，我们就可以使用一个Vue的指令<br>v-once:<br>该指令后面不需要跟任何表达式(比如之前的v-for后面是由跟表达式的)<br>该指令表示元素和组件(组件后面才会学习)只渲染一次，不会随着数据的改变而改变。<br>代码如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;div id="app"&gt;  &lt;h2&gt;{{message}}&lt;/h2&gt;  &lt;h2 v-once&gt;{{message}},李银河&lt;/h2&gt;&lt;/div&gt;&lt;script src="../js/vue.js"&gt;&lt;/script&gt;&lt;script&gt;  const app = new Vue({    el: '#app',    data: {      message: '你好啊'    }  })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="v-html-原生HTML"><a href="#v-html-原生HTML" class="headerlink" title="v-html -原生HTML"></a>v-html -原生HTML</h4><p>某些情况下，我们从服务器请求到的数据本身就是一个HTML代码<br>如果我们直接通过插值语法来输出，会将HTML代码也一起输出<br>但是我们可能希望的是按照HTML格式进行解析，并且显示对应的内容<br>可以使用v-html指令<br>该指令后面往往会跟上一个string类型<br>会将string的html解析出来并且进行渲染</p><pre class="line-numbers language-none"><code class="language-none">&lt;div id="app"&gt;  &lt;h2&gt;{{url}}&lt;/h2&gt;  &lt;h2 v-html="url"&gt;&lt;/h2&gt;&lt;/div&gt;&lt;script src="../js/vue.js"&gt;&lt;/script&gt;&lt;script&gt;  const app = new Vue({    el: '#app',    data: {      message: '你好啊',      url: '&lt;a href="http://www.baidu.com"&gt;百度一下&lt;/a&gt;'    }  })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><p>v-text作用和Mustache比较相似：<strong>都是用于将数据显示在界面中</strong><br>v-text<strong>通常情况下，接受一个string类型</strong><br>缺点是不够灵活：第二个h2不会显示李银河</p><pre class="line-numbers language-none"><code class="language-none">&lt;div id="app"&gt;  &lt;h2&gt;{{message}}, 李银河!&lt;/h2&gt;  &lt;h2 v-text="message"&gt;, 李银河!&lt;/h2&gt;&lt;/div&gt;&lt;script src="../js/vue.js"&gt;&lt;/script&gt;&lt;script&gt;  const app = new Vue({    el: '#app',    data: {      message: '你好啊'    }  })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h4><p>v-pre用于跳过这个元素和它子元素的编译过程，用于显示原本的Mustache语法。<br>比如下面的代码<br>第一个h2元素中的内容会被编译解析出来对应的内容<br>第二个h2元素中会直接显示</p><pre class="line-numbers language-none"><code class="language-none">&lt;div id="app"&gt;   &lt;h2&gt;{{message}}&lt;/h2&gt; //你好啊  &lt;h2 v-pre&gt;{{message}}&lt;/h2&gt; //{{message}}&lt;/div&gt;&lt;script src="../js/vue.js"&gt;&lt;/script&gt;&lt;script&gt;  const app = new Vue({    el: '#app',    data: {      message: '你好啊'    }  })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h4><p>在某些情况下，我们浏览器可能会直接显然出未编译的Mustache标签<br>cloak: “斗篷”</p><pre class="line-numbers language-none"><code class="language-none">&lt;div id="app" v-cloak&gt;  &lt;h2&gt;{{message}}&lt;/h2&gt;&lt;/div&gt;&lt;script src="../js/vue.js"&gt;&lt;/script&gt;&lt;script&gt;  // 在vue解析之前, div中有一个属性v-cloak  // 在vue解析之后, div中没有一个属性v-cloak  setTimeout(function () {    const app = new Vue({      el: '#app',      data: {        message: '你好啊'      }    })  }, 1000)&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><h4 id="条件渲染-v-if-（v-else、v-else-if）"><a href="#条件渲染-v-if-（v-else、v-else-if）" class="headerlink" title="条件渲染- v-if  （v-else、v-else-if）"></a>条件渲染- v-if  （v-else、v-else-if）</h4><ol><li>作用：是否显示元素/  true 显示 false 隐藏 </li></ol><p><strong>语法：</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;span v-if="boolean表达式"&gt;&lt;/span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>v-else</strong><br>作用：是对 v-if=’’的结果取反 </p><pre class="line-numbers language-none"><code class="language-none">&lt;span v-if="boolean表达式"&gt;&lt;/span&gt;&lt;span v-else&gt;xxxx &lt;/span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>v-else-if</strong><br>作用：是否显示元素  与v-if  v-else-if 多语句判断</p><pre class="line-numbers language-none"><code class="language-none">&lt;span v-if="boolean表达式"&gt;&lt;/span&gt;&lt;span v-else-if="boolean表达式"&gt;&lt;/span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>案例：</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;条件渲染 vue-if&lt;/h2&gt;     &lt;!-- v-if='boolean' --&gt;    &lt;p&gt;v-if的值：{{flag}}&lt;/p&gt;    &lt;p v-if="flag"&gt;我是v-if为true显示的&lt;/p&gt;    &lt;h4 v-else&gt;我是v-else控制显示&lt;/h4&gt;    &lt;button @click="change()"&gt;点我控制v-if的值&lt;/button&gt;    &lt;!-- 多语句 --&gt;    &lt;p v-if="number&gt;5"&gt; number&gt;5 &lt;/p&gt;    &lt;p v-else-if=" 2&lt; number &lt;=5"&gt; number大于2小于等于5 &lt;/p&gt;    &lt;p v-else&gt; number小于2 &lt;/p&gt;    &lt;input type="text" placeholder="请输入数字来判断number" v-model="number"&gt;    &lt;br&gt;     &lt;span&gt;{{number}}&lt;/span&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {    data(){        return{            flag:false,            number:"",                    }    },    methods:{        change(){            this.flag=!this.flag        }    }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><ol><li>作用：是否显示元素/ true 显示 false 隐藏 </li></ol><p><strong>语法：</strong><br><strong>特点：</strong><br>控制元素的 display:block/none</p><pre class="line-numbers language-none"><code class="language-none">&lt;span v-show="boolean表达式"&gt;&lt;/span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="列表渲染-v-for"><a href="#列表渲染-v-for" class="headerlink" title="列表渲染- v-for"></a>列表渲染- v-for</h3><p><strong>1. 遍历数组</strong><br><strong>语法：</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;li v-for="(item,index) in arr" :key=""&gt;    {{ item }}&lt;/li&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>属性</li><li>item 第一个元素 表示数组的每一项内容</li><li>index 第二个元素 表示数组的下标 0 1 </li><li>arr  数组数据(或者对象)</li><li>:key其实是 v-bind属性  作用：做当前数据的唯一标识  一般写的是id  不推荐 index </li></ul><p><strong>2. 遍历对象</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;div v-for="(value, key, index) in object"&gt;    {{ index }}. {{ key }}: {{ value }}&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>value 对象里每个键值对的值({key:value}中的value)</li><li>key 对象里每个键值对的键名({key:value}中的key)</li><li>index 下标0 1</li><li>object 要遍历的对象名</li></ul><p><strong>案例：</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;数组遍历- v-for&lt;/h2&gt;    &lt;p&gt;直接获取数组数据：arr{{ arr }}&lt;/p&gt;    &lt;p&gt;遍历数组&lt;/p&gt;    &lt;ul&gt;      &lt;li v-for="(item, index) in arr" :key="item.id"&gt;        每一项 {{ item }} -- 下标 {{ index }}      &lt;/li&gt;    &lt;/ul&gt;--------------------------------------------------    &lt;p&gt;遍历内部是对象的数组&lt;/p&gt;    &lt;ul&gt;      &lt;li v-for="(item, index) in books" :key="index"&gt;        &lt;h3&gt;书名：{{ item.name }}&lt;/h3&gt;        &lt;p&gt;价格：{{ item.price }}&lt;/p&gt;      &lt;/li&gt;    &lt;/ul&gt;----------------------------------------------------    &lt;p&gt;遍历对象&lt;/p&gt;    &lt;ul&gt;        &lt;li v-for="(ele,key) in obj " :key="key"&gt;            &lt;p&gt;{{key}}：：{{ele}}&lt;/p&gt;            &lt;!-- &lt;p&gt;姓名：{{ele.uname}}&lt;/p&gt;            &lt;p&gt;年龄：{{ele.age}}&lt;/p&gt; --&gt;        &lt;/li&gt;    &lt;/ul&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data() {    return {      arr: [1, 2, 3, 4],      books: [        {          id: 1,          name: "三国",          price: 20,        },        {          id: 2,          name: "西游记",          price: 30,        },        {          id: 3,          name: "红楼梦",          price: 40,        },      ],      obj: {        uname: "张三",        age: 20,      },    };  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. v-for 与 v-if 一同使用</strong></p><ol><li>注意不推荐在同一元素上使用 v-if 和 v-for 、v-for 的优先级比 v-if 更高</li></ol><p><strong>解决办法：</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;h4&gt;4 v-for 与 v-if 一同使用, v-for 的优先级比 v-if 更高&lt;/h4&gt;    &lt;h4&gt;今天上架了什么水果：&lt;/h4&gt;    &lt;ul&gt;        &lt;template v-for="(item) in zaoshi"&gt;            &lt;li  :key="item.id" v-if="item.flag"&gt;                种类：{{item.fruit}}             &lt;/li&gt;        &lt;/template&gt;    &lt;/ul&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data() {    return {      zaoshi:[          {              id:100,              fruit:'苹果',              flag:true,          },          {              id:101,              fruit:'香蕉',              flag:false,          },          {              id:102,              fruit:'阳光玫瑰',              flag:true,          },          {              id:103,              fruit:'车厘子',              flag:false,          },      ]    };  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="Vue-事件处理"><a href="#Vue-事件处理" class="headerlink" title="Vue 事件处理"></a>Vue 事件处理</h3><ol><li>介绍<br>可以用 v-on 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码</li><li>定义事件<br>语法：&lt;div&nbsp;v-on:事件名=’dosomething’&gt;<br>函数dosomething定义的位置：<br>要求定义mothds属性中</li><li>事件：<br>this指向：事件的this指向 当前组件实例对象<br>事件传递参数：事件传递参数  v-on:click=’canshu(1,2)’<br>事件对象event：</li></ol><ul><li>函数不带参数  第一个参数默认是事件对象 event </li><li>函数带参数    事件对象需要手动传递 $event<br>v-on:事件名=’函数’<br>简写：<br>@事件名=’函数’</li></ul><ol start="4"><li>事件修饰符<br>Vue.js 为 v-on 提供了事件修饰符。修饰符是由点开头的指令后缀来表示的。<blockquote><p>.stop<br>.prevent<br>.capture<br>.self<br>.once<br>.passive</p></blockquote></li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 阻止单击事件继续传播 --&gt;&lt;a v-on:click.stop="doThis"&gt;&lt;/a&gt;&lt;!-- 提交事件不再重载页面 --&gt;&lt;form v-on:submit.prevent="onSubmit"&gt;&lt;/form&gt;&lt;!-- 修饰符可以串联 --&gt;&lt;a v-on:click.stop.prevent="doThat"&gt;&lt;/a&gt;&lt;!-- 只有修饰符 --&gt;&lt;form v-on:submit.prevent&gt;&lt;/form&gt;&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;&lt;div v-on:click.capture="doThis"&gt;...&lt;/div&gt;&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;&lt;!-- 即事件不是从内部元素触发的 --&gt;&lt;div v-on:click.self="doThat"&gt;...&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;      &lt;h2&gt;vue事件处理&lt;/h2&gt;      &lt;!-- 事件修饰符 --&gt;      &lt;div @click="parent"&gt; //父元素          我是小头爸爸          &lt;button @click.stop="child"&gt;我是大头儿子&lt;/button&gt; //子元素      &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {    methods:{        parent(){            console.log('父元素');        },        child(){            console.log('子元素');        },    }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>按键修饰符<br>在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 v-on 在监听键盘事件时添加按键修饰符：<br>.enter  *<br>.tab<br>.delete (捕获“删除”和“退格”键)<br>.esc<br>.space<br>.up<br>.down<br>.left<br>.right</li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` --&gt;&lt;input v-on:keyup.enter="submit"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;      &lt;!-- 按键修饰符 --&gt;      &lt;input type="text" v-on:keyup.enter='getInput'&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {    methods:{        getInput(e){        //if(e.keyCode == 13) {        //    console.log('按下了回车键--触发是搜索。。。');        //}        console.log('按下了回车键--触发是搜索。。。');                   }    }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li><p>系统修饰键<br>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。<br>.ctrl<br>.alt<br>.shift<br>.meta</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;!-- 系统修饰键 --&gt;    &lt;!-- 可以按下ctrl+回车键触发  --&gt;    &lt;textarea @keyup.ctrl.enter="send" cols="30" rows="10"&gt;&lt;/textarea&gt;    &lt;button @click="send"&gt;发送&lt;/button&gt; //  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  methods: {    // 系统修饰键    send(){        console.log('系统修饰键--发送了聊天信息');    }  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>鼠标按钮修饰符<br>.left<br>.right<br>.middle</p></li></ol><hr><h2 id="Vue中key属性的作用-（考点）"><a href="#Vue中key属性的作用-（考点）" class="headerlink" title="Vue中key属性的作用 （考点）"></a>Vue中key属性的作用 （考点）</h2><ol><li>作用：key的作用主要是为了高效的更新虚拟DOM</li><li>高效的Diff算法 <pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;vue中遍历数据v-foe是否添加key 功能&lt;/h2&gt;    &lt;p&gt;key作用：提高更新虚拟DOM速度 --底层diff算法--查思路&lt;/p&gt;    &lt;!-- 默认不带key的遍历 --&gt;    &lt;ul&gt;      &lt;li v-for="item in arr"&gt;{{ item }}&lt;/li&gt;      &lt;button @click="addF"&gt;插入F元素&lt;/button&gt;    &lt;/ul&gt;    &lt;!-- 带key的遍历 --&gt;    &lt;ul&gt;      &lt;li v-for="item in arr" :key="item"&gt;{{ item }}&lt;/li&gt;      &lt;button @click="addF"&gt;插入F元素&lt;/button&gt;    &lt;/ul&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data() {    return {      arr: ["A", "B", "C", "D", "E"],    };  },  methods: {    addF() {      //  增加 F （给数组添加元素 arr.splice(下标,删除的个数,添加的值)）      this.arr.splice(2, 0, "F");    },  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h2><ol><li>说明：在列表渲染中，如果遍历是数组，当数组数据发生改变时，页面什么时候能自动更新(页面重新渲染)</li><li>实现数组视图同步更新</li></ol><ul><li><p>变更方法 （修改了原数组）<br>push()<br>pop()<br>shift()<br>unshift()<br>splice()<br>sort()<br>reverse()</p></li><li><p>替换数组（修改后返回新的数组 原数据不修改 视图想同步更新 覆盖原数组）<br>filter()、concat() 和 slice()</p></li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;数组更新同步&lt;/h2&gt;    &lt;p&gt;arr:{{ arr }}&lt;/p&gt;    &lt;button @click="addArr"&gt;追加数组&lt;/button&gt;    &lt;button @click="sliceArr"&gt;切割数组&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data() {    return {      arr: [1, 2, 3],    };  },  methods: {    addArr() {      // this.arr.push(100)      this.arr.reverse();    },    sliceArr() {      //slice() 返回新的数组 n ce(1);      console.log(newArr);      //替换      this.arr = newArr;    },  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象更新检测"><a href="#对象更新检测" class="headerlink" title="对象更新检测"></a>对象更新检测</h2><ol><li>说明：对象修改后 视图同步更新视图 – 内存：栈内存 堆内存 </li><li>实现对象视图同步更新<pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;对象同步更新&lt;/h2&gt;    &lt;p&gt;对象obj:{{ obj }}&lt;/p&gt;    &lt;button @click="changeUname"&gt;修改对象已存在的属性&lt;/button&gt;    &lt;button @click="obj = { user: 'admin' }"&gt;修改整个obj对象&lt;/button&gt;    &lt;!-- //视图检测不到变化 --&gt;    &lt;button @click="addAttribute"&gt;给obj添加不存在的属性&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {    data(){        return{            obj:{                uname:'张三',                age:20            }        }    },    methods:{        changeUname(){            this.obj.uname = '拉拉'        },        addAttribute(){            // this.obj.love = '女'             // 问题: 视图检测不到变化 vue认为obj没有修改            // 方法一:对象中的扩展运算符(...)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中            // this.obj = {...this.obj}            // 方法二: es6合并对象 Object.assign({},{},{})            // this.obj = Object.assign({},this.obj)            // 方法三: vue官网解决方法            // Vue.set( target, propertyName/index, value )            /**参数：             {对象 | 数组} target 目标元素            {string | number} propertyName/index (要添加的属性)数据类型名字或者index            {any} value  属性的值            用法：向响应式对象中添加一个 property(属性)，并确保这个新 property             同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新             property，因为 Vue 无法探测普通的新增 property              (比如 this.myObject.newProperty = 'hi')            **/                       //这里没有引入Vue了,因为组件实例对象vm身上有$set()方法            this.$set(this.obj,'love','女')                    //删除 同步视图 删除对象的 property。如果对象是响应式的，确保删除能触发更新视图。            this.$delete(this.obj,'age')        }     }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h2><p>介绍：动态的添加class或者是style样式<br><strong>1.绑定 HTML Class</strong></p><ul><li>直接绑定变量 <pre class="line-numbers language-none"><code class="language-none">&lt;div v-bind:class='变量'&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>对象语法 (最常用)<pre class="line-numbers language-none"><code class="language-none">&lt;div v-bind:class="{类名: 表达式-true显示类名、false隐藏 ,类名:boolean}"&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>数组语法<pre class="line-numbers language-none"><code class="language-none">&lt;div v-bind:class="[变量1,变量2, {类名：boolean}]"&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>2.绑定内联样式</strong><br>v-bind:style 的对象语法十分直观——看着非常像 CSS，但其实是一个 JavaScript 对象。CSS property 名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用引号括起来) 来命名</p><ul><li>对象语法 <pre class="line-numbers language-none"><code class="language-none">&lt;div v-bind:style="{css样式:变量,... }"&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>数组语法<pre class="line-numbers language-none"><code class="language-none">&lt;div v-bind:style="[baseStyles, overridingStyles]"&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>直接变量<pre class="line-numbers language-none"><code class="language-none">&lt;div v-bind:style="styleObject"&gt;&lt;/div&gt; data: {     styleObject: {         color: 'red',         fontSize: '13px'     } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>完整练习案例:</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;动态绑定样式class 和 style&lt;/h2&gt;    &lt;h4&gt;动态绑定样式class&lt;/h4&gt;    &lt;!-- 绑定变量 --&gt;    &lt;button @click="active = 'box2'"&gt;切换颜色-绑定变量&lt;/button&gt;    &lt;div v-bind:class="active"&gt;动态绑定样式class&lt;/div&gt;    &lt;hr /&gt;    &lt;!-- 对象语法 --&gt;    &lt;div v-bind:class="{ box: flag }"&gt;对象语法&lt;/div&gt;    &lt;button @click="flag = !flag"&gt;修改flag-对象语法&lt;/button&gt;    &lt;hr /&gt;    &lt;!-- 数组语法 --&gt;    &lt;div class="aa" v-bind:class="[active, { box2: true }]"&gt;数组语法&lt;/div&gt;    &lt;hr /&gt;    &lt;h2&gt;动态绑定内联样式&lt;/h2&gt;    &lt;p&gt;0. 默认的内联写法&lt;/p&gt;    &lt;div style="width: 100px; height: 100px; background: orange"&gt;      默认的内联写法    &lt;/div&gt;    &lt;p&gt;1. 直接变量&lt;/p&gt;    &lt;div v-bind:style="styleObject"&gt;      对象语法    &lt;/div&gt;    &lt;p&gt;2. 对象语法&lt;/p&gt;    &lt;div v-bind:style="{color:'green',fontSize:'30px', width:'100px',height: '100px',backgroundColor:'blue'}"&gt;      对象语法    &lt;/div&gt;    &lt;p&gt;3. 数组语法&lt;/p&gt;    &lt;div :style="[styleObject,{border:'5px solid #333'}]"&gt;数组语法&lt;/div&gt;  &lt;/div&gt;&lt;/template&gt; &lt;script&gt;export default {  data() {    return {      active: "box",      flag: "true",      styleObject:{        width: '100px',        height: '100px',        background: 'orange',      }    };  },  methods: {    changeColor() {      this.active = "box2";    },  },};&lt;/script&gt;&lt;style&gt;.box {  width: 200px;  height: 200px;  background-color: pink;}.box2 {  width: 200px;  height: 200px;  background-color: rgb(21, 226, 253);}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vue-tab栏切换练习"><a href="#Vue-tab栏切换练习" class="headerlink" title="Vue-tab栏切换练习"></a>Vue-tab栏切换练习</h3><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;Vue-tab切换&lt;/h2&gt;    &lt;ul class="nav"&gt;      &lt;li v-for="(item,index) in arr" :key='item' :class="{active:index == num}" @click="changeNav(index)"&gt;          {{item}}-{{index}}    &lt;/li&gt;    &lt;/ul&gt;    &lt;div class="box1"&gt;      &lt;div v-for="(ele,n) in content " :key="ele" :class="{show:n == num}"&gt;{{ele}}&lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data() {    return {      num: 0,      arr: ["选项1", "选项2", "选项3"],      content: ["111", "222", 333],    };  },  methods: {      changeNav(index){          this.num = index                }  },};&lt;/script&gt;&lt;style lang="less" scoped&gt;.nav {  overflow: hidden;  list-style: none;  li {      display: inline;      width: 100px;      height: 40px;      line-height: 40px;      margin-right: 10px;  }  .active{      background: lightblue;  }}.box1 {  margin: auto;  width: 400px;  height: 200px;  border: 1px solid #000;  &gt;div {      display: none;  }  .show {      display: block;  }}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表单输入绑定-v-modele"><a href="#表单输入绑定-v-modele" class="headerlink" title="表单输入绑定 (v-modele)"></a>表单输入绑定 (v-modele)</h2><p><strong>1.介绍</strong><br>你可以用 v-model 指令在表单 input、textarea 及 select 元素上创建双向数据绑定<br>通过指令 v-model=’’ 获取表单输入的信息数据 实现双向数据绑定</p><p><strong>2.语法:</strong><br>会将文本框输入的数据实时传递给绑定到data里的msg中</p><pre class="line-numbers language-none"><code class="language-none">&lt;input type='text' v-model='msg' /&gt;data(){    return{        msg:''    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例:</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;表单输入绑定&lt;/h2&gt;    &lt;!-- &lt;input type="text" :value="msg" name="" id=""&gt; --&gt;    &lt;!-- 1. 文本/密码 v-model=''--&gt;    &lt;input type="text" placeholder="请输入" v-model="formData.msg" @keyup.enter="send" name="" id="" /&gt;    &lt;p&gt;msg:{{formData.msg}}&lt;/p&gt;    &lt;!-- 2. 多行文本 --&gt;    &lt;!-- 3. 单选按钮 --&gt;    性别:    &lt;input type="radio" v-model="formData.sex" name="aa" value="1" /&gt;男    &lt;input type="radio" v-model="formData.sex" name="aa" value="2" /&gt;女    &lt;p&gt;选择的性别:{{ formData.sex }}&lt;/p&gt;     &lt;!-- 爱好: --&gt;    &lt;input type="checkbox" v-model="formData.arr" value="a" /&gt;吃    &lt;input type="checkbox" v-model="formData.arr" value="b" /&gt;喝    &lt;input type="checkbox" v-model="formData.arr" value="c" /&gt;玩    &lt;p&gt;选择的爱好:{{ formData.arr }}&lt;/p&gt;    &lt;!-- 城市: --&gt;    &lt;select name="" id="" v-model="formData.select"&gt;      &lt;option value=""&gt;请选择&lt;/option&gt;      &lt;option value="beijing"&gt;北京&lt;/option&gt;      &lt;option value="shanghai"&gt;上海&lt;/option&gt;      &lt;option value="gaungzhou"&gt;广州&lt;/option&gt;    &lt;/select&gt;    &lt;p&gt;城市选择:{{ formData.select }}&lt;/p&gt;      &lt;button @click="submit"&gt;注册信息&lt;/button&gt;      &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data() {    return {        msg:'初始值',        sex:'',        //对象的语法--------存储表单数据      formData: {        msg: "", //输入框        sex: 1, //性别        arr: [],         select: "",      },    };  },  methods:{    send() {      console.log("输入的数据为:", this.msg);    },    submit() {      //点击按钮--发送输入的数据给后台-- data -- msg  sex arr ...      console.log("提交注册信息表单",this.formData);    },  }};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.修饰符</strong></p><ul><li>lazy&nbsp;  只有当input失去焦点时才更新数据</li><li>number 把input标签中输入的内容转成数字，调用是parseFloat  (Nunber())</li><li>trim   去除左右空格</li></ul><p><strong>案例：</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;h3&gt;表单修饰符 -修饰符 &lt;/h3&gt;    &lt;!-- .lazy 失去焦点或者回车 获取数据 --&gt;    &lt;input type="text" v-model.lazy="search"&gt;    &lt;p&gt;search:{{ search }}&lt;/p&gt;    &lt;input type="text" v-model.trim="msg" name="" id=""&gt;    &lt;p&gt;去空格:{{msg}}&lt;/p&gt;      &lt;!-- .number  转数字 --&gt;    &lt;input type="number" v-model.number="num" name="" id=""&gt;    &lt;p&gt;num:{{ num }}&lt;/p&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data() {    return {        msg:'',        sex:'',      search:'',      num:'只能输入数字',    };  },  methods:{  }};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4.v-model实现原理</strong><br>v-model只不过是一个语法糖而已,真正的实现靠的还是<br>v-bind:绑定响应式数据<br>触发oninput 事件并传递数据<br>v-model&nbsp;是什么。语法糖&nbsp;:value&nbsp;+&nbsp;@input。还要分为两种情况</p><pre class="line-numbers language-none"><code class="language-none">&lt;input v-model="val"&gt;&lt;!-- 基本等价于，因为内部还有一些其他的处理 --&gt;// $event是事件对象，$event.target.value表示input框中的输入值&lt;input :value="val" @input="val = $event.target.value"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例：</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;!-- v-model实现的原理 --&gt;    &lt;input type="text" v-model="inp" name="" id=""&gt;    &lt;p&gt;inp:{{inp}}&lt;/p&gt;     &lt;!-- v-model == v-bind:value='' @input='函数' --&gt;    表单值:&lt;input type="text" :value="val" @input="changeVal" name="" id=""&gt;    &lt;p&gt;val:{{val}}&lt;/p&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data() {    return {        val:'请输入',        msg:'',        inp:'',        sex:'',      search:'',      num:'只能输入数字',    };  },  methods:{    changeVal(e){        console.log(e); //表单的事件对象        console.log(e.target.value); //表单里的文本框内容        this.val = e.target.value; //将文本框内容 赋值给 data里的val 即使用v-bind又让数据进行双向绑定了    }  }};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="计算属性和侦听器"><a href="#计算属性和侦听器" class="headerlink" title="计算属性和侦听器"></a>计算属性和侦听器</h2><p><strong>1. 计算属性</strong></p><ul><li>介绍: 处理数据后把数据缓存起来 使用数据的时候使用的缓存的数据,但是如果原数据修改了重新计算</li><li>语法<pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;计算属性computed&lt;/h2&gt;    &lt;!-- 如果是字符串 取反操作实现 --&gt;    &lt;p&gt;字符串:{{ msg }}&lt;/p&gt;    &lt;!-- 不推荐: 模板语法里面写很多方法  多次使用不方便 --&gt;    // split-先转换为数组， reverse-然后取反， join-最后转为字符串    &lt;p&gt;字符串-取反:{{ msg.split("").reverse().join("") }}&lt;/p&gt;    &lt;p&gt;封装函数-取反:{{qufan()}}&lt;/p&gt;    &lt;p&gt;封装函数-取反:{{qufan()}}&lt;/p&gt;    &lt;p&gt;封装函数-取反:{{qufan()}}&lt;/p&gt;    &lt;p&gt;计算属性-取反：{{msg2}}&lt;/p&gt;    &lt;p&gt;计算属性-取反：{{msg2}}&lt;/p&gt;    &lt;p&gt;计算属性-取反：{{msg2}}&lt;/p&gt;    &lt;p&gt;计算属性-取反：{{msg2}}&lt;/p&gt;    &lt;button @click="msg = 'how are you'"&gt;修改msg&lt;/button&gt;    &lt;!-- 例子: v-for='' v-if不能在同一个元素使用 -- computed处理数据 --&gt;    &lt;h4&gt;早市水果更新:&lt;/h4&gt;     &lt;ul&gt;        &lt;li v-for="item in zaoshi2" :key='item.id'&gt;            {{item.fruit}}        &lt;/li&gt;    &lt;/ul&gt;      &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data() {    return {      msg: "hello vue",      zaoshi: [        {          id: 100,          fruit: "苹果",          flag: false,        },        {          id: 101,          fruit: "阳光玫瑰",          flag: true,        },        {          id: 102,          fruit: "车厘子",          flag: false,        },        {          id: 103,          fruit: "榴莲",          flag: true,        },      ],    };  },  methods: {    qufan() {      console.log("执行了一次取反方法");      return this.msg.split("").reverse().join("");    },  },  //计算属性: 对数据进行加工处理  缓存数据  computed: {    msg2() {      console.log("计算属性: 对数据进行加工处理  缓存数据");      return this.msg.split("").reverse().join("");    },    //处理数据    zaoshi2(){        //过滤方法 返回的满足条件的数组  比如:[1,2,3,4]  =&gt;[3,4]        return this.zaoshi.filter((item)=&gt;{            // if(item.flag == true) {            //     return item.flag            // }            return item.flag        })    }  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>2. 侦听器</strong></p><ul><li>介绍: Vue 通过 watch 选项提供了一个更通用的方法，来响应数据的变化 <pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;      &lt;h2&gt;侦听器-watch&lt;/h2&gt;      &lt;p&gt;功能:监听数据修改了,然后做业务逻辑&lt;/p&gt;      &lt;input type="text" v-model="inp"  name="" id=""&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {    data(){        return{            inp:'',            arr:[]        }    },    //侦听器--数据变化 (当前监听的是inp变化)    watch:{        inp:function(n,o){            console.log('新值:',n ,'旧值:',o);            //业务逻辑  比如输入东西后 网络请求            //模糊查询                    }    }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>3. computed和watch区别 （考点）</strong> </p><ul><li>相同：computed和watch都是观察页面的数据变化的。</li><li>不同：<br>computed：是计算属性，依赖其它属性值:</li><li>支持缓存，只有依赖数据发生改变，才会重新进行计算</li><li>不支持异步，当computed内有异步操作时无效，无法监听数据的变化<br>watch：没有缓存性，更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；</li><li>不支持缓存，数据变，直接会触发相应的操作；</li><li>watch支持异步；</li></ul><h2 id="Vue-的生命周期方法有哪些-一般在哪一步发请求"><a href="#Vue-的生命周期方法有哪些-一般在哪一步发请求" class="headerlink" title="Vue 的生命周期方法有哪些 一般在哪一步发请求"></a>Vue 的生命周期方法有哪些 一般在哪一步发请求</h2><p><strong>生命周期</strong>：事物从诞生到消亡的过程<br>Vue生命周期：<br><img src="https://s1.ax1x.com/2022/04/19/L06cp4.png"></p><h2 id="v-if-和-v-show-的区别"><a href="#v-if-和-v-show-的区别" class="headerlink" title="v-if 和 v-show 的区别"></a>v-if 和 v-show 的区别</h2><p>v-if: 控制元素的渲染或者销毁<br>v-show:控制元素的 display:block/none</p><blockquote><p>场景：<br>频繁切换： v-show<br>初次渲染优化：v-if </p></blockquote><h2 id="Vue-修饰符有哪些"><a href="#Vue-修饰符有哪些" class="headerlink" title="Vue 修饰符有哪些"></a>Vue 修饰符有哪些</h2><h2 id="v-for-为什么要加-key"><a href="#v-for-为什么要加-key" class="headerlink" title="v-for 为什么要加 key"></a>v-for 为什么要加 key</h2><h2 id="理解-Vue-的单向-双向-数据流"><a href="#理解-Vue-的单向-双向-数据流" class="headerlink" title="理解 Vue 的单向/双向 数据流"></a>理解 Vue 的单向/双向 数据流</h2><h3 id="首先了解一下数据绑定"><a href="#首先了解一下数据绑定" class="headerlink" title="首先了解一下数据绑定"></a>首先了解一下数据绑定</h3><p>什么是绑定？<br>比如当前href属性值取决于表达式school.url.toUpperCase()的结果，这两者之间就是有绑定关系，且通过v-bind指令完成数据绑定。</p><pre class="line-numbers language-none"><code class="language-none">&lt;a v-bind:href="school.url.toUpperCase()" v-bind:x="hello"&gt;点我去{{school.name}}学习&lt;/a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="v-bind-单向数据原理"><a href="#v-bind-单向数据原理" class="headerlink" title="v-bind 单向数据原理"></a>v-bind 单向数据原理</h3><p>前面学习的指令主要作用是将值插入到模板的内容当中<br>但除了内容需要动态来决定外，某些属性也希望动态来绑定<br><strong>作用：动态绑定属性</strong><br>缩写：**:**<br>预期：any (with argument) | Object (without argument)<br>参数：attrOrProp (optional)<br><strong>v-bind用于绑定一个或多个属性值，或者向另一个组件传递props值</strong>(这个学到Vue进阶时介绍)<br>在开发中，一般有哪些属性需要动态进行绑定呢？<br>比如图片的链接src、网站的链接href、动态绑定一些类、样式等等<br>例子：通过Vue实例中的data绑定元素的src和href，代码如下：</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>很多时候，我们希望动态的来切换class，比如：<br>当数据为某个状态时，字体显示红色。<br>当数据另一个状态时，字体显示黑色。</p><pre class="line-numbers language-none"><code class="language-none">&lt;div id="app"&gt;  &lt;!-- 错误的做法: 这里不可以使用mustache语法--&gt;  &lt;!--&lt;img src="{{imgURL}}" alt=""&gt;--&gt;  &lt;!-- 正确的做法: 使用v-bind指令 --&gt;  &lt;img v-bind:src="imgURL" alt=""&gt;  &lt;a v-bind:href="aHref"&gt;百度一下&lt;/a&gt;  &lt;!--&lt;h2&gt;{{}}&lt;/h2&gt;--&gt;  &lt;!--语法糖的写法--&gt;  &lt;img :src="imgURL" alt=""&gt;  &lt;a :href="aHref"&gt;百度一下&lt;/a&gt;&lt;/div&gt;&lt;script src="../js/vue.js"&gt;&lt;/script&gt;&lt;script&gt;  const app = new Vue({    el: '#app',    data: {      message: '你好啊',      imgURL: 'https://img11.360buyimg.com/mobilecms/s350x250_jfs/t1/20559/1/1424/73138/5c125595E3cbaa3c8/74fc2f84e53a9c23.jpg!q90!cc_350x250.webp',      aHref: 'http://www.baidu.com'    }  })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="v-bind动态绑定class-对象语法"><a href="#v-bind动态绑定class-对象语法" class="headerlink" title="v-bind动态绑定class(对象语法)"></a>v-bind动态绑定class(对象语法)</h4><ul><li>绑定方式：对象语法<br>含义是:class后面跟的是一个对象</li></ul><ol><li>直接通过{}绑定一个类<pre class="line-numbers language-none"><code class="language-none">&lt;h2 :class="{'active': isActive}"&gt;Hello World&lt;/h2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>也可以通过判断，传入多个值<pre class="line-numbers language-none"><code class="language-none">&lt;h2 :class="{'active': isActive, 'line': isLine}"&gt;Hello World&lt;/h2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>和普通的类同时存在，并不冲突<br>注：如果isActive和isLine都为true，那么会有title/active/line三个类<pre class="line-numbers language-none"><code class="language-none">&lt;h2 class="title" :class="{'active': isActive, 'line': isLine}"&gt;Hello World&lt;/h2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>如果过于复杂，可以放在一个methods或者computed中<br>注：classes是一个计算属性<pre class="line-numbers language-none"><code class="language-none">&lt;h2 class="title" :class="classes"&gt;Hello World&lt;/h2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>比如ul的li标签点击某个标签变颜色</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;div id="app"&gt;  &lt;!-- 当布尔值为true 这个类名1即 active 就会被添加到标签上 --&gt;  &lt;!-- 一个 { } 表示对象 --&gt;  &lt;h2 class="title" v-bind:class="{active: isActive, line: isLine}"&gt;{{message}}&lt;/h2&gt;  &lt;h2 class="title" v-bind:class="getClasses()"&gt;{{message}}&lt;/h2&gt;  &lt;button v-on:click="btnClick"&gt;按钮&lt;/button&gt;&lt;/div&gt;&lt;script&gt;  const app = new Vue({    el: '#app',    data: {      message: '你好啊',      isActive: true,      isLine: true    },    methods: {      btnClick: function () {        this.isActive = !this.isActive      },      getClasses: function () {        return {active: this.isActive}      }    }  })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="v-bind动态绑定class-数组语法"><a href="#v-bind动态绑定class-数组语法" class="headerlink" title="v-bind动态绑定class(数组语法)"></a>v-bind动态绑定class(数组语法)</h4><ul><li>数组语法的含义是:class后面跟的是一个数组。</li></ul><ol><li>直接通过{}绑定一个类<pre class="line-numbers language-none"><code class="language-none">&lt;h2 :class="['active']"&gt;Hello World&lt;/h2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>也可以传入多个值<pre class="line-numbers language-none"><code class="language-none">&lt;h2 :class=“[‘active’, 'line']"&gt;Hello World&lt;/h2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>和普通的类同时存在，并不冲突<br>注：会有title/active/line三个类<pre class="line-numbers language-none"><code class="language-none">&lt;h2 class="title" :class=“[‘active’, 'line']"&gt;Hello World&lt;/h2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>如果过于复杂，可以放在一个methods或者computed中<br>注：classes是一个计算属性<pre class="line-numbers language-none"><code class="language-none">&lt;h2 class="title" :class="classes"&gt;Hello World&lt;/h2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>例如：</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;div id="app"&gt;  &lt;h2 class="title" :class="[active, line]"&gt;{{message}}&lt;/h2&gt;  &lt;h2 class="title" :class="getClasses()"&gt;{{message}}&lt;/h2&gt;&lt;/div&gt;&lt;script src="../js/vue.js"&gt;&lt;/script&gt;&lt;script&gt;  const app = new Vue({    el: '#app',    data: {      message: '你好啊',      active: 'aaaaaa',      line: 'bbbbbbb'    },    methods: {      getClasses: function () {        return [this.active, this.line]      }    }  })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="小案例-点击li标签变色（默认第一li为红色）"><a href="#小案例-点击li标签变色（默认第一li为红色）" class="headerlink" title="小案例 点击li标签变色（默认第一li为红色）"></a>小案例 点击li标签变色（默认第一li为红色）</h4><p>分析：</p><ol><li>v-for绑定给li标签，同时v-on添加点击事件，并且li标签的class用v-bind动态绑定 </li><li>使用v-for绑定到li标签上，自动遍历data中的数据，将下标（index）和每一项内容（item）用插值语法显示到页面</li><li>在data中添加一个isRed属性值为0，想让class样式显示，需要v-bind绑定的red值为true，即该值可以等等于index,因为index的第一个值就是0</li><li>v-on点击事件点击某一个li，将下标的值赋值给isRed，即当前点击的li标签的class样式显示 end~<pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;    .red {      color: red;    }&lt;/style&gt;&lt;!--作业需求: 点击列表中的哪一项, 那么该项的文字变成红色--&gt;&lt;div id="app"&gt;    &lt;ul&gt;      &lt;!-- &lt;li v-for="每一项,下标 in 数据源"&gt;{{item}}&lt;/li&gt; --&gt;      &lt;li v-for="(item,index) in movie"  v-on:click="getColor(index)"       v-bind:class="{red:isRed==index}" &gt;{{index}}--{{item}}&lt;/li&gt;    &lt;/ul&gt;&lt;/div&gt;&lt;script&gt;    const app = new Vue({      el:'#app',      data:{        isRed:0,        movie:['海王','海尔兄弟','火影忍者','进击的巨人']      },      methods:{        getColor: function (index){           this.isRed = index           console.log(this.isRed);        }      },    })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="v-bind绑定style-一"><a href="#v-bind绑定style-一" class="headerlink" title="v-bind绑定style 一"></a>v-bind绑定style 一</h4><p>利用v-bind:style来绑定一些CSS内联样式<br>在写CSS属性名的时候，比如font-size<br>可以使用驼峰式 (camelCase)  fontSize<br>或短横线分隔 (kebab-case，记得用单引号括起来) ‘font-size’</p><h2 id="v-model-双向数据原理"><a href="#v-model-双向数据原理" class="headerlink" title="v-model 双向数据原理"></a>v-model 双向数据原理</h2><h2 id="Vue2-x响应式数据-双向绑定原理"><a href="#Vue2-x响应式数据-双向绑定原理" class="headerlink" title="Vue2.x响应式数据/双向绑定原理"></a>Vue2.x响应式数据/双向绑定原理</h2><p>整体思路是数据劫持+观察者模式<br>Vue 数据双向绑定主要是指：数据变化更新视图，视图变化更新数据。其中，View变化更新Data，可以通过事件监听的方式来实现，所以 Vue数据双向绑定的工作主要是如何根据Data变化更新View。<br><strong>Vue中有两种数据绑定的方式：</strong></p><ol><li>单向绑定(v-bind)：数据只能从data流向页面。</li><li>双向绑定(v-model)：数据不仅能从data流向页面，还可以从页面流向data。<br>备注：</li><li>双向绑定一般都应用在表单类元素上（如：input、select等）</li><li>v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值。<pre class="line-numbers language-none"><code class="language-none">&lt;!-- 准备好一个容器--&gt;&lt;div id="root"&gt;&lt;!-- 普通写法 --&gt;&lt;!-- 单向数据绑定：&lt;input type="text" v-bind:value="name"&gt;双向数据绑定：&lt;input type="text" v-model:value="name"&gt;&lt;!-- 简写 --&gt;单向数据绑定：&lt;input type="text" v-bind:value="name"&gt;双向数据绑定：&lt;input type="text" v-model:value="name"&gt;&lt;!-- 如下代码是错误的，因为v-model只能应用在表单类元素（输入类元素）上 --&gt;&lt;!-- &lt;h2 v-model:x="name"&gt;你好啊&lt;/h2&gt; --&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。  new Vue({  el:'#root',  data:{  name:'哔哩哔哩',  }  })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="虚拟-DOM-是什么-有什么优缺点"><a href="#虚拟-DOM-是什么-有什么优缺点" class="headerlink" title="虚拟 DOM 是什么 有什么优缺点"></a>虚拟 DOM 是什么 有什么优缺点</h2><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p>全称： Model-View-ViewModel ， Model 表示数据模型层。 view 表示视图层， ViewModel 是 View 和 Model 层的桥梁，数据绑定到 viewModel 层并自动渲染到页面中，视图变化通知 viewModel 层更新数据。</p><ul><li>Model层：</li></ul><p><strong>数据层</strong><br>数据可能是我们固定的死数据，更多的是来自我们服务器，从网络上请求下来的数据。</p><ul><li>View层：</li></ul><p><strong>视图层</strong><br>在我们前端开发中，通常就是DOM层。<br>主要的作用是给用户展示各种信息。</p><ul><li>VueModel层：</li></ul><p><strong>视图模型层</strong><br>视图模型层是View和Model沟通的桥梁。<br>一方面它实现了Data Binding，也就是数据绑定，将Model的改变实时的反应到View中<br>另一方面它实现了DOM Listener，也就是DOM监听，当DOM发生一些事件(点击、滚动、touch等)时，可以监听到，并在需要的情况下改变对应的Data。</p><ol><li>M：模型(Model) ：对应 data 中的数据</li><li>V：视图(View) ：模板</li><li>VM：视图模型(ViewModel) ： Vue 实例对象<br>Vm（Vue实例对象）把左边的View和右边Model进行连接在一起<br><img src="https://s1.ax1x.com/2022/04/18/LdwQa9.png"></li></ol><p><strong>观察发现：</strong></p><ol><li>data中所有的属性，最后都出现在了vm身上。</li><li>VM身上所有的属性 及 Vue原型上所有属性，在Vue模板中都可以直接使用。</li></ol><p><strong>执行过程</strong> ：数据在data中经过 VM视图模型放到了页面View上页面上如果有地方需要更改要映射回数据就再给VM视图模型，然后视图模型再给data里的数据 </p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 1 准备好一个容器 也就是 view 视图 模板代码--&gt; &lt;div id="root"&gt;&lt;h1&gt;学校名称：{{name}}&lt;/h1&gt;&lt;h1&gt;学校地址：{{address}}&lt;/h1&gt;&lt;!-- &lt;h1&gt;测试一下1：{{1+1}}&lt;/h1&gt;&lt;h1&gt;测试一下2：{{$options}}&lt;/h1&gt;&lt;h1&gt;测试一下3：{{$emit}}&lt;/h1&gt;&lt;h1&gt;测试一下4：{{_c}}&lt;/h1&gt; --&gt;&lt;/div&gt; &lt;script type="text/javascript"&gt;Vue.config.productionTip = fal    se //阻止 vue 在启动时生成生产提示const vm = new Vue({// 2 VM 视图模型ViewModelel:'#root',data:{ // 3 data里的是模型 modelname:"b站大学",address:"成都",}}) console.log(vm)&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vue的数据代理"><a href="#Vue的数据代理" class="headerlink" title="Vue的数据代理"></a>Vue的数据代理</h2><h3 id="首先学习下-Object-defineProperty-方法"><a href="#首先学习下-Object-defineProperty-方法" class="headerlink" title="首先学习下 Object.defineProperty()方法"></a>首先学习下 Object.defineProperty()方法</h3><p>Object.defineProperty() 方法直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象。<br><strong>defineProperty()参数</strong></p><pre class="line-numbers language-none"><code class="language-none">Object.defineProperty(obj, prop, descriptor)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>obj 需要定义属性的对象</li><li>prop 需被定义或修改的属性名</li><li>descriptor 需被定义或修改的属性的描述符</li></ul><p>例子：定义了一个person对象，里面包含name、sex属性和其它属性值。<br>注意：age属性是通过defineProperty方法中</p><pre class="line-numbers language-none"><code class="language-none">&lt;script type="text/javascript"&gt;let number = 19let person = {name: '张三',sex: '男',}Object.defineProperty(person, 'age', {value:19,        enumerable:true, //控制属性是否可以枚举，默认值是falsewritable:true, //控制属性是否可以被修改，默认值是falseconfigurable:true //控制属性是否可以被删除，默认值是false//当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值get() {console.log('有人读取age属性了')return number},//当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值set(value) {console.log('有人修改了age属性，且值是', value)number = value}}) console.log(Object.keys(person))// Object.keys方法传入一个对象作为参数，可以把传入对象所有属性的属性名提取出来变成数组console.log(person)&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vue中的数据代理"><a href="#Vue中的数据代理" class="headerlink" title="Vue中的数据代理"></a>Vue中的数据代理</h2><h3 id="什么是数据代理"><a href="#什么是数据代理" class="headerlink" title="什么是数据代理"></a>什么是数据代理</h3><p>数据代理：通过一个对象代理对另一个对象中属性的操作（读/写）</p><pre class="line-numbers language-none"><code class="language-none">&lt;script type="text/javascript" &gt;let obj = {x:100 }let obj2 = {y:200Object.defineProperty(obj2,'x',{get(){return obj.x},set(value){obj.x = value}})&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="vue常用ui库"><a href="#vue常用ui库" class="headerlink" title="vue常用ui库"></a>vue常用ui库</h2><p><strong>移动端</strong></p><ul><li>mint-ui （<a href="http://mint-ui.github.io/#!/zh-cn%EF%BC%89">http://mint-ui.github.io/#!/zh-cn）</a></li><li>Vant（<a href="https://youzan.github.io/vant/#/zh-CN/home%EF%BC%89">https://youzan.github.io/vant/#/zh-CN/home）</a></li><li>VUX (<a href="https://vux.li/">https://vux.li/</a>)</li></ul><p><strong>pc端</strong></p><ul><li>element-ui（<a href="https://element.eleme.cn/2.13/#/zh-CN/component/installation%EF%BC%89">https://element.eleme.cn/2.13/#/zh-CN/component/installation）</a></li><li>Ant Design of Vue（<a href="https://www.antdv.com/docs/vue/introduce-cn/%EF%BC%89">https://www.antdv.com/docs/vue/introduce-cn/）</a></li><li>Avue (<a href="https://avuejs.com/">https://avuejs.com/</a>)</li></ul><h2 id="常用webpack配置"><a href="#常用webpack配置" class="headerlink" title="常用webpack配置"></a>常用webpack配置</h2><p><strong>待更新。。。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vue的安装&quot;&gt;&lt;a href=&quot;#Vue的安装&quot; class=&quot;headerlink&quot; title=&quot;Vue的安装&quot;&gt;&lt;/a&gt;Vue的安装&lt;/h2&gt;&lt;h3 id=&quot;安装环境&quot;&gt;&lt;a href=&quot;#安装环境&quot; class=&quot;headerlink&quot; title=&quot;安</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="vue" scheme="https://wuzimo233.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>axios学习</title>
    <link href="https://wuzimo233.github.io/posts/4.html"/>
    <id>https://wuzimo233.github.io/posts/4.html</id>
    <published>2022-04-17T06:12:00.000Z</published>
    <updated>2022-04-18T08:01:30.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p><strong>已经学习过ajax、Promise</strong><br>准备json-server包，快速搭建HTTP服务（用axios的时候需要向服务端发送请求即需要服务端这个角色来与axios结合做实践）</p><ul><li>json-server用于模拟服务端接口数据，可以根据json数据建立一个完整的web服务</li><li>1安装json-server<pre class="line-numbers language-none"><code class="language-none">npm install -g json-server//查看版本号，安装成功json-server -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>2在文件夹下创建一个db.json文件，存放一些数据。<pre class="line-numbers language-none"><code class="language-none">{  "posts": [            //文章    {      "id": 1,      "title": "json-server",      "author": "typicode"    },    {      "id": 2,      "title": "《b站大学》",      "author": "吴老师"    }  ],  "comments": [        //评论    {      "id": 1,      "body": "some comment",      "postId": 1    },    {      "body": "喜大普奔",      "postId": 2,      "id": 2    }  ],  "profile": {        //个人信息    "name": "typicode"  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>3 启动服务<br>进入终端。执行启动json-server命令:<pre class="line-numbers language-none"><code class="language-none">json-server --watch .\db.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h2 id="认识axios"><a href="#认识axios" class="headerlink" title="认识axios"></a>认识axios</h2><h3 id="axios-是什么"><a href="#axios-是什么" class="headerlink" title="axios 是什么?"></a>axios 是什么?</h3><p>axios是目前前端使用非常广泛的基于 promise 的 HTTP 网络请求库，包括Vue/React也是推荐使用axios；<br><strong>本质是XMLHttpRequests请求 即ajax请求</strong></p><h3 id="axios-特性："><a href="#axios-特性：" class="headerlink" title="axios 特性："></a><strong>axios 特性：</strong></h3><ol><li>从浏览器中创建 XMLHttpRequests （浏览器中发送xml请求）</li><li>从 node.js 创建 http 请求 （在node.js中发送http请求）</li><li>支持 Promise API 相关操作</li><li>拦截请求和响应</li><li>转换请求数据和响应数据（对请求和响应的数据作转换）</li><li>取消请求</li><li>自动将结果转换成 JSON 数据</li><li>客户端支持防御 XSRF （阻止跨站攻击）</li></ol><h3 id="axios安装"><a href="#axios安装" class="headerlink" title="axios安装"></a>axios安装</h3><ul><li>1 使用 npm安装:<pre class="line-numbers language-none"><code class="language-none">$ npm install axios<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>2 使用 yarn安装:<pre class="line-numbers language-none"><code class="language-none">$ yarn add axios<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>3 使用 jsDelivr CDN安装:<pre class="line-numbers language-none"><code class="language-none">&lt;script src="https://cdn.bootcdn.net/ajax/libs/axios/0.26.1/axios.min.js"&gt;&lt;/script&gt; console.log(axios);  //ƒ() {for(var n=new Array(arguments.length),r=0;r&lt;n.length;r++)n[r]=arguments[r];return e.apply(t,n)} //建议使用国内CDN网速较快  //去这个网站引入 https://www.bootcdn.cn/axios/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="axios的基本使用"><a href="#axios的基本使用" class="headerlink" title="axios的基本使用"></a>axios的基本使用</h2></li></ul><p><strong>前置：引入了axios</strong><br><strong>准备四个按钮发送不同的请求</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="container"&gt;    &lt;h2 class="page-header"&gt;基本使用&lt;/h2&gt;    &lt;button class="btn btn-primary"&gt; 发送GET请求 &lt;/button&gt;    &lt;button class="btn btn-warning"&gt; 发送POST请求 &lt;/button&gt;    &lt;button class="btn btn-success"&gt; 发送 PUT 请求 &lt;/button&gt;    &lt;button class="btn btn-danger"&gt; 发送 DELETE 请求 &lt;/button&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><pre class="line-numbers language-none"><code class="language-none">//获取按钮const btns = document.querySelectorAll('button');//第一个 （get 查询功能）btns[0].onclick = function () {    //发送ajax请求     axios({        //请求类型        method: 'GET',        //请求地址 刚启动好的json-server地址 且id为2的那篇文章        url: ' http://localhost:3000/posts/2'    }).then(response =&gt; {        console.log(response);    })}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><pre class="line-numbers language-none"><code class="language-none">//添加一篇新的文章 （post 添加功能）btns[1].onclick = function () {    //发送ajax请求    axios({        method: 'POST',                       //请求类型        url: ' http://localhost:3000/posts',  //请求地址        data: {            "title": "招聘摄影",               //请求体            "author": "小吴"            }    }).then(response =&gt; {        console.log(response);    })}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PUT请求"><a href="#PUT请求" class="headerlink" title="PUT请求"></a>PUT请求</h3><pre class="line-numbers language-none"><code class="language-none">//更新文章 需要在url里加上id 比如这里要更新的是id为3的文章（put 更新功能）btns[2].onclick = function () {    //发送ajax请求    axios({        method: 'PUT',                          //请求类型        url: ' http://localhost:3000/posts/3',  //请求地址        data: {                                             "title": "招聘程序员吗",             //修改请求体的数据            "author": "小瑶酱"        }    }).then(response =&gt; {        console.log(response);    })}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DELETE请求"><a href="#DELETE请求" class="headerlink" title="DELETE请求"></a>DELETE请求</h3><pre class="line-numbers language-none"><code class="language-none">//删除文章 （delete 删除功能）btns[3].onclick = function () {    //发送ajax请求    axios({        //请求类型        method: 'DELETE',        //请求地址        url: ' http://localhost:3000/posts/3',    }).then(response =&gt; {        console.log(response);    })}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="axios的其他发送请求"><a href="#axios的其他发送请求" class="headerlink" title="axios的其他发送请求"></a>axios的其他发送请求</h3><h4 id="使用request方法-发送-GET-请求-（接收一个对象类型参数）"><a href="#使用request方法-发送-GET-请求-（接收一个对象类型参数）" class="headerlink" title="使用request方法 发送 GET 请求 （接收一个对象类型参数）"></a>使用request方法 发送 GET 请求 （接收一个对象类型参数）</h4><pre class="line-numbers language-none"><code class="language-none">//获取按钮const btns = document.querySelectorAll('button');btns[0].onclick = function(){    // axios()    axios.request({        method:'GET',        url:'  http://localhost:3000/posts',    // 返回结果依然是Promise对象 用then指定成功的回调    }).then((response) =&gt; {        console.log(response);    })    ;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用POST方法-发送post请求-增加数据"><a href="#使用POST方法-发送post请求-增加数据" class="headerlink" title="//使用POST方法  发送post请求 增加数据"></a>//使用POST方法  发送post请求 增加数据</h4><pre class="line-numbers language-none"><code class="language-none">//获取按钮const btns = document.querySelectorAll('button');        btns[1].onclick = function(){            // axios()            axios.post(                'http://localhost:3000/comments',                 {                    "body": "喜大普奔",                    "postId": 2                }).then(response =&gt; {                    console.log(response);                })        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="axios配置对象"><a href="#axios配置对象" class="headerlink" title="axios配置对象"></a>axios配置对象</h2><pre class="line-numbers language-none"><code class="language-none">{   // `url` 是用于请求的服务器 URL  url: '/user',  // `method` 是创建请求时使用的方法  method: 'get',  // `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。  baseURL: 'https://some-domain.com/api/',  // `transformRequest` 对请求的数据做处理，处理后将结果像服务器发送  // 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法  // 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream  transformRequest: [function (data, headers) {    // 对 data 进行任意转换处理    return data;  }],  // `transformResponse` 对响应的结果做一些改变，改变之后我们用自定义的回调去处理结果  transformResponse: [function (data) {    // 对 data 进行任意转换处理    return data;  }],  // `headers` 对请求头信息做一个配置（身份校验）  headers: {'X-Requested-With': 'XMLHttpRequest'},  // `params` 是即将与请求一起发送的 URL 参数  // 必须是一个无格式对象(plain object)或 URLSearchParams 对象  params: {    ID: 12345  },  // `data` 是作为请求体的设置  // 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'  // 在没有设置 `transformRequest` 时，必须是以下类型之一：  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams  // - 浏览器专属：FormData, File, Blob  // - Node 专属： Stream  data: {    firstName: 'Fred'  },  // `timeout` 指定请求超时的毫秒数(0 表示无超时时间)  // 如果请求话费了超过 `timeout` 的时间，请求将被中断  timeout: 1000,  // `withCredentials` 表示跨域请求时对coken的携带设置  withCredentials: false,  //不携带  // `adapter` 对请求的适配器做设置  // 有两种一种是ajax、一种是node.js里发送http请求的  adapter: function (config) {    /* ... */  },  // `auth` 对请求基础的验证设置用户名和密码   auth: {    username: 'janedoe',    password: 's00pers3cret'  },  // `responseType` 表示服务器响应的数据类型，可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'  responseType: 'json', // 默认  // 响应结果的编码  responseEncoding: 'utf8',   // `xsrfCookieName` 跨域请求标识对cookie的名称设置  xsrfCookieName: 'XSRF-TOKEN',   // `xsrfHeaderName`  是承载 xsrf token 的值的 HTTP 头的名称  xsrfHeaderName: 'X-XSRF-TOKEN', // default  // `onUploadProgress` 上传的一些回调  onUploadProgress: function (progressEvent) {    // 对原生进度事件的处理  },  // `onDownloadProgress` 下载时的一些回调  onDownloadProgress: function (progressEvent) {    // 对原生进度事件的处理  },  // `maxContentLength` 定义允许的响应内容的最大尺寸  maxContentLength: 2000,  // `validateStatus`  对响应结果的成功做一个设置 什么情况下是成功的呢？默认值为响应状态码 大于等于200 小于300  validateStatus: function (status) {    return status &gt;= 200 &amp;&amp; status &lt; 300; // default  },  // `maxRedirects` 最大跳转的次数 默认5次 即向一个服务发送请求，它作了跳转后呢，我们是否需要让它继续往前进行请求   maxRedirects: 5, // 默认的  // 设置socket 文件的位置 作用是像docker的守护进程发送请求的  socketPath: null, // default  // 对客户端的一些信息做一些设置  httpAgent: new http.Agent({ keepAlive: true }),  httpsAgent: new https.Agent({ keepAlive: true }),  // 设置代理   // `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据  // 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。   proxy: {    host: '127.0.0.1',    port: 9000,    auth: {      username: 'mikeymike',      password: 'rapunz3l'    }  },  // `cancelToken` 对ajax请求作一个取消的设置  cancelToken: new CancelToken(function (cancel) {  })}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="axios的默认配置"><a href="#axios的默认配置" class="headerlink" title="axios的默认配置"></a>axios的默认配置</h3><p>例子：点击按钮发送get请求<br>//<strong>没有做默认配置时，每次访问都比较麻烦</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="container"&gt;    &lt;h2 class="page-header"&gt;基本使用&lt;/h2&gt;    &lt;button class="btn btn-primary"&gt; 发送GET请求 &lt;/button&gt;    &lt;button class="btn btn-warning"&gt; 发送POST请求 &lt;/button&gt;    &lt;button class="btn btn-success"&gt; 发送 PUT 请求 &lt;/button&gt;    &lt;button class="btn btn-danger"&gt; 发送 DELETE 请求 &lt;/button&gt;&lt;/div&gt;&lt;script&gt;    // 获取按钮    const btns = document.querySelectorAll('button');    btns[0].onclick = function(){        axios({            method:'GET',            url: 'http://localhost:3000/posts'        }).then(response =&gt; {            console.log(response);        })    }&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用默认配置后</p><pre class="line-numbers language-none"><code class="language-none">//默认配置axios.defaults.method = 'GET';  //设置默认的请求类型为 GETaxios.defaults.baseURL = 'http://localhost:3000' //设置基础urlbtns[0].onclick = function () {    axios({        url: '/posts',    }).then(response =&gt; {        console.log(response);    })//还有其他的默认配置项// axios.defaults.params = {id:100}; 默认的请求url参数 即url后增加 ?id=100// axios.defaults.timeout = 3000;  超时时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="axios创建实例对象"><a href="#axios创建实例对象" class="headerlink" title="axios创建实例对象"></a>axios创建实例对象</h3><p>主要用于：项目中接口数据服务不是来自于单一的服务器，比如有两个服务器A、B，都提供了数据服务。在发送请求时，比如给A发，就要去设置A的协议域名端口，如果用默认方法做只能满足一个服务器，</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="container"&gt;    &lt;h2 class="page-header"&gt;基本使用&lt;/h2&gt;    &lt;button class="btn btn-primary"&gt; 发送GET请求 &lt;/button&gt;    &lt;button class="btn btn-warning" &gt; 发送POST请求 &lt;/button&gt;    &lt;br&gt;&lt;/div&gt;&lt;script&gt;    //获取按钮    const btns = document.querySelectorAll('button');    //创建实例对象 /getJoke    const duanzi = axios.create({        baseURL:'https://api.apiopen.top',        timeout:2000    });    //这里duanzi 与 axios 对象的功能几近是一样的     duanzi({        url:'/getJoke',    }).then((response)=&gt;{        console.log(response);    })    duanzi.get('/getJoke').then((response) =&gt; {        console.log(response.data);    })    const another = axios.create({        baseURL:'http:b.com',        timeout:2000    })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="axios拦截器"><a href="#axios拦截器" class="headerlink" title="axios拦截器"></a>axios拦截器</h2><p>在请求或响应被 then 或 catch 处理前拦截它们。<br>在发送请求之前，借助一些函数对请求的参数和内容作一些处理和检测。如果说都没有问题再去发送请求，有问题的话这个请求就停止或者取消。<br>当服务器返回结果之后，可以通过自己指定的回调处理结果。那么响应拦截器可以在我们处理响应结果之前先对结果做一些预处理。如：失败了就对失败结果做一些提醒或者记录，还能对数据接口做一些格式化的处理。然后再交由我们自己自定义的回调来处理。如果有问题在响应拦截器中就处理掉了。<br>执行顺序是，当用户发送请求后先执行请求拦截器成功/失败的回调，然后走响应拦截器成功/失败的回调，然后再走自定义的成功/失败的回调</p><h3 id="一般情况"><a href="#一般情况" class="headerlink" title="一般情况"></a>一般情况</h3><pre class="line-numbers language-none"><code class="language-none">// Promise相关// 设置请求拦截器  config 配置对象axios.interceptors.request.use(function (config) {    console.log('请求拦截器 成功');    return config;}, function (error) {    console.log('请求拦截器 失败 ');    return Promise.reject(error);});// 设置响应拦截器axios.interceptors.response.use(function (response) {    console.log('响应拦截器 成功');    return response;    // return response;}, function (error) {    console.log('响应拦截器 失败')    return Promise.reject(error);});//发送请求axios({    method: 'GET',    url: 'http://localhost:3000/posts'}).then(response =&gt; {    console.log('自定义回调处理成功的结果');    console.log(response);});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他情况：请求拦截器成功但抛出错误，响应拦截器失败，自定义失败回调"><a href="#其他情况：请求拦截器成功但抛出错误，响应拦截器失败，自定义失败回调" class="headerlink" title="其他情况：请求拦截器成功但抛出错误，响应拦截器失败，自定义失败回调"></a><strong>其他情况：请求拦截器成功但抛出错误，响应拦截器失败，自定义失败回调</strong></h3><pre class="line-numbers language-none"><code class="language-none">// Promise相关// 设置请求拦截器  config 配置对象axios.interceptors.request.use(function (config) {    console.log('请求拦截器 成功');    // return config;    throw '参数出了问题'     //如果这里抛出错误即失败了，返回一个失败的Promise，    //在执行后续的响应回调时就只能走失败的回调了，}, function (error) {    console.log('请求拦截器 失败 ');    return Promise.reject(error);});// 设置响应拦截器axios.interceptors.response.use(function (response) {    console.log('响应拦截器 成功');    return response;    // return response;}, function (error) {    console.log('响应拦截器 失败')    return Promise.reject(error);});//发送请求axios({    method: 'GET',    url: 'http://localhost:3000/posts'}).then(response =&gt; {    console.log('自定义回调处理成功的结果');    console.log(response);}).catch(reason =&gt; {    console.log('自定义回调处理失败的结果');    console.log(reason);})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多个请求、响应的结果顺序"><a href="#多个请求、响应的结果顺序" class="headerlink" title="多个请求、响应的结果顺序"></a><strong>多个请求、响应的结果顺序</strong></h3><p>请求拦截器 成功 2号<br>请求拦截器 成功 1号<br>响应拦截器 成功 1号<br>响应拦截器 成功 2号<br>自定义回调处理成功的结果<br>{data: Array(2), status: 200, statusText: ‘OK’, headers: {…}, config: {…},&nbsp;…}</p><pre class="line-numbers language-none"><code class="language-none">// Promise相关// 设置请求拦截器  config 配置对象axios.interceptors.request.use(function (config) {    console.log('请求拦截器 成功 1号');    //修改 config 中的参数    // config.params = {a:100};    return config;}, function (error) {    console.log('请求拦截器 失败 1号');    return Promise.reject(error);});axios.interceptors.request.use(function (config) {    console.log('请求拦截器 成功 2号');    //修改 config 中的参数    config.timeout = 2000;    return config;}, function (error) {    console.log('请求拦截器 失败 2号');    return Promise.reject(error);});// 设置响应拦截器axios.interceptors.response.use(function (response) {    console.log('响应拦截器 成功 1号');    return response;    // return response;}, function (error) {    console.log('响应拦截器 失败 1号')    return Promise.reject(error);});axios.interceptors.response.use(function (response) {    console.log('响应拦截器 成功 2号')    return response;}, function (error) {    console.log('响应拦截器 失败 2号')    return Promise.reject(error);});//发送请求axios({    method: 'GET',    url: 'http://localhost:3000/posts'}).then(response =&gt; {    console.log('自定义回调处理成功的结果');    console.log(response);}).catch(reason =&gt; {    console.log('自定义回调处理失败的结果');    console.log(reason);})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="axios取消请求"><a href="#axios取消请求" class="headerlink" title="axios取消请求"></a>axios取消请求</h2><ol><li><p>基本流程<br>配置 cancelToken 对象<br>缓存用于取消请求的 cancel 函数<br>在后面特定时机调用 cancel 函数取消请求<br>在错误回调中判断如果 error 是 cancel, 做相应处理</p></li><li><p>实现功能<br>点击按钮, 取消某个正在请求中的请求</p></li><li><p>在请求一个接口前, 取消前面一个未完成的请求</p></li></ol><p>使用 canceltoken 取消请求<br>Axios 的 cancel token API 基于cancelable promises proposal<br>可以使用 CancelToken.source 工厂方法创建 cancel token，像这样：</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="container"&gt;    &lt;h2 class="page-header"&gt;axios取消请求&lt;/h2&gt;    &lt;button class="btn btn-primary"&gt; 发送请求 &lt;/button&gt;    &lt;button class="btn btn-warning" &gt; 取消请求 &lt;/button&gt;&lt;/div&gt;&lt;script&gt;    //获取按钮    const btns = document.querySelectorAll('button');    //2.声明全局变量    let cancel = null;    //发送请求    btns[0].onclick = function(){        // 防止用户疯狂点击按钮发送请求        //检测上一次的请求是否已经完成         if(cancel !== null){            //取消上一次的请求            cancel();        }        axios({            method: 'GET',            url: 'http://localhost:3000/posts',            //1. 添加配置对象的属性            cancelToken: new axios.CancelToken(function(c){                //3. 将 c 的值赋值给 cancel                cancel = c;            })        }).then(response =&gt; {            console.log(response);            //将 cancel 的值初始化            cancel = null;        })    }    //绑定第二个事件取消请求    btns[1].onclick = function(){        cancel();    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="axios源码文件结构说明"><a href="#axios源码文件结构说明" class="headerlink" title="axios源码文件结构说明"></a>axios源码文件结构说明</h2><p><img src="https://s1.ax1x.com/2022/04/18/Ldltuq.png"></p><pre class="line-numbers language-none"><code class="language-none">├──  /dist/       # 项目打包后的文件即最终输出的axios整体文件├── /lib/         # 项目源码目录│     ├── /adapters/    # 定义请求的适配器 xhr、http│     │     ├── http.js                 # 用来在node.js中向   远端服务发送HTTP请求的│     │     └── xhr.js                  # 实现 xhr 适配器(包装 xhr 对象)│     ├── /cancel/      # 定义取消功能│     ├── /core/        # 一些核心功能│     │     ├── Axios.js                # axios 的核心主类 构造函数│     │     ├── dispatchRequest.js      # 用来调用 http 请求适配器方法发送请求的函数│     │     ├── InterceptorManager.js   # 拦截器的管理器│     │     └── settle.js               # 根据 http 响应状态，改变 Promise 的状态│     ├── /helpers/     # 一些辅助方法│     ├── axios.js      # 对外暴露接口│     ├── defaults.js   # axios 的默认配置│     └── utils.js      # 公用工具├── package.json  # 项目信息├── index.d.ts    # 配置 TypeScript 的声明文件└── index.js      # 入口文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="axios的创建过程"><a href="#axios的创建过程" class="headerlink" title="axios的创建过程"></a>axios的创建过程</h2><h2 id="axios对象创建过程模拟实现"><a href="#axios对象创建过程模拟实现" class="headerlink" title="axios对象创建过程模拟实现"></a>axios对象创建过程模拟实现</h2><h2 id="axios发送请求过程详解"><a href="#axios发送请求过程详解" class="headerlink" title="axios发送请求过程详解"></a>axios发送请求过程详解</h2><h2 id="模拟实现axios发送请求"><a href="#模拟实现axios发送请求" class="headerlink" title="模拟实现axios发送请求"></a>模拟实现axios发送请求</h2><h2 id="axios拦截器工作原理"><a href="#axios拦截器工作原理" class="headerlink" title="axios拦截器工作原理"></a>axios拦截器工作原理</h2><h2 id="模拟实现axios拦截器功能"><a href="#模拟实现axios拦截器功能" class="headerlink" title="模拟实现axios拦截器功能"></a>模拟实现axios拦截器功能</h2><h2 id="axios-取消请求工作原理"><a href="#axios-取消请求工作原理" class="headerlink" title="axios 取消请求工作原理"></a>axios 取消请求工作原理</h2><h2 id="模拟实现axios取消请求功能"><a href="#模拟实现axios取消请求功能" class="headerlink" title="模拟实现axios取消请求功能"></a>模拟实现axios取消请求功能</h2><h2 id="axios源码分析总结"><a href="#axios源码分析总结" class="headerlink" title="axios源码分析总结"></a>axios源码分析总结</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前置条件&quot;&gt;&lt;a href=&quot;#前置条件&quot; class=&quot;headerlink&quot; title=&quot;前置条件&quot;&gt;&lt;/a&gt;前置条件&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;已经学习过ajax、Promise&lt;/strong&gt;&lt;br&gt;准备json-server包，快速搭建HTTP服</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Axios" scheme="https://wuzimo233.github.io/tags/Axios/"/>
    
  </entry>
  
  <entry>
    <title>Promise学习</title>
    <link href="https://wuzimo233.github.io/posts/3.html"/>
    <id>https://wuzimo233.github.io/posts/3.html</id>
    <published>2022-04-14T06:30:00.000Z</published>
    <updated>2022-04-18T13:59:32.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认识-Promise"><a href="#认识-Promise" class="headerlink" title="认识 Promise"></a>认识 Promise</h2><ul><li><h3 id="什么是-Promise"><a href="#什么是-Promise" class="headerlink" title="什么是 Promise"></a>什么是 Promise</h3></li></ul><ol><li>抽象表达:<blockquote><p>Promise 是一门新的技术(ES6 规范)<br>Promise 是 JS 中进行异步编程的新解决方案<br>备注：旧方案是单纯使用回调函数</p></blockquote></li><li>具体表达:<blockquote><p>语法上来说: Promise 是一个构造函数<br>从功能上来说: promise 对象用来封装一个异步操作并可以获取其成功/失败的结果值</p></blockquote></li></ol><h3 id="为什么要用-Promise"><a href="#为什么要用-Promise" class="headerlink" title="为什么要用 Promise"></a>为什么要用 Promise</h3><h4 id="指定回调函数的方式更加灵活"><a href="#指定回调函数的方式更加灵活" class="headerlink" title="指定回调函数的方式更加灵活"></a>指定回调函数的方式更加灵活</h4><ol><li>旧的: 必须在启动异步任务前指定</li><li>promise: 启动异步任务 =&gt; 返回 promie 对象 =&gt; 给 promise 对象绑定回调函<br>数(甚至可以在异步任务结束后指定/多个)</li></ol><h4 id="支持链式调用-可以解决回调地狱问题"><a href="#支持链式调用-可以解决回调地狱问题" class="headerlink" title="支持链式调用, 可以解决回调地狱问题"></a>支持链式调用, 可以解决回调地狱问题</h4><blockquote><ol><li>什么是回调地狱?<br> 回调函数嵌套调用, 外部回调函数异步执行的结果是嵌套的回调执行的条件<br> <img src="https://s1.ax1x.com/2022/04/14/LlRNPf.jpg" alt="回调地狱"></li><li>回调地狱的缺点?<br> 不便于阅读<br> 不便于异常处理</li><li>解决方案?<br> promise 链式调用</li><li>终极解决方案?<br> async/await</li></ol></blockquote><h3 id="如何使用-Promise"><a href="#如何使用-Promise" class="headerlink" title="如何使用 Promise"></a>如何使用 Promise</h3><h4 id="Promise-语法结构"><a href="#Promise-语法结构" class="headerlink" title="Promise 语法结构"></a>Promise 语法结构</h4><blockquote><p>语法结构： new Promise((resolve, reject) =&gt; { } 里面是一个函数类型的参数，参数里面的两个参数也是函数<br>在花括号{ }里边包含一个异步操作,如果成功则调用 resolve ，同时只要 resolve 调用就会将 promise 对象 p 的状态设置为『成功』，<br>如果失败则调用 reject，调完 reject 后会将 promise 对象 p 的状态设置为『失败』（即这两个可以修改 promise&gt;对象的状态）<br>接着 promise 对象通过调用 then()方法去指定成功和失败时的回调<br>如果成功就执行第一个回调函数，失败则执行第二个回调函数<br>Promise 除了可以封装异步操作之外，还能获取异步操作里成功和失败的结果值 即下方<strong>Promise 形式实现</strong>案例的 n 值<br>然后可以将 n 值传递给 resolve 和 reject 函数<br>最后下方的 then 方法里的两个回调都能拿到这个结果值作为参数使用</p></blockquote><h4 id="Promise-初体验"><a href="#Promise-初体验" class="headerlink" title="Promise 初体验"></a>Promise 初体验</h4><blockquote><p><strong>案例：需求——点击抽奖按钮两秒后，告诉用户是否中奖，中奖的概率是百分之 30。如果中奖在页面中弹框告知恭喜中奖，没有就弹出再接再厉。</strong></p></blockquote><p><code>一般方法实现</code></p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="container"&gt;    &lt;h2 class="page-header"&gt;Promise 初体验&lt;/h2&gt;    &lt;button class="btn btn-primary" id="btn"&gt;点击抽奖&lt;/button&gt;&lt;/div&gt;&lt;script&gt;    //生成随机数    function rand(m,n){        return Math.ceil(Math.random() * (n-m+1)) + m-1;    }    //获取元素对象    const btn = document.querySelector('#btn');    //绑定单击事件    btn.addEventListener('click', function(){        // 定时器       setTimeout(() =&gt; {           //获取从1 - 100的一个随机数           let n = rand(1, 100);           //判断           if(n &lt;= 30){               alert(n+'恭喜恭喜, 奖品为 10万 RMB 劳斯莱斯优惠券');           }else{               alert(n+'再接再厉');           }       }, 1000);    })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <code>Promise 形式实现 </code></p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="container"&gt;    &lt;h2 class="page-header"&gt;Promise 初体验&lt;/h2&gt;    &lt;button class="btn btn-primary" id="btn"&gt;点击抽奖&lt;/button&gt;&lt;/div&gt;&lt;script&gt;      //生成随机数    function rand(m,n){        return Math.ceil(Math.random() * (n-m+1)) + m-1;    }      //获取元素对象    const btn = document.querySelector('#btn');      //绑定单击事件    btn.addEventListener('click', function(){          // 使用 new Promise(接收一个函数参数) 创建实例          // resolve 解决  函数类型的数据 --成功时调用          // reject  拒绝  函数类型的数据 --失败时调用          const p = new Promise((resolve, reject) =&gt; {              // promise对象可以包裹一个异步操作（直接将上方定时器拿过来）              setTimeout(() =&gt; {                  //30%  1-100  1 2 30                  //获取从1 - 100的一个随机数                  let n = rand(1, 100);                  //判断                  if(n &lt;= 30){                      // Promise除了可以封装异步操作之外，还能获取异步操作里成功和失败的结果值 即这里的n值                      // 可以将n值传递给resolve 和 reject函数                      // 那么下方的then方法里的两个回调都能拿到这个结果值作为参数                      resolve(n); //  调完resolve后会将 promise 对象 p 的状态设置为『成功』                  }else{                      reject(n); // 调完reject后会将 promise 对象 p 的状态设置为『失败』                  }              }, 1000);          });          console.log(p);          //调用 then（里边有两个回调函数参数） 方法 --- 每个promise对象上都有then方法          // 第一个回调是对象状态为成功时的回调，第二个是对象状态失败时的回调函数          // value 值          // reason 理由          p.then((value) =&gt; {              alert('恭喜恭喜, 奖品为 10万 RMB 劳斯莱斯优惠券, 您的中奖数字为 ' + value);          }, (reason) =&gt; {              alert('再接再厉, 您的号码为 ' + reason);          });      })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实践练习-Promise-封装-AJAX"><a href="#实践练习-Promise-封装-AJAX" class="headerlink" title="实践练习 Promise 封装 AJAX"></a>实践练习 Promise 封装 AJAX</h4><pre class="line-numbers language-none"><code class="language-none">// 需求点击按钮发送ajax请求拿到段子接口的数据&lt;div class="container"&gt;    &lt;h2 class="page-header"&gt;Promise 封装 AJAX 操作&lt;/h2&gt;    &lt;button class="btn btn-primary" id="btn"&gt;点击发送 AJAX&lt;/button&gt;&lt;/div&gt;&lt;script&gt;    //接口地址 https://api.apiopen.top/getJoke    //获取元素对象    const btn = document.querySelector('#btn');    // 给按钮绑定点击事件    btn.addEventListener('click', function(){        //首先创建 Promise 对象  p        const p = new Promise((resolve, reject) =&gt; {            //1.创建对象            const xhr = new XMLHttpRequest();            //2. 初始化 get请求 给后边的接口发送            xhr.open('GET', 'https://api.apiopen.top/getJoke');            //3. 发送            xhr.send();            //4. 处理响应结果            xhr.onreadystatechange = function(){                if(xhr.readyState === 4){                    //判断响应状态码 2xx                       if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300){                        //控制台输出响应体                        resolve(xhr.response);                    }else{                        //控制台输出响应状态码                        reject(xhr.status);                    }                }            }        });        //调用then方法        p.then(value=&gt;{            console.log(value);        }, reason=&gt;{            console.warn(reason);        });    });&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Promise的状态-『PromiseState』-的改变"><a href="#Promise的状态-『PromiseState』-的改变" class="headerlink" title="Promise的状态 『PromiseState』 的改变"></a>Promise的状态 『PromiseState』 的改变</h4><p>状态是Promise实例对象当中的一个属性，属性叫做 promiseState 有三种状态</p><ol><li>pending 值未决定的、初始化的默认值</li><li>pending 变为 resolved / fullfilled 即成功</li><li>pending 变为 rejected 即失败<br>说明: pending变化只有这 2 种情况, 且一个 promise 对象只能改变一次<br>无论变为成功还是失败, 都会有一个结果数据<br>成功的结果数据一般称为 value, 失败的结果数据一般称为 reason</li></ol><h4 id="Promise对象-『PromiseResult』的值"><a href="#Promise对象-『PromiseResult』的值" class="headerlink" title="Promise对象 『PromiseResult』的值"></a>Promise对象 『PromiseResult』的值</h4><p>保存着异步任务『成功/失败』的结果<br>以下函数能够修改这个属性的值：</p><ul><li>resolve</li><li>reject </li></ul><h4 id="Promise的基本流程"><a href="#Promise的基本流程" class="headerlink" title="Promise的基本流程"></a>Promise的基本流程</h4><p><img src="https://s1.ax1x.com/2022/04/16/LJc5NR.png" alt="LJcang.md.png"></p><p>首先通过new Promise 创造一个对象，在Promise内部封装异步操作。如果异步操作成功则调用resolve函数，resolve函数调用后会把Promise对象状态改为成功，成功在调用then方法时将调用的是第一个回调函数参数，返回一个新的promise对象<br>如果在Promise内部封装的异步操作失败，则调用reject 函数，reject函数调用后会把Promise对象状态改为失败，失败之后调用的是then方法中的第二个回调函数参数，并且返回一个新的Promise对象</p><h3 id="Promise的Api"><a href="#Promise的Api" class="headerlink" title="Promise的Api"></a>Promise的Api</h3><h4 id="执行器函数"><a href="#执行器函数" class="headerlink" title="执行器函数"></a><strong>执行器函数</strong></h4><p><strong>Promise 构造函数: Promise (excutor) {}</strong><br>//new实例化对象需要接收一个参数，参数是一个函数类型的参数（<strong>也称之为执行器函数</strong>），而且函数当中有两个形参也是函数类型参数resolve、reject，这俩函数是内部定义的，异步任务成功就会调用resolve函数，失败就会调用reject函数。<br>(1) executtor 函数: 执行器 (resolve, reject) =&gt; {}<br>(2) resolve 函数: 内部定义成功时我们调用的函数 value =&gt; {}<br>(3) reject 函数: 内部定义失败时我们调用的函数 reason =&gt; {}<br>说明: 执行器函数 executor 会在 Promise 内部立即同步调用,异步操作在执行器中执行</p><pre class="line-numbers language-none"><code class="language-none">let p = new Promise((resolv, reject) =&gt;     // resolve('ok');    console.log(111);})console.log(222);//结果控制台先打印111 ，后打印222。表明 p对象内部的代码是同步调用的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Promise-then方法"><a href="#Promise-then方法" class="headerlink" title="Promise.then方法"></a><strong>Promise.then方法</strong></h4><p><strong>Promise.prototype.then 方法: (onResolved, onRejected) =&gt; {}</strong><br>// 说明: then方法是用于指定回调的，传递两个参数，第一个参数是传递成功时的回调，第二个参数是传递失败时的回调。返回一个新的 promise 对象<br>(1) onResolved 函数: 成功的回调函数 (value) =&gt; {}<br>(2) onRejected 函数: 失败的回调函数 (reason) =&gt; {}</p><h4 id="Promise-catch方法"><a href="#Promise-catch方法" class="headerlink" title="Promise.catch方法"></a><strong>Promise.catch方法</strong></h4><p><strong>Promise.prototype.catch 方法: (onRejected) =&gt; {}</strong><br>// 说明: catch() 方法是 then()的语法糖, 相当于: then(undefined, onRejected)<strong>，即只能指定失败的回调。</strong></p><ol><li>onRejected 函数: 失败的回调函数 (reason) =&gt; {<pre class="line-numbers language-none"><code class="language-none">let p = new Promise((resolv, reject) =&gt;     // 修改Promise对象的状态    reject('error 失败了');})//  执行catch方法p.catch(reason =&gt; {    console.log(reason);})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Promise-resolve方法"><a href="#Promise-resolve方法" class="headerlink" title="Promise.resolve方法"></a><strong>Promise.resolve方法</strong></h4></li></ol><p><strong>Promise.resolve 方法: (value) =&gt; {}</strong><br>// 说明：它<strong>属于Promise函数对象</strong>，不是实例对象。接收一个参数，返回一个成功或失败的对象<br>// 作用：就是<strong>快速得到一个Promise对象</strong>，还能封装一个值，将这个值转化为Promise对象</p><ol><li>value: 成功的数据或 promise 对象</li></ol><pre class="line-numbers language-none"><code class="language-none">//如果传入的参数为 非Promise类型的对象, 则返回的结果为成功promise对象//如果传入的参数为 Promise 对象, 则参数的结果决定了 resolve 的结果let zimo = Promise.resolve("I Love You");console.log(zimo); // Promise&nbsp;{&lt;fulfilled&gt;: 'I Love You'let p1 = Promise.resolve(new Promise((resolve, reject) =&gt; {    resolve('OK');    // reject('Error');}));p1.then((value) =&gt; {    console.log(value); //ok},(reason)=&gt;{    console.log(reason);})console.log(p1);  // Promise&nbsp;{&lt;fulfilled&gt;: 'OK'}let p2 = Promise.resolve(p1);console.log(p2);  // Promise&nbsp;{&lt;fulfilled&gt;: 'OK'}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Promise-reject方法"><a href="#Promise-reject方法" class="headerlink" title="Promise.reject方法"></a><strong>Promise.reject方法</strong></h4><p><strong>Promise.reject 方法: (reason) =&gt; {}</strong><br>说明: <strong>快速返回一个失败的 promise 对象</strong><br>即便传入成功的Promise对象结果也是失败</p><ol><li>reason: 失败的原因<pre class="line-numbers language-none"><code class="language-none">let p1 = Promise.reject(520);p1.catch((reason) =&gt;{    console.log(reason);  // Promise&nbsp;{&lt;rejected&gt;: 520}})console.log(p1);          // 520let p2 = Promise.reject('iloveyou');let p3 = Promise.reject(new Promise((resolve, reject) =&gt; {    resolve('OK');}));console.log(p2);        // Promise&nbsp;{&lt;rejected&gt;: 'iloveyou'}console.log(p3);        //Promise&nbsp;{&lt;rejected&gt;: Promise}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="Promise-all-方法"><a href="#Promise-all-方法" class="headerlink" title="Promise.all 方法"></a>Promise.all 方法</h4><p><strong>Promise.all 方法: (promises) =&gt; {}</strong></p><ol><li>promises: 包含 n 个 promise 的数组<br>说明: <strong>接收一个参数，参数一般是Promise组成的数组</strong>，返回一个新的 promise, 只有所有的 promise 都成功才成功, 只要有一个失败了就直接失败。<pre class="line-numbers language-none"><code class="language-none">let p1 = new Promise((resolve, reject) =&gt; {    resolve('OK');})// let p2 = Promise.resolve('Success');let p2 = Promise.reject('Error');let p3 = Promise.resolve('Oh Yeah');const result = Promise.all([p1, p2, p3]);console.log(result); //[PromiseState]]: "rejected"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="Promise-race-方法"><a href="#Promise-race-方法" class="headerlink" title="Promise.race 方法"></a>Promise.race 方法</h4><p><strong>Promise.race 方法: (promises) =&gt; {}</strong></p><ol><li>promises: 包含 n 个 promise 的数组<br>说明: <strong>接收一个参数，参数一般是Promise组成的数组</strong>，返回一个新的 promise, 第一个改变状态的 promise对象就是最终的结果状态。<pre class="line-numbers language-none"><code class="language-none">let p1 = new Promise((resolve, reject) =&gt; {        setTimeout(() =&gt; {            resolve('OK');        }, 1000);    })let p3 = Promise.resolve('Oh Yeah');let p2 = Promise.resolve('Success');//调用const result = Promise.race([p1, p3, p2]); console.log(result);  // [[PromiseState]]: "fulfilled"  // [[PromiseResult]]: "Oh Yeah"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="Promise的几个关键问题"><a href="#Promise的几个关键问题" class="headerlink" title="Promise的几个关键问题"></a>Promise的几个关键问题</h2><h3 id="如何改变-promise-的状态"><a href="#如何改变-promise-的状态" class="headerlink" title="如何改变 promise 的状态?"></a>如何改变 promise 的状态?</h3><ol><li><strong>第一种方式 调用 resolve 函数</strong>: 如果当前Promise对象是 pending状态就会变为fulfilled(resolve)</li><li><strong>第二种方式 调用 reject 函数</strong>: 如果当前Promise对象是 pending状态就会变为 rejected</li><li><strong>第三种方式 抛出异常</strong>: 如果当前是 pending 就会变为 rejected<pre class="line-numbers language-none"><code class="language-none">let p = new Promise((resolve, reject) =&gt; { //初始化状态是pending    //第一种方式  调用 resolve 函数    // resolve('ok'); // pending   =&gt; fulfilled (resolved)    //第二种方式  调用 reject 函数    // reject("error");// pending  =&gt;  rejected     //3. 抛出错误    throw '出问题了'; //pending  =&gt;  rejected });console.log(p);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="一个-promise-指定多个成功-失败回调函数-都会调用吗"><a href="#一个-promise-指定多个成功-失败回调函数-都会调用吗" class="headerlink" title="一个 promise 指定多个成功/失败回调函数, 都会调用吗?"></a>一个 promise 指定多个成功/失败回调函数, 都会调用吗?</h3><p>简单说问题是：用then方法为一个Promise对象去指定多个回调，这些回调是否都会执行？<br><strong>答案：当 promise 改变为对应状态时都会调用</strong></p><pre class="line-numbers language-none"><code class="language-none">let p = new Promise((resolve, reject) =&gt; {    resolve('OK');});///指定回调 - 1p.then(value =&gt; {    console.log(value);});//指定回调 - 2p.then(value =&gt; {    alert(value);}); <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="改变-promise-状态和指定回调函数谁先谁后"><a href="#改变-promise-状态和指定回调函数谁先谁后" class="headerlink" title="改变 promise 状态和指定回调函数谁先谁后?"></a>改变 promise 状态和指定回调函数谁先谁后?</h3><p>答案： 都有可能 <strong>正常情况下是先指定回调再改变状态, 但也可以先改状态再指定回调</strong><br><strong>当这个执行器函数是异步任务时候时then方法先执行，但then方法需要在Promise对象改变状态后才执行</strong></p><pre class="line-numbers language-none"><code class="language-none">let p = new Promise((resolve, reject) =&gt; {    setTimeout(() =&gt; {        resolve('OK');    }, 1000); //当这个执行器函数是异步任务时候时then方法先执行，但then方法需要在Promi对象改变状态后才执行});p.then(value =&gt; {    console.log(value);},reason=&gt;{    })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>如何先改状态再指定回调?<br>① 在执行器中直接调用 resolve()/reject()<br>② 延迟更长时间才调用 then()</li><li>什么时候才能得到数据?<br>① 如果先指定的回调, 那当状态发生改变时, 回调函数就会调用, 得到数据<br>② 如果先改变的状态, 那当指定回调时, 回调函数就会调用, 得到数据</li></ol><h3 id="promise-then-返回的新-promise-的结果状态由什么决定"><a href="#promise-then-返回的新-promise-的结果状态由什么决定" class="headerlink" title="promise.then()返回的新 promise 的结果状态由什么决定?"></a>promise.then()返回的新 promise 的结果状态由什么决定?</h3><p>(1) 简单表达: 由 then()指定的回调函数执行的结果决定<br>(2) 详细表达:<br>① 如果抛出异常, 新 promise 变为 rejected, reason 为抛出的异常<br>② 如果返回的是非 promise 的任意值, 新 promise 变为 resolved, value 为返回的值<br>③ 如果返回的是另一个新 promise, 此 promise 的结果就会成为新 promise 的结果</p><h3 id="promise-如何串连多个操作任务"><a href="#promise-如何串连多个操作任务" class="headerlink" title="promise 如何串连多个操作任务?"></a>promise 如何串连多个操作任务?</h3><p>(1) promise 的 then()返回一个新的 promise, 即可以在后边接着调用then()方法，可以看成 then()方法的链式调用<br>(2) 通过 then 的链式调用串连多个同步/异步任务</p><pre class="line-numbers language-none"><code class="language-none">let p = new Promise((resolve, reject) =&gt; {    setTimeout(() =&gt; {        resolve('OK');    }, 1000); //异步任务});p.then(value =&gt; {                  return new Promise((resolve, reject) =&gt; {        resolve("success");    });}).then(value =&gt; {            //这里的Promise状态由他指定的回调函数的返回值绝定，此处回调函数没写返回值即为Undefined 所以这里的then方法返回结果就是一个成功的Promise且成功的结果就是回调函数返回的结果Undefined，因为成功了所以后边的then方法也会执行第一个回调函数，并且输出前边成功的结果所以依然是Undefined    console.log(value);       // success}).then(value =&gt; {          console.log(value);       //undefined})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="promise-异常传透"><a href="#promise-异常传透" class="headerlink" title="promise 异常传透?"></a>promise 异常传透?</h3><p>(1) 当使用 promise 的 then 链式调用时, 可以在最后指定失败的回调,<br>(2) 前面任何操作出了异常, 都会传到最后失败的回调中处理<br>例如：下方启动了一个Promise，后续用then方法又进行了几个其他的任务，这时候只需要在最后的位置去指定失败的回调就可以。</p><pre class="line-numbers language-none"><code class="language-none">let p = new Promise((resolve, reject) =&gt; {    setTimeout(() =&gt; {        resolve('OK');        // reject('Err');    }, 1000);});p.then(value =&gt; {    // console.log(111);    throw '失败啦!';}).then(value =&gt; {    console.log(222);}).then(value =&gt; {    console.log(333);}).catch(reason =&gt; {    console.warn(reason); //失败啦!});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中断-promise-链"><a href="#中断-promise-链" class="headerlink" title="中断 promise 链?"></a>中断 promise 链?</h3><p>(1) 当使用 promise 的 then 链式调用时, 在中间中断, 不再调用后面的回调函数<br>(2) 办法: 在回调函数中返回一个 pendding 状态的 promise 对象</p><pre class="line-numbers language-none"><code class="language-none">let p = new Promise((resolve, reject) =&gt; {    setTimeout(() =&gt; {        resolve('OK');    }, 1000);});p.then(value =&gt; {    console.log(111);           // 111    //有且只有一个方式 返回一个pending状态的Promise对象    return new Promise(() =&gt; {});  //下方的then方法因为没有发现前边的Promise对象状态发生改变所以就不执行了}).then(value =&gt; {    console.log(222);}).then(value =&gt; {    console.log(333);}).catch(reason =&gt; {    console.warn(reason);});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="自定义（手写）Promise-后续学习"><a href="#自定义（手写）Promise-后续学习" class="headerlink" title="自定义（手写）Promise(后续学习)"></a>自定义（手写）Promise(后续学习)</h2><h3 id="定义整体结构"><a href="#定义整体结构" class="headerlink" title="定义整体结构"></a>定义整体结构</h3><h3 id="Promise-构造函数的实现"><a href="#Promise-构造函数的实现" class="headerlink" title="Promise 构造函数的实现"></a>Promise 构造函数的实现</h3><h3 id="promise-then-catch-的实现"><a href="#promise-then-catch-的实现" class="headerlink" title="promise.then()/catch()的实现"></a>promise.then()/catch()的实现</h3><h3 id="Promise-resolve-reject-的实现"><a href="#Promise-resolve-reject-的实现" class="headerlink" title="Promise.resolve()/reject()的实现"></a>Promise.resolve()/reject()的实现</h3><h3 id="Promise-all-race-的实现"><a href="#Promise-all-race-的实现" class="headerlink" title="Promise.all/race()的实现"></a>Promise.all/race()的实现</h3><h3 id="Promise-resolveDelay-rejectDelay-的实现"><a href="#Promise-resolveDelay-rejectDelay-的实现" class="headerlink" title="Promise.resolveDelay()/rejectDelay()的实现"></a>Promise.resolveDelay()/rejectDelay()的实现</h3><h3 id="ES5-function-完整版本"><a href="#ES5-function-完整版本" class="headerlink" title="ES5 function 完整版本"></a>ES5 function 完整版本</h3><h3 id="ES6-class-完整版本"><a href="#ES6-class-完整版本" class="headerlink" title="ES6 class 完整版本"></a>ES6 class 完整版本</h3><hr><h2 id="async-与-await"><a href="#async-与-await" class="headerlink" title="async 与 await"></a>async 与 await</h2><h3 id="async-函数"><a href="#async-函数" class="headerlink" title="async 函数"></a>async 函数</h3><ol><li>函数的返回结果为 promise 对象</li><li>promise 对象的结果由 async 函数执行的返回值决定<pre class="line-numbers language-none"><code class="language-none">//和then方法返回规则一摸一样async function main(){    //1. 如果返回值是一个非Promise类型的数据    // return 521;    //2. 如果返回的是一个Promise对象    // return new Promise((resolve, reject) =&gt; {    //     // resolve('OK');    //     reject('Error');    // });    //3. 抛出异常    throw "Oh NO"; //[PromiseState]]: "rejected" [PromiseResult]]: "Oh NO"}let result = main();console.log(result);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="await-表达式"><a href="#await-表达式" class="headerlink" title="await 表达式"></a>await 表达式</h3><ol><li>await 右侧的表达式一般为 promise 对象, 但也可以是其它的值</li><li>如果表达式是 promise 对象, await 返回的是 promise 成功的值</li><li>如果表达式是其它值, 直接将此值作为 await 的返回值</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>await 必须写在 async 函数中, 但 async 函数中可以没有 await</li><li>如果 await 的 promise 失败了, 就会抛出异常, 需要通过 try…catch 捕获处理</li></ol><pre class="line-numbers language-none"><code class="language-none">async function lala(){    let p = new Promise((resolve, reject) =&gt; {        // resolve('OK');        reject('Error');    })    //1. 右侧为promise的情况 await 返回的是 promise 成功的值即 'ok'    // let res = await p;    // console.log(res);        //ok    //2. 右侧为其他类型的数据    //let res2 = await 20;    //console.log(res2);        //20    //3. 如果promise是失败的状态    try{        let res3 = await p;     }catch(e){        console.log(e);          //抛出一个错误 使用try...catch    }}lala()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="async与await结合"><a href="#async与await结合" class="headerlink" title="async与await结合"></a>async与await结合</h3><pre class="line-numbers language-none"><code class="language-none">/** * 读取同级目录resource文件夹下 有1.html  2.html 3.html 的文件内容 想去读取到 */const fs = require('fs');const util = require('util');// util里有个方法可以将api转换成一个Promise形态的函数const mineReadFile = util.promisify(fs.readFile);//回调函数的方式// fs.readFile('./resource/1.html', (err, data1) =&gt; {//     if(err) throw err;//     fs.readFile('./resource/2.html', (err, data2) =&gt; {//         if(err) throw err;//         fs.readFile('./resource/3.html', (err, data3) =&gt; {//             if(err) throw err;//             console.log(data1 + data2 + data3); //读取到文件信息//         });//     });// });//async 与 await方式 就用不到回调函数// 1.首先写一个async函数async function main(){    try{        //2.读取第一个文件的内容        let data1 = await mineReadFile('./resource/1x.html');        let data2 = await mineReadFile('./resource/2.html');        let data3 = await mineReadFile('./resource/3.html');        console.log(data1 + data2 + data3);    }catch(e){        // console.log(e);   // Error: ENOENT: no such file or directory......        console.log(e.code); // ENOENT    }}main();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="async与await结合发送AJAX"><a href="#async与await结合发送AJAX" class="headerlink" title="async与await结合发送AJAX"></a>async与await结合发送AJAX</h3><pre class="line-numbers language-none"><code class="language-none">&lt;button id="btn"&gt;点击获取段子&lt;/button&gt;&lt;script&gt;    //一般使用axios封装好的    function sendAJAX(url){        return new Promise((resolve, reject) =&gt; {            const xhr = new XMLHttpRequest();            xhr.responseType = 'json';            xhr.open("GET", url);            xhr.send();            //处理结果            xhr.onreadystatechange = function(){                if(xhr.readyState === 4){                    //判断成功                    if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300){                        //成功的结果                        resolve(xhr.response);                    }else{                        reject(xhr.status);                    }                }            }        });    }    //段子接口地址 https://api.apiopen.top/getJoke    let btn = document.querySelector('#btn');    btn.addEventListener('click',async function(){        //获取段子信息          let duanzi = await sendAJAX('https://api.apiopen.top/getJoke'); //发送ajax请求的函数返回的结果是一个Promise对象        console.log(duanzi);    });&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;认识-Promise&quot;&gt;&lt;a href=&quot;#认识-Promise&quot; class=&quot;headerlink&quot; title=&quot;认识 Promise&quot;&gt;&lt;/a&gt;认识 Promise&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;什么是-Promise&quot;&gt;&lt;a href=&quot;#什</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Promise" scheme="https://wuzimo233.github.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>Ajax学习</title>
    <link href="https://wuzimo233.github.io/posts/2.html"/>
    <id>https://wuzimo233.github.io/posts/2.html</id>
    <published>2022-04-14T02:22:11.000Z</published>
    <updated>2022-04-15T17:25:48.460Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认识-Ajax"><a href="#认识-Ajax" class="headerlink" title="认识 Ajax"></a>认识 Ajax</h2><h3 id="什么是-Ajax"><a href="#什么是-Ajax" class="headerlink" title="什么是 Ajax"></a>什么是 Ajax</h3><blockquote><p>Ajax 是一种异步请求数据的 web 开发技术，对于改善用户的体验和页面性能很有帮助。<br>刚好回顾下什么是异步同步，大部分的请求是同步的，就是说我必须等待后台请求给我返回结果了才能往下操作。通俗讲的话，我要去烧水、水热了后去洗碗、扫地。同步来做的话就是依次等待水烧热后我再去洗碗，洗了碗后我再去扫地。异步做的话我把水壶接通电源（发送请求）、接着水壶它烧它的，我去扫地了，可能扫完地后水热了，再用水壶的水来洗碗。<br>还可以说我今天一天没有逛朋友圈，晚上终于有空翻朋友圈，好不容易翻到了上午的朋友圈，突然觉得某个动态有意思我想评论一下或者点赞，如果页面上有刷新，那我点赞后直接就刷新了朋友圈，我又得从新翻很久才能回到刚才的动态页面。如果是不会刷新，即点赞后马上就显示了点赞记录。这就是无刷新技术通过Dom操作来实现的效果。所以Ajax通常会结合Dom一起操作。<br>简单地说，在不需要重新刷新整个页面的情况下，Ajax 通过异步请求加载后台数据，能在网页的局部更新数据。<br>常见运用场景有表单验证是否登入成功、百度搜索下拉框提示和快递单号查询等等。<br><strong>Ajax 的目的是提高用户体验，较少网络数据的传输量。</strong>同时，由于 AJAX 请求获取的是数据而不是 HTML 文档，因此它也节省了网络带宽，让互联网用户的网络冲浪体验变得更加顺畅。<br><strong>AJAX=Asynchronous JavaScript and XML(异步的 JavaScript 和 XML)</strong><br>Ajax 不是一门编程语言，而是一种用于创建更好更快以及交互性更强的 Web 应用程序的技术</p></blockquote><ul><li>传统的网页(即不用 ajax 技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。</li><li>使用 ajax 技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</li><li>使用 Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的 Web 用户界面。</li><li>增加 B/S 体验性 （B/S 未来的主流，持续增长）</li></ul><hr><h3 id="Ajax-原理是什么"><a href="#Ajax-原理是什么" class="headerlink" title="Ajax 原理是什么"></a>Ajax 原理是什么</h3><p>在解释 Ajax 原理之前，我们不妨先举个 “领导想找小李汇报一下工作” 例子，领导想找小李问点事，就委托秘书去叫小李，自己就接着做其他事情，直到秘书告诉他小李已经到了，最后小李跟领导汇报工作。<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/18/167bd019240a457b~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp" alt="图源网络侵删"></p><p>Ajax 请求数据流程与“领导想找小李汇报一下工作”类似。其中最核心的依赖是浏览器提供的 XMLHttpRequest 对象，它扮演的角色相当于秘书，使得浏览器可以发出 HTTP 请求与接收 HTTP 响应。浏览器接着做其他事情，等收到 XHR 返回来的数据再渲染页面。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/18/167bd023855c0bf7~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp" alt="图源网络侵删"></p><p><strong>理解了 Ajax 的工作原理后，接下来我们探讨下如何使用 Ajax</strong></p><hr><h3 id="利用-AJAX-可以做："><a href="#利用-AJAX-可以做：" class="headerlink" title="利用 AJAX 可以做："></a>利用 AJAX 可以做：</h3><p>注册时，输入用户名自动检测用户已经存在<br>登陆时，提示用户密码错误<br>删除数据时，将行 ID 发送到后台，后台在数据库中删除，数据库删除成功后，在页面 DOM 中将数据行也删除<br>我们可以使用前端的一个标签来伪造一个 ajax 的样子。iframe 标签</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- iframe 元素会创建包含另外一个文档的内联框架（即行内框架） --&gt;    &lt;div&gt;        &lt;p&gt;请输入要加载的地址：&lt;span id="currentTime"&gt;&lt;/span&gt;&lt;/p&gt;        &lt;p&gt;            &lt;input id="url" type="text" value="https://www.baidu.com/" /&gt;            &lt;input type="button" value="提交" onclick="LoadPage()"&gt;        &lt;/p&gt;    &lt;/div&gt;    &lt;div&gt;        &lt;h3&gt;加载页面位置：&lt;/h3&gt;        &lt;iframe id="iframePosition" style="width: 100%;height: 500px;"&gt;&lt;/iframe&gt;    &lt;/div&gt;    &lt;script type="text/javascript"&gt;        window.onload = function () {            var myDate = new Date(); //获取当前时间 并传递给p标签里的span            document.getElementById('currentTime').innerText = myDate.getTime();        };        function LoadPage() {            var targetUrl = document.getElementById('url').value; //获取input框的网址            console.log(targetUrl);            document.getElementById("iframePosition").src = targetUrl; //把网址传给内联标签iframe标签的src属性        }    &lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这里简单的制造了一个在当前页面打开其他页面不刷新整体页面的场景，ajax 可以实现更多更高级的类似功能</strong></p><hr><h2 id="Ajax-的使用"><a href="#Ajax-的使用" class="headerlink" title="Ajax 的使用"></a>Ajax 的使用</h2><h3 id="原生Ajax-的使用"><a href="#原生Ajax-的使用" class="headerlink" title="原生Ajax 的使用"></a>原生Ajax 的使用</h3><p><strong>1.创建 Ajax 核心对象 XMLHttpRequest(记得考虑兼容性)</strong></p><pre class="line-numbers language-none"><code class="language-none">var xhr=null;if (window.XMLHttpRequest) {    // 兼容 IE7+, Firefox, Chrome, Opera, Safari    xhr=new XMLHttpRequest();} else {  // 兼容 IE6, IE5  xhr=new ActiveXObject("Microsoft.XMLHTTP");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.向服务器发送请求</strong></p><pre class="line-numbers language-none"><code class="language-none">xhr.open(method,url,async);  send(string);//post请求时才使用字符串参数，否则不用带参数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>。。。太麻烦了 后期再学原生吧</p><h3 id="jQuery-ajax-的使用"><a href="#jQuery-ajax-的使用" class="headerlink" title="jQuery.ajax 的使用"></a>jQuery.ajax 的使用</h3><p><strong>浏览器中提供的 XMLHttpRequest 用法比较复杂，所以 jQuery 对 XMLHttpRequest 进行了封装，提供了一系列 Ajax 相关的函数，极大地降低了 Ajax 的使用难度。</strong><br><strong>jQuery Ajax 本质就是 XMLHttpRequest，对他进行了封装，方便调用！</strong><br>纯 JS 原生实现 Ajax 暂时不去了解了，直接使用 jquery 提供的，方便学习和使用，避免重复造轮子，有空再去了解下 JS 原生 的XMLHttpRequest把···<br>Ajax 的核心是<strong>XMLHttpRequest</strong>对象(XHR)。XHR 为向服务器发送请求和解析服务器响应提供了接口，<strong>能够以异步方式从服务器获取新数据。</strong></p><p>使用 jQuery 需要先从官网下载jQuery.js并导入到文件<br>就可以使用$符号，它是jquery中代表jquery对象的引用,“jQuery”是核心对象。通过该对象可以获取jQuery对象，调用jQuery提供的方法等。$ &lt;==&gt; jQuery</p><p><strong>通过 jQuery AJAX 方法，能够从远程服务器上请求文本、HTML、XML 或 JSON – 同时能够把这些外部数据直接载入网页的被选元素中。</strong></p><blockquote><p>jQuery 中发起 Ajax 请求最常用的三个方法如下：<br>$.get()<br>$.post()<br>$.ajax()</p></blockquote><h4 id="get-函数的语法"><a href="#get-函数的语法" class="headerlink" title="$.get()函数的语法"></a>$.get()函数的语法</h4><ul><li><p>jQuery 中 $.get() 函数的功能单一，专门用来发起 get 请求</p></li><li><p><strong>将服务器上的资源请求到客户端来进行使用。</strong></p><pre class="line-numbers language-none"><code class="language-none">$.get(url, [data], [callback])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="center">参数名</th><th align="center">参数类型</th><th align="center">是否必选</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">url</td><td align="center">string</td><td align="center">是</td><td align="center">要请求的资源地址</td></tr><tr><td align="center">data</td><td align="center">object</td><td align="center">否</td><td align="center">请求资源期间要携带的参数</td></tr><tr><td align="center">callback</td><td align="center">function</td><td align="center">否</td><td align="center">请求成功时的回调函数</td></tr></tbody></table></li><li><p>$.get()发起不带参数的请求<br>使用 $.get() 函数发起不带参数的请求时，直接提供请求的 URL 地址和请求成功之后的回调函数即可，示例代码如下：</p><pre class="line-numbers language-none"><code class="language-none">$.get('http://www.liulongbin.top:3006/api/getbooks', function(res) {    console.log(res) // 这里的 res 是服务器返回的数据})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>$.get()发起带参数的请求<br>使用 $.get() 函数发起带参数的请求时，示例代码如下：</p><pre class="line-numbers language-none"><code class="language-none">$.get('http://www.liulongbin.top:3006/api/getbooks', { id: 1 }, function(res) {    console.log(res)})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="post-函数的语法"><a href="#post-函数的语法" class="headerlink" title="$.post()函数的语法"></a>$.post()函数的语法</h4><ul><li>jQuery 中 $.post() 函数的功能单一，专门用来发起 post 请求，从而<strong>向服务器提交数据。</strong></li></ul><p>$.post() 函数的语法如下：</p><pre class="line-numbers language-none"><code class="language-none">$.post(url, [data], [callback])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="center">参数名</th><th align="center">参数类型</th><th align="center">是否必选</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">url</td><td align="center">string</td><td align="center">是</td><td align="center">提交数据的地址</td></tr><tr><td align="center">data</td><td align="center">object</td><td align="center">否</td><td align="center">要提交的数据</td></tr><tr><td align="center">callback</td><td align="center">function</td><td align="center">否</td><td align="center">数据提交成功时的回调函数</td></tr></tbody></table><p>使用 $post() 向服务器提交数据的示例代码如下：</p><pre class="line-numbers language-none"><code class="language-none">$.post(   'http://www.liulongbin.top:3006/api/addbook', // 请求的URL地址   { bookname: '水浒传', author: '施耐庵', publisher: '上海图书出版社' }, // 提交的数据   function(res) { // 回调函数      console.log(res)   })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ajax-函数的语法"><a href="#ajax-函数的语法" class="headerlink" title="$.ajax()函数的语法"></a><strong>$.ajax()函数的语法</strong></h4><ul><li>相比于$.get()和$.post() 函数，jQuery 中提供的 $.ajax() 函数，是一个功能比较综合的函数</li><li>它允许我们对 Ajax 请求进行更详细的配置</li></ul><p>$.ajax() 函数的基本语法如下：</p><pre class="line-numbers language-none"><code class="language-none">$.ajax({   type: '', // 请求的方式，例如 GET 或 POST   url: '',  // 请求的 URL 地址   data: { },// 这次请求要携带的数据   success: function(res) { } // 请求成功之后的回调函数})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用$.ajax()发起GET请求</strong><br>使用 $.ajax() 发起 GET 请求时，只需要将 type 属性的值设置为 ‘GET’ 即可：</p><pre class="line-numbers language-none"><code class="language-none">$.ajax({   type: 'GET', // 请求的方式   url: 'http://www.liulongbin.top:3006/api/getbooks',  // 请求的 URL 地址   data: { id: 1 },// 这次请求要携带的数据   success: function(res) { // 请求成功之后的回调函数       console.log(res)   }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用$.ajax()发起POST请求</strong><br>使用 $.ajax() 发起 POST 请求时，只需要将 type 属性的值设置为 ‘POST’ 即可：</p><pre class="line-numbers language-none"><code class="language-none">$.ajax({   type: 'POST', // 请求的方式   url: 'http://www.liulongbin.top:3006/api/addbook',  // 请求的 URL 地址   data: { // 要提交给服务器的数据      bookname:&nbsp;'水浒传',      author:&nbsp;'施耐庵',      publisher:&nbsp;'上海图书出版社'    },   success: function(res) { // 请求成功之后的回调函数       console.log(res)   }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>jQuery.ajax(…)<br>       部分参数：<br>              url：请求地址（待载入页面的URL地址）<br>             data：要发送的数据（待发送给后台的值key/value参数）<br>          success：载入成功之后执行的回调函数(全局)<br>             type：请求方式，GET、POST（1.9.0之后用method）<br>          // 下边的了解下不常用<br>          headers：请求头<br>      contentType：即将发送信息至服务器的内容编码类型(默认: “application/x-www-form-urlencoded; charset=UTF-8”)<br>            async：是否异步<br>          timeout：设置请求超时时间（毫秒）<br>       beforeSend：发送请求前执行的函数(全局)<br>         complete：完成之后执行的回调函数(全局)<br>            error：失败之后执行的回调函数(全局)<br>          accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型<br>         dataType：将服务器端返回的数据转换成指定类型<br>            “xml”: 将服务器端返回的内容转换成xml格式<br>           “text”: 将服务器端返回的内容转换成普通文本格式<br>           “html”: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。<br>         “script”: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式<br>           “json”: 将服务器端返回的内容转换成相应的JavaScript对象<br>          “jsonp”: JSONP 格式使用 JSONP 形式调用函数时，如 “myurl?callback=?” jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</p></blockquote><hr><h2 id="接口相关知识"><a href="#接口相关知识" class="headerlink" title="接口相关知识"></a>接口相关知识</h2><ul><li><h3 id="接口的概念"><a href="#接口的概念" class="headerlink" title="接口的概念"></a>接口的概念</h3><blockquote><ul><li>使用 Ajax 请求数据时，被请求的 URL 地址，就叫做数据接口（简称接口）。同时，每个接口必须有请求方式。<br>例如：<br><a href="http://www.liulongbin.top:3006/api/getbooks">www.liulongbin.top:3006/api/getbooks</a> 获取图书列表的接口(GET请求)<br><a href="http://www.liulongbin.top:3006/api/addbook">www.liulongbin.top:3006/api/addbook</a> 添加图书的接口（POST请求）</li></ul></blockquote></li><li><h3 id="分析接口的请求过程"><a href="#分析接口的请求过程" class="headerlink" title="分析接口的请求过程"></a>分析接口的请求过程</h3></li></ul><p>通过GET方式请求接口的过程<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b198025f2e648b4b58d2df1d8673536~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="图源网络侵删"></p><p>通过POST方式请求接口的过程<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/20019a7779564e18a12c0c66668f9422~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="图源网络侵删"></p><h2 id="Ajax的优缺点"><a href="#Ajax的优缺点" class="headerlink" title="Ajax的优缺点"></a>Ajax的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>1.无刷新更新数据。<br>AJAX最大优点就是能在不刷新整个页面的前提下与服务器通信维护数据。这使得Web应用程序更为迅捷地响应用户交互，并避免了在网络上发送那些没有改变的信息，减少用户等待时间，带来非常好的用户体验。<br>2.异步与服务器通信。<br>AJAX使用异步方式与服务器通信，不需要打断用户的操作，具有更加迅速的响应能力。优化了Browser和Server之间的沟通，减少不必要的数据传输、时间及降低网络上数据流量。<br>3.前端和后端负载平衡。<br>AJAX可以把以前一些服务器负担的工作转嫁到客户端，利用客户端闲置的能力来处理，减轻服务器和带宽的负担，节约空间和宽带租用成本。并且减轻服务器的负担，AJAX的原则是“按需取数据”，可以最大程度的减少冗余请求和响应对服务器造成的负担，提升站点性能。<br>4.基于标准被广泛支持。<br>AJAX基于标准化的并被广泛支持的技术，不需要下载浏览器插件或者小程序，但需要客户允许JavaScript在浏览器上执行。随着Ajax的成熟，一些简化Ajax使用方法的程序库也相继问世。同样，也出现了另一种辅助程序设计的技术，为那些不支持JavaScript的用户提供替代功能。<br> 5.界面与应用分离。<br>Ajax使WEB中的界面与应用分离（也可以说是数据与呈现分离），有利于分工合作、减少非技术人员对页面的修改造成的WEB应用程序错误、提高效率、也更加适用于现在的发布系统。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>1.AjAX干掉了Back和加入收藏书签功能，即对浏览器机制的破坏。<br>2.AJAX的安全问题。<br>3.因为网络延迟需要给用户提供必要提示</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;认识-Ajax&quot;&gt;&lt;a href=&quot;#认识-Ajax&quot; class=&quot;headerlink&quot; title=&quot;认识 Ajax&quot;&gt;&lt;/a&gt;认识 Ajax&lt;/h2&gt;&lt;h3 id=&quot;什么是-Ajax&quot;&gt;&lt;a href=&quot;#什么是-Ajax&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Ajax" scheme="https://wuzimo233.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>博客与博主</title>
    <link href="https://wuzimo233.github.io/posts/1.html"/>
    <id>https://wuzimo233.github.io/posts/1.html</id>
    <published>2022-04-12T17:17:00.000Z</published>
    <updated>2022-04-15T06:14:16.957Z</updated>
    
    <content type="html"><![CDATA[<p>相遇皆是缘分</p><h3 id="为什么建博客？"><a href="#为什么建博客？" class="headerlink" title="为什么建博客？"></a>为什么建博客？</h3><p>因为学习一些知识总是学了就忘，或者敲了不复习，记得手写笔记也根本不爱翻动。花了大半天时间搭建个博客来记录未来学到的知识，勤能补拙吧~</p><h3 id="展望博客"><a href="#展望博客" class="headerlink" title="展望博客"></a>展望博客</h3><p>我会整理一些个人所学的知识（前端方向和一些其它数码、科技、摄影先暂时想这么多）或生活方面有兴趣的事发到博客上。</p><h3 id="关于博主"><a href="#关于博主" class="headerlink" title="关于博主"></a>关于博主</h3><p>普普通通的社畜。。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> 勇敢就是，在你还没开始的时候就知道自己会输，但依然要去做，而且无论如何都要把它坚持到底。你很少能赢，但有时也会。​ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>go on！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;相遇皆是缘分&lt;/p&gt;
&lt;h3 id=&quot;为什么建博客？&quot;&gt;&lt;a href=&quot;#为什么建博客？&quot; class=&quot;headerlink&quot; title=&quot;为什么建博客？&quot;&gt;&lt;/a&gt;为什么建博客？&lt;/h3&gt;&lt;p&gt;因为学习一些知识总是学了就忘，或者敲了不复习，记得手写笔记也根本不爱翻动</summary>
      
    
    
    
    <category term="感想" scheme="https://wuzimo233.github.io/categories/%E6%84%9F%E6%83%B3/"/>
    
    
    <category term="生活" scheme="https://wuzimo233.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
