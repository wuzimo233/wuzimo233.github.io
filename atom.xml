<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zimo</title>
  
  <subtitle>zimoの博客</subtitle>
  <link href="https://wuzimo233.github.io/atom.xml" rel="self"/>
  
  <link href="https://wuzimo233.github.io/"/>
  <updated>2022-06-16T03:08:49.278Z</updated>
  <id>https://wuzimo233.github.io/</id>
  
  <author>
    <name>Zimo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Axios新版学习大纲</title>
    <link href="https://wuzimo233.github.io/posts/14.html"/>
    <id>https://wuzimo233.github.io/posts/14.html</id>
    <published>2022-06-16T03:12:00.000Z</published>
    <updated>2022-06-16T03:08:49.278Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Axios入门"><a href="#Axios入门" class="headerlink" title="Axios入门"></a>Axios入门</h1><h2 id="HTTP相关"><a href="#HTTP相关" class="headerlink" title="HTTP相关"></a>HTTP相关</h2><h3 id="MDN文档"><a href="#MDN文档" class="headerlink" title="MDN文档"></a>MDN文档</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview</a></p><h3 id="HTTP请求报文"><a href="#HTTP请求报文" class="headerlink" title="HTTP请求报文"></a>HTTP请求报文</h3><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p>格式: method url</p><p>例如:  GET/product_detail?id=2  或  POST / login</p><h4 id="请求头（一般有多个请求头）"><a href="#请求头（一般有多个请求头）" class="headerlink" title="请求头（一般有多个请求头）"></a>请求头（一般有多个请求头）</h4><p>Host: <a href="http://www.baidu.com/">www.baidu.com</a></p><p>Cookie: BAIDUID=AD3B0FA706E;BIDUPSID=AD3B0FA706;</p><p>Content-Type: applicartion/x-www-from-urlencoded 或者 application/json</p><h4 id="请求体-get没有"><a href="#请求体-get没有" class="headerlink" title="请求体 (get没有)"></a>请求体 (get没有)</h4><p>username=tom&amp;pwd=123</p><p>{“username”:”tom”,”pwd”:123}</p><h3 id="HTTP响应报文"><a href="#HTTP响应报文" class="headerlink" title="HTTP响应报文"></a>HTTP响应报文</h3><h4 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h4><p>格式： status status Text</p><p>例如： 200 OK  或 404 Not Found</p><h4 id="响应头（一般有多个）"><a href="#响应头（一般有多个）" class="headerlink" title="响应头（一般有多个）"></a>响应头（一般有多个）</h4><p>Content-Type：text/html;charset=utf-8</p><p>Set-Cookie:BD_CK_SAM=1;PATH=/</p><h4 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h4><p>html/json/js/css/图片</p><h3 id="常见的状态码"><a href="#常见的状态码" class="headerlink" title="常见的状态码"></a>常见的状态码</h3><p>200    OK                                     请求成功.。一般用于GET/POST请求</p><p>201    Created                             已创建。成功请求并创建了新的资源</p><p>401    Unauthorized                   未授权/请求用户的身份证</p><p>404    Not Found                         服务器无法根据客户端请求找到资源</p><p>500    internal Serve Error         服务器内部错误，无法完成请求</p><h3 id="请求方式与请求参数"><a href="#请求方式与请求参数" class="headerlink" title="请求方式与请求参数"></a>请求方式与请求参数</h3><h4 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h4><p>GET（索取）：从服务端读取数据               —– 查（R –Retrieve）</p><p>POST（交差）：向服务端添加新数据         —– 增（C –Create）    </p><p>PUT：更新服务端已经存在的数据               —— 改（U –Update）</p><p>DELETE：删除服务器端数据                        —— 删（D –Delete）</p><h4 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h4><h5 id="query参数（查询字符串参数）"><a href="#query参数（查询字符串参数）" class="headerlink" title="query参数（查询字符串参数）"></a>query参数（查询字符串参数）</h5><ul><li>参数包含在请求地址中，格式为:/xxxx?name=tom&amp;age=18</li><li>敏感数据不要用query参数，因为参数是地址的一部分，比较危险</li><li>备注：query参数又称为查询字符串参数，编码方式为urlencoded</li></ul><h5 id="params参数"><a href="#params参数" class="headerlink" title="params参数"></a>params参数</h5><ul><li><p>参数包含在请求地址中，格式如下：</p><p><a href="http://localhost:3000/add_person/tom/18">http://localhost:3000/add_person/tom/18</a></p></li><li><p>敏感数据不要用params参数，因为参数是地址的一部分，比较危险</p></li></ul><h5 id="请求体参数（body）"><a href="#请求体参数（body）" class="headerlink" title="请求体参数（body）"></a>请求体参数（body）</h5><ul><li><p>参数包含在请求体中，可通过浏览器开发工具查看</p></li><li><p>常用的两种格式：</p><p>格式一：urlencoded格式</p><p>例如：name=tom&amp;age=18</p><p>对于请求头：Content-Type：application/x-www-from-urlencoded</p></li></ul><p>​    格式二：json格式</p><p>​    例如：{“name”:”tom”,”:age”:12}</p><p>​    对应请求头：Content-Type：application/json</p><h3 id="特别注意："><a href="#特别注意：" class="headerlink" title="特别注意："></a>特别注意：</h3><ul><li><p>GET请求不能携带请求体参数，因为GET请求没有请求体</p></li><li><p>理论上一次请求可以随意使用上述3种类型参数中的任何一种，甚至一次请求的3个参数可以用3种形式携带，但一般不这样做</p></li><li><p>一般来说我们有一些”约定俗成”的规矩:</p><p>(1):例如 from 表单发送 post 请求时，自动使用请求体参数，用urlencoded编码</p></li></ul><p>​    (2):例如 jQuery 发送ajax-post请求时，自动使用请求体参数，用urlencoded编码</p><ul><li>开发中请求到底发给谁？用什么方式？ 携带什么参数？ —要参考项目的API接口文档</li></ul><h2 id="API相关"><a href="#API相关" class="headerlink" title="API相关"></a>API相关</h2><h3 id="API的分类"><a href="#API的分类" class="headerlink" title="API的分类"></a>API的分类</h3><h4 id="REST-API（restful-风格的-API）"><a href="#REST-API（restful-风格的-API）" class="headerlink" title="REST API（restful 风格的 API）"></a>REST API（restful 风格的 API）</h4><ul><li><p>发送请求进行 CRUD（增查改删） 哪个操作由请求方式来决定</p></li><li><p>同一个请求路径可以进行多个操作</p></li><li><p>请求方式会用到 GET / POST / PUT / DELETE</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token comment">// 实例一个app服务对象</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/person'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'一些人的数据给你了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/person'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'你成功的添加了一个人'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'/person'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'你成功的修改了一个人'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/person'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'你成功的删除了一个人'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8090</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器开启成功了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="非-REST-API-restless-风格的-API"><a href="#非-REST-API-restless-风格的-API" class="headerlink" title="非 REST API (restless 风格的 API)"></a>非 REST API (restless 风格的 API)</h4><ul><li>请求方式不决定请求的 CRUD 操作</li><li>一个请求路径只对应一个操作</li><li>一般只有 GET / POST</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 早些年都这么写，两个请求有4个路径 --不能清晰表达要干嘛</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token comment">// 实例一个app服务对象</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/get_person'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'一些人的数据给你了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/add_person'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'你成功的添加了一个人'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/update_person'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'你成功的修改了一个人'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 请求方式不决定请求的 CRUD 操作</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/delete_person'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'你成功的删除了一个人'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8090</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器开启成功了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-json-server-搭建-REST-API"><a href="#使用-json-server-搭建-REST-API" class="headerlink" title="使用 json-server 搭建 REST API"></a>使用 json-server 搭建 REST API</h3><h4 id="json-server是什么？"><a href="#json-server是什么？" class="headerlink" title="json-server是什么？"></a>json-server是什么？</h4><ul><li><strong>用来快速搭建REST API 风格的工具包</strong></li></ul><h4 id="使用-json-server"><a href="#使用-json-server" class="headerlink" title="使用 json-server"></a>使用 json-server</h4><ul><li><p>在线文档：http:github.com/typicode/json-serrver</p></li><li><pre><code>下载：npm install -g json-server<pre class="line-numbers language-none"><code class="language-none">- 目标根目录下创建数据库 **json** 文件：**db.json**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>{"posts": [  { "id": 1, "title": "json-server", "author": "typicode" }],"comments": [  { "id": 1, "body": "some comment", "postId": 1 }],"profile": { "name": "typicode" }}<pre class="line-numbers language-none"><code class="language-none">- 启动服务器执行命令：json-server --watch db.json   (watch可以省略 db可以改为任意喜欢的名字)  #### 使用浏览器访问测试http://localhost:3000/postshttp://localhost:3000/commentshttp://localhost:3000/profile#### 使用postmon接口测试**json-server服务器注意：**- postmon测试中发送PUT请求，能在请求体携带id参数（或者使用params携带id），不能用query参数携带id- postmon测试中发送DELETE请求，只能使用params携带参数（json-server模拟的服务器，id都得通过params携带，其他有请求体就用请求体，没有就正常使用params或者query）  #### 一般 http 请求与 ajax 请求- ajax请求是一种特别http请求-  对服务器端来说，没有任何区别，区别在浏览器端- 浏览器端发请求：只有XHR或fetch发出得才是ajax请求。其他所有得都是非ajax请求- 浏览器端接收到响应  ​（1） 一般请求：浏览器一般会直接显示响应体数据，也就是我们常说得自动刷新/跳转页面  ​（2）ajax 请求：浏览器不会对界面进行任何更新操作，只是调用监视得回调函数传入响应相关数据  ## axios的理解和使用### axios是什么1.前端最流行的ajax请求库2.react/vue官方都推荐使用axios发ajax请求3.文档：https://github.com/axios/axios### axios特点1.基于Promise的异步ajax请求库2.浏览器端/node端都可以使用3.支持请求/响应拦截器4.支持请求取消5.请求/响应数据转换6.批量发送多个请求### 使用axios发送ajax请求- 终端打开准备好的server文件夹里使用api-doc工具制作的api文档- 新建 '1_axios的基本使用.html' 文件，同时新建一个js文件夹存放axios.mini.js文件,引入到html里**准备按钮、文本框**```html&lt;button id="btn1"&gt;点我获取所有人&lt;/button&gt;&lt;br&gt;&lt;br&gt;&lt;button id="btn2"&gt;点我获取某个人&lt;/button&gt;&lt;input id="person_id" type="text" placeholder="请输入一个人的id"&gt;&lt;br&gt;&lt;br&gt;&lt;button id="btn3"&gt;点我添加一个人&lt;/button&gt;&lt;input id="person_name" type="name" placeholder="请输入一个人的名字"&gt;&lt;input id="person_age" type="age" placeholder="请输入一个人的年龄"&gt;&lt;br&gt;&lt;br&gt;&lt;button id="btn4"&gt;点我更新一个人&lt;/button&gt;&lt;input id="person_update_id" type="text" placeholder="请输入一个人的id"&gt;&lt;input id="person_update_name" type="text" placeholder="请输入名字"&gt;&lt;input id="person_update_age" type="text" placeholder="请输入年龄"&gt;&lt;br /&gt;&lt;br /&gt;&lt;button id="btn5"&gt;点我删除一个人&lt;/button&gt;&lt;input id="person_delete_id" type="text" placeholder="请输入删除的id"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul><p><strong>获取按钮、文本框</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> btn1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn1'</span><span class="token punctuation">)</span><span class="token keyword">const</span> btn2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn2'</span><span class="token punctuation">)</span><span class="token keyword">const</span> btn3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn3'</span><span class="token punctuation">)</span><span class="token keyword">const</span> personId <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'person_id'</span><span class="token punctuation">)</span><span class="token keyword">const</span> personName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'person_name'</span><span class="token punctuation">)</span><span class="token keyword">const</span> personAge <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'person_age'</span><span class="token punctuation">)</span><span class="token keyword">const</span> btn4 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn4'</span><span class="token punctuation">)</span><span class="token keyword">const</span> btn5 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn5'</span><span class="token punctuation">)</span><span class="token keyword">const</span> personUpdateId <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'person_update_id'</span><span class="token punctuation">)</span><span class="token keyword">const</span> personUpdateName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'person_update_name'</span><span class="token punctuation">)</span><span class="token keyword">const</span> personUpdateAge <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'person_update_age'</span><span class="token punctuation">)</span><span class="token keyword">const</span> personDeleteId <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'person_delete_id'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>获取所有人的信息 —发送GET请求 —不携带参数</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 获取所有人的信息 ---发送GET请求 ---不携带参数 </span>btn1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 完整版</span>    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token operator">:</span> <span class="token string">'http://localhost:5000/persons'</span><span class="token punctuation">,</span> <span class="token comment">//请求地址</span>        method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token comment">//请求方式</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求成功了'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求失败了'</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token punctuation">)</span>        <span class="token comment">// 精简版</span>    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:5000/persons'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>         <span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求成功了'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求失败了'</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 如果只想获取到成功的值 可以使用await 方法更简单</span>btn1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:5000/persons'</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用axios发送其他请求"><a href="#使用axios发送其他请求" class="headerlink" title="使用axios发送其他请求"></a>使用axios发送其他请求</h3><h4 id="发送GET请求"><a href="#发送GET请求" class="headerlink" title="发送GET请求"></a>发送GET请求</h4><p><strong>获取某个人—发送GET请求—携带query参数</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//获取某个人---发送GET请求---携带query参数</span>btn2<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 完整版</span>    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token operator">:</span> <span class="token string">'http://localhost:5000/person'</span><span class="token punctuation">,</span>        method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>        params<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> personId<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token comment">//此处写的是params，但携带的是query参数</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        <span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求成功了'</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token string">'请求失败了'</span><span class="token punctuation">,</span> error <span class="token punctuation">}</span>    <span class="token punctuation">)</span>        <span class="token comment">// 精简版</span>    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:5000/person'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> params<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> personId<span class="token punctuation">.</span>value <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        <span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="发送POST请求"><a href="#发送POST请求" class="headerlink" title="发送POST请求"></a>发送POST请求</h4><p><strong>添加一个人—发送POST请求—携带json编码参数 或 urlencoded编码</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">btn3<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     <span class="token comment">// 完整版</span>     url<span class="token operator">:</span><span class="token string">'http://localhost:5000/person'</span><span class="token punctuation">,</span>     method<span class="token operator">:</span><span class="token string">'POST'</span><span class="token punctuation">,</span>     data<span class="token operator">:</span><span class="token punctuation">{</span>name<span class="token operator">:</span>personName<span class="token punctuation">.</span>value<span class="token punctuation">,</span>age<span class="token operator">:</span>personAge<span class="token punctuation">.</span>value<span class="token punctuation">}</span> <span class="token comment">//携带请求体参数（json编码）</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    <span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求成功了'</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求失败了'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token punctuation">)</span>    <span class="token comment">// 精简版</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://localhost:5000/person'</span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>personName<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;age=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>personAge<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token comment">// axios.post('http://localhost:5000/person',{name:personName.value,age:personAge.value}).then(</span>     <span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求成功了'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求失败了'</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="发送PUT请求"><a href="#发送PUT请求" class="headerlink" title="发送PUT请求"></a>发送PUT请求</h4><p>   <strong>更新一个人—发送PUT请求—携带json编码参数 或 urlencoded编码</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">btn4<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 完整版</span>    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token operator">:</span> <span class="token string">'http://localhost:5000/person'</span><span class="token punctuation">,</span>        method<span class="token operator">:</span> <span class="token string">'PUT'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">{</span>            id<span class="token operator">:</span>personUpdateId<span class="token punctuation">.</span>value<span class="token punctuation">,</span>             name<span class="token operator">:</span>personUpdateName<span class="token punctuation">.</span>value<span class="token punctuation">,</span>             age<span class="token operator">:</span>personUpdateAge<span class="token punctuation">.</span>value        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>            <span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求成功了'</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求失败了'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>    <span class="token punctuation">)</span>        <span class="token comment">//精简版</span>    axios<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'http://localhost:5000/person'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        id<span class="token operator">:</span>personUpdateId<span class="token punctuation">.</span>value<span class="token punctuation">,</span>        name<span class="token operator">:</span>personUpdateName<span class="token punctuation">.</span>value<span class="token punctuation">,</span>        age<span class="token operator">:</span>personUpdateAge<span class="token punctuation">.</span>value    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        <span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求成功了'</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求失败了'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="发送DELETE请求"><a href="#发送DELETE请求" class="headerlink" title="发送DELETE请求"></a>发送DELETE请求</h4><p><strong>删除一个人—发送DELETE请求—携带params参数</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">btn5<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>       <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>           url<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://localhost:5000/person/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>personDeleteId<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>           method<span class="token operator">:</span><span class="token string">'DELETE'</span><span class="token punctuation">,</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>           <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求成功了'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求失败了'</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>       <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a><strong>结论</strong></h3><ul><li><p><strong>axios调用的返回值是Promise实例</strong></p></li><li><p><strong>成功的值叫response，失败的值叫error</strong></p></li><li><p><strong>axios成功的值是一个axios封装的response对象，服务器返回的真正数据在response.data中</strong></p></li><li><p><strong>携带query参数时，编写的配置项叫做params</strong></p></li><li><p><strong>携带params参数时，就需要自己手动拼在url中</strong></p></li></ul><h3 id="axios常用配置项"><a href="#axios常用配置项" class="headerlink" title="axios常用配置项"></a>axios常用配置项</h3><p>新建‘2_axios常用配置项.html’文件，引入‘axios.min.js’</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">&gt;</span>点我获取所有人<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> <span class="token operator">&gt;</span><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token comment">//给axios配置默认属性</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">2000</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>school<span class="token operator">:</span><span class="token string">'atguigu'</span><span class="token punctuation">}</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'http://localhost:5000'</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>url<span class="token operator">:</span><span class="token string">'/persons'</span><span class="token punctuation">,</span> <span class="token comment">//请求地址</span>method<span class="token operator">:</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token comment">//请求方式</span><span class="token comment">//params:{delay:3000},//配置query参数</span><span class="token comment">//data:{c:3,d:3},//配置请求体参数(json编码)</span><span class="token comment">//data:'e=5&amp;f=6',//配置请求体参数(urlencoded编码)</span><span class="token comment">//timeout:2000,//配置超时时间</span><span class="token comment">//headers:{school:'atguigu'} //配置请求头</span><span class="token comment">//responseType:'json'//配置响应数据的格式(默认值)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="axios常用语法"><a href="#axios常用语法" class="headerlink" title="axios常用语法"></a>axios常用语法</h3><p>新建’3_axios.create方法.html‘，引入‘axios.min.js’</p><h4 id="axios-create-config"><a href="#axios-create-config" class="headerlink" title="axios.create(config)"></a>axios.create(config)</h4><ul><li><p>根据指定配置创建一个新的axios, 也就是每个新axios都有自己的配置</p></li><li><p>新axios只是没有取消请求和批量发请求的方法, 其它所有语法都是一致的</p></li><li><p>为什么要设计这个语法?</p><p> <strong>需求: 项目中有部分接口需要的配置与另一部分接口需要的配置不太一样</strong></p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn3"</span><span class="token operator">&gt;</span>点我获取笑话信息<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> <span class="token operator">&gt;</span><span class="token keyword">const</span> btn3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn3'</span><span class="token punctuation">)</span><span class="token comment">// 创建一个新的axios </span><span class="token keyword">const</span> axios2 <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>timeout<span class="token operator">:</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token comment">//headers:{name:'tom'},</span>baseURL<span class="token operator">:</span><span class="token string">'https://api.apiopen.top/api'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//给原axios配置默认属性</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">2000</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>school<span class="token operator">:</span><span class="token string">'atguigu'</span><span class="token punctuation">}</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'http://localhost:5000'</span>btn3<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">axios2</span><span class="token punctuation">(</span><span class="token punctuation">{</span>url<span class="token operator">:</span><span class="token string">'/getImages'</span><span class="token punctuation">,</span>method<span class="token operator">:</span><span class="token string">'GET'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="拦截器函数-ajax请求-请求的回调函数"><a href="#拦截器函数-ajax请求-请求的回调函数" class="headerlink" title="拦截器函数/ajax请求/请求的回调函数"></a>拦截器函数/ajax请求/请求的回调函数</h4><p><strong>axios请求拦截器</strong><br>    1.是什么？<br>            在真正发请求前执行的一个回调函数<br>    2.作用：<br>            对所有的请求做统一的处理：追加请求头、追加参数、界面loading提示等等</p><p><strong>新建’4_axios中的拦截器.html‘，引入‘axios.min.js’</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">&gt;</span>点我获取所有人<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> <span class="token operator">&gt;</span><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token comment">//请求拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求拦截器1执行了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果时间戳是偶数 就加上请求头</span><span class="token keyword">if</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>token <span class="token operator">=</span> <span class="token string">'atguigu'</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> config<span class="token punctuation">}</span><span class="token punctuation">)</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:5000/persons'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>axios响应拦截器</strong><br>    1.是什么？<br>            得到响应之后执行的一组回调函数<br>    2.作用：<br>            若请求成功，对成功的数据进行处理<br>            若请求失败，对失败进行统一的操作     </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">&gt;</span>点我获取所有人<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> <span class="token operator">&gt;</span><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token comment">//响应拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'响应拦截器成功的回调执行了'</span><span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">'时间戳不是偶数，不能给你数据'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'响应拦截器失败的回调执行了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:5000/persons2'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><h4 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">&gt;</span>点我获取测试数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn2"</span><span class="token operator">&gt;</span>取消请求<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> <span class="token operator">&gt;</span><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token keyword">const</span> btn2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn2'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span>CancelToken<span class="token punctuation">}</span> <span class="token operator">=</span> axios <span class="token comment">//CancelToken能为一次请求“打标识”</span><span class="token keyword">let</span> cancelbtn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>url<span class="token operator">:</span><span class="token string">'http://localhost:5000/test1?delay=3000'</span><span class="token punctuation">,</span>cancelToken<span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">CancelToken</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> <span class="token comment">//c是一个函数，调用c就可以关闭本次请求</span>cancel <span class="token operator">=</span> c<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>btn2<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>取消请求和拦截器配合使用</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">&gt;</span>点我获取测试数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn2"</span><span class="token operator">&gt;</span>取消请求<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> <span class="token operator">&gt;</span><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token keyword">const</span> btn2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn2'</span><span class="token punctuation">)</span><span class="token comment">// axios里面有个isCancel方法专门用于判断错误，还是用户取消请求导致的不合理。使用{}取出isCancel</span><span class="token keyword">const</span> <span class="token punctuation">{</span>CancelToken<span class="token punctuation">,</span>isCancel<span class="token punctuation">}</span> <span class="token operator">=</span> axios <span class="token comment">//CancelToken能为一次请求“打标识”</span><span class="token keyword">let</span> cancelbtn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token comment">// 每次点击按钮的时候都问一下外边是否有cancel 有没有值</span><span class="token keyword">if</span><span class="token punctuation">(</span>cancel<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>url<span class="token operator">:</span><span class="token string">'http://localhost:5000/test1?delay=3000'</span><span class="token punctuation">,</span>cancelToken<span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">CancelToken</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> <span class="token comment">//c是一个函数，调用c就可以关闭本次请求</span>cancel <span class="token operator">=</span> c<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isCancel</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//如果进入判断，证明：是用户取消了请求</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'用户取消了请求，原因是：'</span><span class="token punctuation">,</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>btn2<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token string">'任性，就是不要了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">&gt;</span>点我获取测试数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn2"</span><span class="token operator">&gt;</span>取消请求<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> <span class="token operator">&gt;</span><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token keyword">const</span> btn2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn2'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span>CancelToken<span class="token punctuation">,</span>isCancel<span class="token punctuation">}</span> <span class="token operator">=</span> axios <span class="token comment">//CancelToken能为一次请求“打标识”</span><span class="token keyword">let</span> cancelaxios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>cancel<span class="token punctuation">)</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token string">'取消了'</span><span class="token punctuation">)</span>config<span class="token punctuation">.</span>cancelToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CancelToken</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> cancel<span class="token operator">=</span> c<span class="token punctuation">)</span><span class="token keyword">return</span> config<span class="token punctuation">}</span><span class="token punctuation">)</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isCancel</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//如果进入判断，证明：是用户取消了请求</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'用户取消了请求，原因是：'</span><span class="token punctuation">,</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:5000/test1?delay=3000'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>btn2<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token string">'任性，就是不要了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="批量的发送请求"><a href="#批量的发送请求" class="headerlink" title="批量的发送请求"></a>批量的发送请求</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> <span class="token operator">&gt;</span><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:5000/test1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:5000/test2?delay=3000'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:5000/test3'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Axios入门&quot;&gt;&lt;a href=&quot;#Axios入门&quot; class=&quot;headerlink&quot; title=&quot;Axios入门&quot;&gt;&lt;/a&gt;Axios入门&lt;/h1&gt;&lt;h2 id=&quot;HTTP相关&quot;&gt;&lt;a href=&quot;#HTTP相关&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Axios" scheme="https://wuzimo233.github.io/tags/Axios/"/>
    
  </entry>
  
  <entry>
    <title>Promise新版学习大纲</title>
    <link href="https://wuzimo233.github.io/posts/14.html"/>
    <id>https://wuzimo233.github.io/posts/14.html</id>
    <published>2022-06-16T03:10:00.000Z</published>
    <updated>2022-06-16T03:08:01.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="函数对象与实例对象"><a href="#函数对象与实例对象" class="headerlink" title="函数对象与实例对象"></a>函数对象与实例对象</h3><p>​    <strong>1.函数对象</strong>:  将函数作为对象使用时, 简称为函数对象。</p><p>​    <strong>2.实例对象</strong>:  new 构造函数或类产生的对象, 我们称之为实例对象。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//函数对象</span><span class="token keyword">function</span> <span class="token function">Person</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">}</span>Person<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">//将Person看成一个对象 这是给它添加一个a属性并且赋值为1</span><span class="token comment">//实例对象 --p1是Person的实例对象</span><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'老刘'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：每一个函数对象有一个不可修改的属性叫name</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'tom'</span> <span class="token comment">//这是错误的  因为name值是函数的名（Person）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="回调函数的分类"><a href="#回调函数的分类" class="headerlink" title="回调函数的分类"></a>回调函数的分类</h3><h4 id="什么是回调？"><a href="#什么是回调？" class="headerlink" title="什么是回调？"></a><strong>什么是回调？</strong></h4><p>​    —<strong>①我们定义的函数，②我们没有调用，③最终函数执行了。</strong></p><h4 id="两种回调函数"><a href="#两种回调函数" class="headerlink" title="两种回调函数"></a>两种回调函数</h4><h5 id="同步的回调函数"><a href="#同步的回调函数" class="headerlink" title="同步的回调函数:"></a>同步的回调函数:</h5><p>​              理解: 立即在主线程上执行, 不会放入回调队列中。</p><p>​              例子: <strong>数组遍历相关的回调函数</strong>  / Promise的executor函数</p><h5 id="异步的回调函数"><a href="#异步的回调函数" class="headerlink" title="异步的回调函数:"></a>异步的回调函数:</h5><p>​              理解: 不会立即执行, 会放入回调队列中以后执行（等主线程忙完）</p><p>​              例子: <strong>定时器回调 / ajax（成功、失败时）的回调</strong> </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//演示同步的回调函数</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'主线程的代码'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//演示异步的回调函数</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'@'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'主线程'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="错误类型的说明"><a href="#错误类型的说明" class="headerlink" title="错误类型的说明"></a>错误类型的说明</h3><p> <strong>js中错误类型有详细的划分，这里进一步理解 JS 中的错误 (Error) 和错误处理</strong></p><p>  <code>mdn文档: https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error</code></p><h4 id="错误的类型"><a href="#错误的类型" class="headerlink" title="错误的类型"></a>错误的类型</h4><p>​            <strong>Error</strong>: 所有错误的父类型  （当发生错误时，将显示下方的子错误类型）</p><p>​            <strong>ReferenceError</strong>: 引用的变量不存在</p><p>​            <strong>TypeError</strong>: 数据类型不正确</p><p>​            <strong>RangeError</strong>: 数据值不在其所允许的范围内–死循环</p><p>​            <strong>SyntaxError</strong>: 语法错误</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//演示：ReferenceError: 引用的变量不存在</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//演示：TypeError: 数据类型不正确 </span><span class="token comment">//（声明一个demo常量，并且赋值一个函数，demo函数是能够被调用的，值是undefined，然后undefined再调用函数,当然显示类型不正确）</span><span class="token keyword">const</span> <span class="token function-variable function">demo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//演示：RangeError: 数据值不在其所允许的范围内 </span><span class="token comment">//(声明一个变量demo并赋值一个函数给他，同时函数内部再调用自己（递归函数），然后执行demo函数，然后无限的执行就会超出栈范围)</span><span class="token keyword">const</span> <span class="token function-variable function">demo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//演示：SyntaxError: 语法错误</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="js中的错误处理"><a href="#js中的错误处理" class="headerlink" title="js中的错误处理"></a>js中的错误处理</h4><p>​            捕获错误: try{}catch(){}</p><p>​            抛出错误: throw error</p><p><strong>如何捕获一个错误？</strong></p><ul><li>try中放可能出现错误的代码，一旦出现错误立即停止try中代码的执行，调用catch，并携带错误信息</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">try</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//js引擎捕获到错误</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'代码执行出错了,错误的原因是：'</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>js中的错误处理_抛出错误</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//如何抛出一个错误</span><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> date <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>date <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'偶数，可以正常工作'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'奇数，不可以工作！'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">debugger</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'@'</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="错误对象"><a href="#错误对象" class="headerlink" title="错误对象"></a>错误对象</h4><p> message属性: 错误相关信息</p><p> stack属性: 记录信息</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//演示：ReferenceError: 引用的变量不存在</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//演示：TypeError: 数据类型不正确</span><span class="token keyword">const</span> <span class="token function-variable function">demo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//演示：RangeError: 数据值不在其所允许的范围内</span><span class="token keyword">const</span> <span class="token function-variable function">demo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//演示：SyntaxError: 语法错误</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Promise的理解和使用"><a href="#Promise的理解和使用" class="headerlink" title="Promise的理解和使用"></a>Promise的理解和使用</h2><h3 id="Promise是什么？"><a href="#Promise是什么？" class="headerlink" title="Promise是什么？"></a>Promise是什么？</h3><h4 id="抽象表达"><a href="#抽象表达" class="headerlink" title="抽象表达:"></a>抽象表达:</h4><p>​            (1).Promise是一门新的技术(ES6提出的)</p><p>​            (2).Promise是 JS 中<strong>异步编程的新方案 ** (旧方案是谁?  –**纯回调</strong>：只靠回调函数解决（ajax）)</p><h4 id="具体表达"><a href="#具体表达" class="headerlink" title="具体表达:"></a>具体表达:</h4><p>​            (1).从语法上来说: <strong>Promise是一个内置构造函数</strong></p><p>​           (2).从功能上来说: Promise的实例对象可以用来        封装一个异步操作，并可以获取其成功/失败的值</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ul><li><p>Promise不是回调函数，是一个内置的构造函数，是程序员自己new调用的。</p></li><li><p>new Promise的时候，要传入一个回调函数，它是同步的回调，会立即在主线程上执行，它被称为executor函数 –该函数将在构造这个新<code>Promise</code>对象过程中，被构造函数执行</p></li><li><p>每一个Promise<strong>实例都有3种状态</strong>：初始化(pending)、成功(fulfilled)、失败(rejected)</p></li><li><p>每一个Promise实例在刚被new出来的那一刻，状态都是初始化(pending)</p></li><li><p>executor函数会接收到2个参数，它们都是函数，分别用形参：resolve、reject接收</p></li></ul><p>​          1.调用resolve函数会：</p><p>​              (1).让Promise实例状态变为成功(fulfilled)</p><p>​              (2).可以指定成功的value   –resolve(‘ok’)</p><p>​          2.调用reject函数会：</p><p>​              (1).让Promise实例状态变为失败(rejected)</p><p>​              (2).可以指定失败的reason   –reject(‘失败的原因’)</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span><span class="token comment">//创建一个Promise实例对象</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token comment">// resolve('ok')</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败的原因'</span><span class="token punctuation">)</span><span class="token comment">// console.log(resolve);</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'@'</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//一般不把Promise实例做控制台输出  @ Promise {&lt;rejected&gt;: 'ok'}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Promise的基本使用"><a href="#Promise的基本使用" class="headerlink" title="Promise的基本使用"></a>Promise的基本使用</h3><h4 id="重要语法"><a href="#重要语法" class="headerlink" title="重要语法"></a>重要语法</h4><p>​            new Promise(executor) 构造函数</p><p>​            Promise.prototype.then 方法</p><h4 id="基本编码流程"><a href="#基本编码流程" class="headerlink" title="基本编码流程"></a>基本编码流程</h4><p>​          1.创建Promise的实例对象(pending状态), 传入executor函数</p><p>​          2.在executor中启动异步任务（定时器、ajax请求）</p><p>​          3.根据异步任务的结果，做不同处理：</p><p>​                3.1 如果异步任务成功了：</p><p>​                        我们调用resolve(value), 让Promise实例对象状态变为成功(fulfilled),同时指定成功的value</p><p>​                3.2 如果异步任务失败了：</p><p>​                        我们调用reject(reason), 让Promise实例对象状态变为失败(rejected),同时指定失败的reason</p><p>​          4.通过then方法为Promise的实例指定成功、失败的回调函数，来获取成功的value、失败的reason</p><p>​                注意：then方法所指定的：成功的回调、失败的回调，都是异步的回调。</p><h4 id="关于状态的注意点："><a href="#关于状态的注意点：" class="headerlink" title="关于状态的注意点："></a>关于状态的注意点：</h4><p>​          1.三个状态:</p><p>​                pending: 未确定的——初始状态</p><p>​                fulfilled: 成功的——调用resolve()后的状态</p><p>​                rejected: 失败的——-调用reject()后的状态</p><p>​          2.两种状态改变</p><p>​                pending ==&gt; fulfilled</p><p>​                pending ==&gt; rejected</p><p>​          3.状态只能改变一次！！</p><p>​          4.一个promise指定多个成功/失败回调函数, 都会调用吗?</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token comment">// 1.声明变量p，将Promise实例对象赋值给它,并且里边传入一个执行器函数executor --里边有两个参数resolve、reject</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>            <span class="token comment">// 2.函数体</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'我是服务器返回的数据'</span><span class="token punctuation">)</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'我是一些错误信息'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>            <span class="token comment">// 3.成功和失败后的回调</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//成功的回调-异步</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment">//失败的回调-异步</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'@'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Promise与ajax配合使用"><a href="#Promise与ajax配合使用" class="headerlink" title="Promise与ajax配合使用"></a>Promise与ajax配合使用</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> ajax配合使用 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>            <span class="token comment">// 真正开启一个异步任务</span><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//readyState为4代表接收完毕，接收的可能是：服务器返回的成功数据、服务器返回的错误</span><span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'请求出错'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'https://api.apiopen.top/api/sentences'</span><span class="token punctuation">)</span>            <span class="token comment">// !!将服务器数据转为json格式</span>xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">'json'</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了1'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//成功的回调-异步</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了1'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment">//失败的回调-异步</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'@'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Promise封装ajax请求"><a href="#Promise封装ajax请求" class="headerlink" title="Promise封装ajax请求"></a>Promise封装ajax请求</h3><p>需求：</p><p>每次请求都要输入很多数据比较麻烦因此定义一个 <strong>sendAjax()</strong> 函数，对xhr的 <strong>GET</strong> 请求进行封装：</p><p>  1.该函数接收两个参数：url(请求地址)、data(参数对象)</p><p>  2.该函数返回一个Promise实例</p><p>​        (1).若ajax请求成功,则Promise实例成功,成功的value是返回的数据。</p><p>​        (2).若ajax请求失败,则Promise实例失败,失败的reason是错误提示。</p><p><strong>正常使用promise发送一个ajax请求：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1.声明变量p，将Promise实例对象赋值给它,并且里边传入一个执行器函数executor --里边有两个参数resolve、reject</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 2.实例化 xhr</span><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 3.绑定监听</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token keyword">else</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'请求出错'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'https://api.apiopen.top/api/getImages?page=0&amp;size=10'</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">'json'</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了1'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//成功的回调-异步</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了1'</span><span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment">//失败的回调-异步</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'@'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用函数封装后：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1.定义函数，并准备俩参数接收地址和参数（data是参数对象）</span><span class="token keyword">function</span> <span class="token function">sendAjax</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 2.准备一个promise实例 </span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">// 3.实例化 xhr</span><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 4.绑定监听</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'请求出了问题'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 5.整理参数 --需将 page=0&amp;size=10 这种形式转化为 {page:0,size:10}这种形式才能放进地址中作为参数</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>str <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span>str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> url <span class="token operator">+</span> <span class="token string">'?'</span> <span class="token operator">+</span> str<span class="token punctuation">)</span>xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">'json'</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span> p <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">sendAjax</span><span class="token punctuation">(</span><span class="token string">'https://api.apiopen.top/api/getImages'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>page<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>size<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="封装ajax请求（纯回调方式）"><a href="#封装ajax请求（纯回调方式）" class="headerlink" title="封装ajax请求（纯回调方式）"></a>封装ajax请求（纯回调方式）</h3><p><em>需求：</em></p><p>定义一个sendAjax函数，对xhr的get请求进行封装</p><p>该函数接收4个参数：url(请求地址)、data(参数对象)、success(成功的回调)、error(失败的回调)</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span><span class="token function">封装一个简单的ajax</span><span class="token punctuation">(</span>纯回调<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span><span class="token keyword">function</span> <span class="token function">sendAjax</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span>data<span class="token punctuation">,</span>success<span class="token punctuation">,</span>error</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//实例xhr</span><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//绑定监听</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token function">success</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'请求出了点问题'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//整理参数</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>str <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span>str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>url<span class="token operator">+</span><span class="token string">'?'</span><span class="token operator">+</span>str<span class="token punctuation">)</span>xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">'json'</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">sendAjax</span><span class="token punctuation">(</span><span class="token string">'https://api.apiopen.top/api/getImages'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>page<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>size<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第1次失败了'</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Promise的API"><a href="#Promise的API" class="headerlink" title="Promise的API"></a>Promise的API</h3><h4 id="Promise构造函数"><a href="#Promise构造函数" class="headerlink" title="Promise构造函数:"></a>Promise构造函数:</h4><p><strong>new Promise (executor) {}</strong></p><p>executor函数: 是同步执行的，(resolve, reject) =&gt; {}<br>resolve函数: 调用resolve将Promise实例内部状态改为成功(fulfilled)。<br>reject函数: 调用reject将Promise实例内部状态改为失败(rejected)。<br>说明: **excutor函数会在Promise内部立即同步调用,**异步代码放在excutor函数中。</p><h4 id="Promise-prototype-then方法"><a href="#Promise-prototype-then方法" class="headerlink" title="Promise.prototype.then方法:"></a>Promise.prototype.then方法:</h4><p><strong>Promise实例.then(onFulfilled,onRejected)</strong><br>onFulfilled: 成功的回调函数 (value) =&gt; {}<br>onRejected: 失败的回调函数 (reason) =&gt; {}<br>特别注意(难点)：<strong>then方法会返回一个新的Promise实例对象</strong></p><p><strong>验证then的返回值</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//验证：then方法会返回一个新的Promise实例对象。(暂且不研究返回的这个新Promise实例状态怎么变化)</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> x <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>   <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token parameter">reason</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'50'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// pomise {&lt;pending&gt;}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Promise-prototype-catch方法"><a href="#Promise-prototype-catch方法" class="headerlink" title="Promise.prototype.catch方法:"></a>Promise.prototype.catch方法:</h4><p> <strong>Promise实例.catch(onRejected)</strong><br>onRejected: 失败的回调函数 (reason) =&gt; {}<br>说明: <strong>catch方法是then方法的语法糖, 相当于: then(undefined, onRejected)</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//Promise.prototype.catch方法</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了1'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了1'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了2'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Promise-resolve方法"><a href="#Promise-resolve方法" class="headerlink" title="Promise.resolve方法:"></a>Promise.resolve方法:</h4><p> <strong>Promise.resolve(value)</strong><br>说明: 用于快速返回一个状态为fulfilled<strong>或rejected的</strong>Promise实例对象<br>备注：当状态为rejected是因为value的值可能是：</p><p>(1)<strong>非Promise值</strong>       – 100、’abc’、{}、[]</p><p> (2)<strong>Promise值</strong>          –  Promise实例（此时值是传入的promise实例，值成功或者失败）</p><p>例子：Promise.resolve方法生成了一个状态为失败的Promise对象实例 p</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//Promise.resolve</span><span class="token keyword">const</span> p0 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p0<span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Promise-reject方法"><a href="#Promise-reject方法" class="headerlink" title="Promise.reject方法:"></a>Promise.reject方法:</h4><p> <strong>Promise.reject方法(reason)</strong><br>说明: 用于<strong>快速返回一个状态必为rejected</strong>的Promise实例对象</p><p>例子：Promise.reject方法即使传入一个状态为成功的Promise对象实例值也是失败的 即失败的原因是那个成功的promise对象实例</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//Promise.reject</span><span class="token keyword">const</span> p0 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>p0<span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Promise-all方法"><a href="#Promise-all方法" class="headerlink" title="Promise.all方法:"></a>Promise.all方法:</h4><p><strong>Promise.all(promiseArr)</strong><br>promiseArr: 包含n个Promise实例的数组<br> 说明: <strong>返回一个新的Promise实例, 只有所有的promise都成功才成功, 只要有一个失败了就直接失败。</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//Promise.all</span><span class="token keyword">const</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span>     <span class="token comment">//有一个失败了就直接失败。</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> x <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">]</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Promise-race方法"><a href="#Promise-race方法" class="headerlink" title="Promise.race方法:"></a>Promise.race方法:</h4><p><strong>Promise.race(promiseArr)</strong><br>promiseArr: 包含n个Promise实例的数组<br>  说明: 返回一个新的Promise实例, 成功还是很失败？以最先出结果的promise为准。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//Promise.race</span><span class="token keyword">const</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> x <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p3<span class="token punctuation">,</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Promise的几个关键问题："><a href="#Promise的几个关键问题：" class="headerlink" title="Promise的几个关键问题："></a>Promise的几个关键问题：</h3><h4 id="如何改变Promise实例的状态？"><a href="#如何改变Promise实例的状态？" class="headerlink" title="如何改变Promise实例的状态？"></a>如何改变Promise实例的状态？</h4><ul><li><p>执行resolve(value): 如果当前是pending就会变为fulfilled</p></li><li><p>执行reject(reason): 如果当前是pending就会变为rejected</p></li><li><p>执行器函数(executor)抛出异常: 如果当前是pending就会变为rejected</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> <span class="token operator">&gt;</span><span class="token keyword">const</span> p  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//浏览器引擎抛异常</span><span class="token comment">// throw 900 //编码抛异常</span><span class="token punctuation">}</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="改变Promise实例的状态和指定回调函数谁先谁后"><a href="#改变Promise实例的状态和指定回调函数谁先谁后" class="headerlink" title="改变Promise实例的状态和指定回调函数谁先谁后?"></a>改变Promise实例的状态和指定回调函数谁先谁后?</h4><ul><li>都有可能, 正常情况下是先指定回调再改变状态, 但也可以先改状态再指定回调</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//先指定回调，后改变状态（最常见）</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如何先改状态再指定回调?</strong></p><ul><li>延迟一会再调用then()</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//先改状态，后指定回调</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Promise实例什么时候才能得到数据?</strong></p><ul><li>如果先指定的回调, 那当状态发生改变时, 回调函数就会调用, 得到数据</li><li>如果先改变的状态, 那当指定回调时, 回调函数就会调用, 得到数据</li></ul><h4 id="then如何链式调用？"><a href="#then如何链式调用？" class="headerlink" title="then如何链式调用？"></a>then如何链式调用？</h4><p>Promise实例.then()<strong>返回的是一个【新的Promise实例】</strong></p><p><strong>它的值和状态由什么决定?</strong></p><p>简单表达: <strong>由then()所指定的回调函数执行的结果决定</strong></p><p>详细表达:</p><ul><li>如果then所指定的回调返回的是非Promise值a:</li></ul><p>​              那么【新Promise实例】状态为：成功(fulfilled), 成功的value为a</p><ul><li>如果then所指定的回调返回的是一个Promise实例p:</li></ul><p>​              那么【新Promise实例】的状态、值，都与p一致</p><ul><li>如果then所指定的回调抛出异常:</li></ul><p>​              那么【新Promise实例】状态为rejected, reason为抛出的那个异常</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了1'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了1'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了2'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了2'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了3'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">throw</span> <span class="token number">900</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了3'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了4'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了4'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="纯回调会引起的问题？"><a href="#纯回调会引起的问题？" class="headerlink" title="纯回调会引起的问题？"></a>纯回调会引起的问题？</h4><p>如下：可以发现代码非常的混乱，不利于查阅，且当再多发几次的请求后更加难以查阅</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token comment">// 调用之前封装好的 sendAjax函数</span><span class="token function">sendAjax</span><span class="token punctuation">(</span><span class="token string">'https://api.apiopen.top/api/getImages'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>page<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>size<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token comment">//成功的回调1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第一次成功了'</span><span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token function">sendAjax</span><span class="token punctuation">(</span><span class="token string">'https://api.apiopen.top/api/getImages'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>page<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>size<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token comment">//成功的回调2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第二次成功了'</span> <span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token function">sendAjax</span><span class="token punctuation">(</span><span class="token string">'https://api.apiopen.top/api/getImages'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>page<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>size<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token comment">//成功的回调3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第三次成功了'</span><span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token comment">// 失败的回调3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第三次失败了'</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token comment">// 失败的回调2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第二次失败了'</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token comment">// 失败的回调1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第1次失败了'</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用then的链式调用解决回调地狱"><a href="#使用then的链式调用解决回调地狱" class="headerlink" title="使用then的链式调用解决回调地狱"></a>使用then的链式调用解决回调地狱</h4><p>注意：then方法会返回一个新的Promise实例对象 但是因为其成功的value回调里还返回了 sendAjax()方法，该方法的返回值也是Promise实例对象，所以then返回的新Promise实例的状态、值，都与sendAjax()方法返回的promise一致 （详情见上方 ‘<strong>then如何链式调用</strong>‘ ）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 调用之前封装好的 sendAjax函数 （详情见上方 'Promise封装ajax请求'）</span><span class="token comment">//发送第1次请求</span><span class="token function">sendAjax</span><span class="token punctuation">(</span><span class="token string">'https://api.apiopen.top/api/getImages'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>page<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">/* 注意：then方法会返回一个新的Promise实例对象 但是因为其成功的value回调里还返回了 sendAjax()方法，该方法的返回值也是Promise实例对象，所以then返回的新Promise实例的状态、值，都与sendAjax()方法返回的promise一致 （详情见上方 'then如何链式调用' ）*/</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第1次请求成功了'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送第2次请求 </span><span class="token keyword">return</span> <span class="token function">sendAjax</span><span class="token punctuation">(</span><span class="token string">'https://api.apiopen.top/api/getImages'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>page<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第1次请求失败了'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第2次请求成功了'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送第3次请求</span><span class="token keyword">return</span> <span class="token function">sendAjax</span><span class="token punctuation">(</span><span class="token string">'https://api.apiopen.top/api/getImages'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>page<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第2次请求失败了'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第3次请求成功了'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第3次请求失败了'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="中断Promise链"><a href="#中断Promise链" class="headerlink" title="中断Promise链"></a>中断Promise链</h4><p><strong>原因：</strong></p><p>代码同上的时候，假如将发送第1次请求的地址写错后，第二次、第三次依然会因为种种原因继续执行。</p><p><strong>思路：</strong></p><p>当使用promise的then链式调用时, 在中间中断, 不再调用后面的回调函数。</p><p><strong>办法</strong>: </p><p>在失败的回调函数中返回一个pendding状态的Promise实例。在每次reason后加上 ‘ return new Promise(()<strong>=&gt;</strong>{}) ’  这样then返回的promise实例对象状态是pending就不会执行后边的value和reason</p><p>代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第1次请求成功了'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送第2次请求 </span><span class="token keyword">return</span> <span class="token function">sendAjax</span><span class="token punctuation">(</span><span class="token string">'https://api.apiopen.top/api/getImages'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>page<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第1次请求失败了'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第2次请求成功了'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送第3次请求</span><span class="token keyword">return</span> <span class="token function">sendAjax</span><span class="token punctuation">(</span><span class="token string">'https://api.apiopen.top/api/getImages'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>page<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第2次请求失败了'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第3次请求成功了'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第3次请求失败了'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Promise的错误穿透"><a href="#Promise的错误穿透" class="headerlink" title="Promise的错误穿透"></a>Promise的错误穿透</h4><ul><li><p>当使用promise的then链式调用时, 可以在最后用catch指定一个失败的回调,</p></li><li><p>前面任何操作出了错误, 都会传到最后失败的回调中处理了</p></li></ul><p><strong>备注</strong>：如果不存在then的链式调用，就不需要考虑then的错误穿透。</p><p><strong>原理</strong>：底层帮我们在then里补上了一个失败的回调 reason =&gt; {throw reason}</p><p>又因为<strong>then所指定的回调抛出异常，那么新Promise实例状态为rejected</strong>, reason为抛出的那个异常</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//另一个例子演示错误的穿透</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了1'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">'b'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> reason<span class="token punctuation">}</span><span class="token comment">//底层帮我们补上的这个失败的回调</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了2'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">108</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> reason<span class="token punctuation">}</span><span class="token comment">//底层帮我们补上的这个失败的回调</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token comment">// reason =&gt; {throw reason}</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Promise的优势"><a href="#Promise的优势" class="headerlink" title="Promise的优势"></a>Promise的优势</h3><p><strong>优势：</strong></p><ul><li><strong>指定回调函数的方式更加灵活:</strong> </li></ul><p>​      旧的: 必须在启动异步任务前指定（如之前用jQuery封装的get请求，需要提前写好成功和失败的回调）</p><p>​      promise: 启动异步任务 <strong>=&gt;</strong> 返回promie对象 <strong>=&gt;</strong> 给promise对象绑定回调函数(甚至可以在异步任务结束后指定)</p><ul><li><strong>支持链式调用, 可以解决回调地狱问题</strong></li></ul><p>​      (1)什么是回调地狱：</p><p>​              回调函数嵌套调用, 外部回调函数异步执行的结果是嵌套的回调函数执行的条件</p><p>​      (2)回调地狱的弊病：</p><p>​              代码不便于阅读、不便于异常的处理</p><p>​      (3)一个不是很优秀的解决方案：</p><p>​              then的链式调用</p><p>​      (4)终极解决方案：</p><p>​              async/await（底层实际上依然使用then的链式调用）</p><h3 id="async-await的使用"><a href="#async-await的使用" class="headerlink" title="async/await的使用"></a>async/await的使用</h3><ul><li>注意:</li></ul><p>​    await<strong>必须写在async函数中</strong>, 但async函数中可以没有await</p><p>​    如果await的Promise实例对象失败了, 就会抛出异常, 需要通过try…catch来捕获处理</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// async function demo() {</span><span class="token comment">/*当Promise实例对象p状态为失败时，一旦try中的代码发生了抛异常，将会携带异常来到catch，此时err就是抛出的'a'*/</span><span class="token comment">//（记得前边加分号）</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">// try中放可能存在错误的代码</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token keyword">const</span> result1 <span class="token operator">=</span> <span class="token keyword">await</span> p1console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span> result1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> result2 <span class="token operator">=</span> <span class="token keyword">await</span> p2console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span> result2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> result3 <span class="token operator">=</span> <span class="token keyword">await</span> p3console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span> result3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="await的应用（解决链式调用）"><a href="#await的应用（解决链式调用）" class="headerlink" title="await的应用（解决链式调用）"></a>await的应用（解决链式调用）</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//准备好一个 Promise封装好的发送ajax get请求的函数 --sendAjax(url,data)</span><span class="token punctuation">(</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果wait右侧的表达式为Promise实例对象，await后的返回值是promise成功的值</span><span class="token keyword">const</span> result1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">sendAjax</span><span class="token punctuation">(</span><span class="token string">'https://api.apiopen.top/api/getImages'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>page<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第1次请求成功了'</span><span class="token punctuation">,</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> result2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">sendAjax</span><span class="token punctuation">(</span><span class="token string">'https://api.apiopen.top/api/getImages'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>page<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第2次请求成功了'</span><span class="token punctuation">,</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> result3 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">sendAjax</span><span class="token punctuation">(</span><span class="token string">'https://api.apiopen.top/api/getImages'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>page<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第3次请求成功了'</span><span class="token punctuation">,</span>result3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="async与await的规则"><a href="#async与await的规则" class="headerlink" title="async与await的规则"></a>async与await的规则</h4><ul><li>async修饰的函数</li></ul><p>​      函数的返回值为promise对象</p><p>​      Promise实例的结果由async函数执行的返回值决定</p><ul><li>await表达式</li></ul><p>​      await右侧的表达式一般为Promise实例对象, 但也可以是其它的值</p><p>​      (1).如果表达式是Promise实例对象, await后的返回值是promise成功的值</p><p>​      (2).如果表达式是其它值, 直接将此值作为await的返回值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//测试async</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> p1console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="await原理"><a href="#await原理" class="headerlink" title="await原理"></a>await原理</h4><p> 若我们使用async配合await这种写法：</p><p> 1.表面上不出现任何的回调函数</p><p> 2.但实际上底层把我们写的代码进行了加工，把回调函数“还原”回来了。</p><p> 3.最终运行的代码是依然有回调的，只是程序员没有看见。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//程序员“轻松”的写法 </span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> pconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//浏览器翻译后的代码</span><span class="token comment">/* p.then(result =&gt; {console.log(result);console.log(100);console.log(200);},) */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="宏队列与微队列"><a href="#宏队列与微队列" class="headerlink" title="宏队列与微队列"></a>宏队列与微队列</h3><p>宏队列:[宏任务1，宏任务2…..] –如主线程上定时器就是宏任务</p><p>微队列:[微任务1，微任务2…..]   –promise实例对象的then方法内就是微任务</p><p>规则：每次要执行宏队列里的一个任务之前，先看微队列里是否有待执行的微任务</p><p>   1.如果有，先执行微任务</p><p>   2.如果没有，按照宏队列里任务的顺序，依次执行</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//代码一</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timeout'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>       <span class="token parameter">value</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功1'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>       <span class="token parameter">value</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功2'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'主线程'</span><span class="token punctuation">)</span>      <span class="token comment">// 控制台结果</span>主线程成功<span class="token number">1</span> <span class="token number">1</span>成功<span class="token number">2</span> <span class="token number">2</span>timeout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//代码二</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timeout1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timeout2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>       <span class="token parameter">value</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功1'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>       <span class="token parameter">value</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败2'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">// 控制台结果</span>成功<span class="token number">1</span> <span class="token number">1</span>失败<span class="token number">2</span> <span class="token number">2</span>timeout1timeout2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//代码三</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timeout1'</span><span class="token punctuation">)</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    <span class="token parameter">value</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了5'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timeout2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token parameter">value</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token parameter">value</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了4'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 控制台结果</span>成功了<span class="token number">3</span>成功了<span class="token number">4</span>timeout1成功了<span class="token number">5</span>timeout2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h3><p><strong>典型的先指定回调后改变状态</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">以下代码的执行流程：首先可以判断是先指定回调再改变状态主线程上的代码在飞速运行，<span class="token keyword">new</span> <span class="token class-name">Promise</span>后瞬间开始执行代码。然后执行器函数excuter是同步的回调函数，由于同步的回调函数不会往回调队列里边进，主线程上直接执行这些代码，瞬间开启一个定时器，那么setTimeout所指定的回调不是马上推入队列（除非到点了），而是放到浏览器的定时器管理模块，到点后定时器管理模块把setTimeout所指定的回调再推向宏队列，当主线程任务完成后才执行setTimeout所指定的回调。再来看主线程，<span class="token keyword">new</span> <span class="token class-name">Promise</span>在主线程上使用后，执行器函数也是在主线程上执行，定时器setTimeout内置函数也是在主线程上飞速的执行完毕（而最重要的是setTimeout其里边的函数体需要到点后再推向队列），然后主线程开始执行p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>这其中有成功和失败的两个函数参数，是挂在实例自身上了。可以理解为只要是Promise实例对象，那么一出生身上就有个类似 <span class="token constant">P</span><span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>的结构，于是这里把成功和失败的回调推向这个里边（不是推向队列，因为还不知到上方状态的结果，除非是知道状态才去调用成功<span class="token operator">/</span>失败的回调）一旦setTimeout内函数体从宏队列拉出执行，才发现状态是否成功。然后去自身找到之前缓存的成功<span class="token operator">/</span>失败的回调。<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token comment">// 函数体</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>   <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>典型的先改状态后指定回调</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/* 典型的先改状态后指定回调这个Promise实例对象一出生瞬间变为成功的状态，然后指定回调。即成功后直接把成功的回调推向了微队列。（记住要执行的时候才进队列，等着主线程将它勾出来去执行）*/</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>   <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>面试题</strong></p><p>判断出控制台的输出结果？</p><p>注意：分析方法的注释是按照1~9顺序排列</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1、立马反应setTimeout立即调用，但是不能进主线程而是进宏队列  宏队列保存 0</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">// 2、当主线程执行到此时，控制台输出 1，并且new一个Promise 判断出它是一个同步的回调 立刻马上输出1 且瞬间状态切换为成功 </span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 3、状态成功后执行 .then()方法里的回调，但是！！这是属于异步回调，需要先推入微队列  微队列保存 2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token comment">/*        6、主线程分析完后,接着开始分析微队列       此时将2输出到控制台，此刻控制台为 1、7、2  此时微队列抹去 2        又 new了一个Promise，执行器在主线程运行马上输出3，同时resolve()将状态变为成功了 此刻控制台为 1、7、2、3       状态成功后，在.then()方法里有一个为其指定得成功得回调 ，!!注意这个回调也先得推入微队列,即把4所在回调推入微队列.此时队列保存8、4       下一个.then()也是为左侧.then()返回得新Promise实例对象指定得回调,但是前一个实例的状态是由4所在的回调来定义,而4目前还未执行，所以5就挂在了自身上不推入队列       此刻当前花括号内代码执行完毕,程序默认给Promise返回的值为undefined    */</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token comment">/*        9、接着将4所在的回调拉入主线程执行 输出4  此刻控制台为 1、7、2、3、8、4       如果4所在的回调执行了,那么就说明所在的.then的状态就敲定了,返回undefined       因为.then()左侧有了结果,就把 5 推入微队列 ,此时微队列保存6、5       接着将6(所在的回调)拿出队列,推入主线程,此刻控制台为 1、7、2、3、8、4、6       接着将5(所在的回调)拿出队列,推入主线程,此刻控制台为 1、7、2、3、8、4、6、5       最后 把宏队列的0(所在的回到)推入主线程,此刻控制台为 1、7、2、3、8、4、6、5、0    */</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">/*        4、这里的.then()不会推入队列，是因为它左侧的Promise实例还没有执行没有返回出结果，这里当然不能执行，而是暂存放到左侧Promise实例身上    */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token comment">/*       7、因为.then左侧返回undefined,所以新Promise实例状态为成功, 成功的value为undefined         因为.then()左侧有了结果,就把 6 推入微队列 ,此时队列保存8、4、6    */</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">/*        5、又 new了一次Promise 此时控制台先输出 1、7 ，因为直接改变状态为成功，意味着要去调用后边  的.then()方法，当然得先把.then()方法推向微队列 此时队列保存 2 8     */</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">)</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token comment">// 8、接着将8从队列拉出,此刻控制台为 1、7、2、3、8 此时队列保存4、6</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="包管理器的对比："><a href="#包管理器的对比：" class="headerlink" title="包管理器的对比："></a>包管理器的对比：</h2><p>仅用cnpm的仓库地址</p><p>使用yarn的命令</p><p>偶尔yarn网络不好，使用npm</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h1&gt;&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Promise" scheme="https://wuzimo233.github.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>AJAX新版学习大纲</title>
    <link href="https://wuzimo233.github.io/posts/13.html"/>
    <id>https://wuzimo233.github.io/posts/13.html</id>
    <published>2022-06-16T03:08:00.000Z</published>
    <updated>2022-06-16T03:06:51.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AJAX-入门"><a href="#AJAX-入门" class="headerlink" title="AJAX 入门"></a>AJAX 入门</h1><h2 id="AJAX-简介"><a href="#AJAX-简介" class="headerlink" title="AJAX 简介"></a>AJAX 简介</h2><ul><li>AJAX全称为Asynchronous Javascript And XML，就是异步的 JS 和 XML。</li><li>通过AJAX可以在浏览器中向服务器发送异步请求，最大的优势：<strong>页面无刷新获取数据</strong>。</li><li>AJAX不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式。</li><li>ajax也是属于原生js的http请求，可以说是一种特殊的http请求。</li></ul><p>在以往提交表单一般是这样子</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pad<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- button按钮会触发表单的提交 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="XML简介"><a href="#XML简介" class="headerlink" title="XML简介"></a>XML简介</h3><ul><li><p>XML：可扩展标记语言</p></li><li><p>XML：被设计用来 <strong>传输和存储数据</strong></p><p>比方说<strong>客户端（client）</strong>与 <strong>服务器（serve）</strong>前后台进行数据交互的时候，你想获取十条新闻，服务器就要给你十条新闻，那么关键是用的什么方式给你？</p><p>于是服务器可以用XML这种字符串形式给你，XML本质就是字符串，不过有很多的规矩。</p></li><li><p>XML和HTML类似都是可扩展的标记语言，不同点：<strong>HTML中都是预定义标签</strong>，<strong>XML中没有预定义标签</strong>，<strong>全是自定义标签</strong>，用来表示一些数据</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">例：用xml表示学生数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>孙悟空<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>gender</span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>gender</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">&gt;</span></span>可以发现体积较大了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>现在已被JSON取代</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">例：用JSON表示学生数据{"name":"孙悟空","age":18,gender:"男"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="AJAX-的特点"><a href="#AJAX-的特点" class="headerlink" title="AJAX 的特点"></a>AJAX 的特点</h3><h4 id="AJAX-的优点"><a href="#AJAX-的优点" class="headerlink" title="AJAX 的优点"></a>AJAX 的优点</h4><ol><li>可以 **无需刷新页面与服务端进行通信 **获取数据</li><li>允许你根据用户事件来更新部分页面内容（例如淘宝鼠标移动到某个区域页面不刷新，但是部分区域内容更新）</li></ol><h4 id="AJAX-的缺点"><a href="#AJAX-的缺点" class="headerlink" title="AJAX 的缺点"></a>AJAX 的缺点</h4><ol><li>没有浏览历史，不能回退</li><li><strong>存在跨域问题（同源）</strong>–面试高频问题</li><li>SEO不友好（爬虫获取不到信息）</li></ol><h3 id="AJAX-的使用"><a href="#AJAX-的使用" class="headerlink" title="AJAX 的使用"></a>AJAX 的使用</h3><h4 id="核心对象-XMLHttpRequest"><a href="#核心对象-XMLHttpRequest" class="headerlink" title="核心对象:XMLHttpRequest"></a>核心对象:XMLHttpRequest</h4><p>AJAX的所有操作都是通过该对象进行的</p><h4 id="搭建测试ajax的服务器"><a href="#搭建测试ajax的服务器" class="headerlink" title="搭建测试ajax的服务器"></a>搭建测试ajax的服务器</h4><p>新建任意名的文件夹（最好不用数字开头，不能有大写字母）</p><p>接着<code>使用 yarn  init （或者 npm init）</code>将当前项目文件夹变成符合npm规范的包</p><p>使用 <code>yarn express</code> 安装express </p><p>项目文件夹下新建一个serve.js用来当作服务器</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1. 引入express</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token comment">// 2.创建一个app实例对象</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 4.配置一个路由 （比如想响应get请求，就起一个 'test_get' 的名字 ,里面有两个对象，请求和响应）</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/test_get'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token comment">// 函数体</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello_test_get!!!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 3.绑定监听    端口号（一般4位数字） + 回调（err是错误对象，如果没有错误对象就证明服务器开启成功）</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试ajax请求的服务器开启成功了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动服务器（三种方式）：node serve  / nodemon  .\serve.js   / 使用第三方插件 Code Runner（右键 点击Run Code开启，快捷键 ctrl+alt+m 关闭服务）</p><p>浏览器地址栏输入查看：localhost:8080/test_get  (浏览器默认是get请求)</p><h4 id="ajax小试牛刀"><a href="#ajax小试牛刀" class="headerlink" title="ajax小试牛刀"></a>ajax小试牛刀</h4><p>ajax也是属于原生js的http请求，可以说是一种特殊的http请求。</p><p>项目根目录新建文件夹src，下新建 ‘1_ajax小试牛刀.html’文件，右键文件使用vscode的Live Server打开</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//...</span>    <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        #content <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            border<span class="token operator">:</span> <span class="token number">1</span>px solid black<span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>该页面是测试：ajax小试牛刀<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">&gt;</span>点我发送请求（原生js里的ajax的<span class="token constant">GET</span>请求）<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>        <span class="token comment">// 获取按钮</span>        <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>        <span class="token comment">// 给按钮绑定监听</span>        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 发送ajax请求 有如下几步：</span>                <span class="token comment">// 1.创建xhr实例对象</span>                <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 2.指定发送请求的：method、url</span>                xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'http://localhost:8080/test_get'</span><span class="token punctuation">)</span>                <span class="token comment">// 3.发送请求</span>                xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当点击按钮后控制台会报错，出现经典的跨域问题。（如果提示有…the serve responded with a status of 404 :5050/favicon.ico:1 (Not Found) 那么需要找一个ico图片放到项目文件根目录下即可）</p><p><strong>解决跨域：</strong></p><p>服务器中暴露静态资源</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1.引入express</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token comment">// 2.创建app实例对象</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 5.解决跨域:暴露静态资源</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>__dirname<span class="token operator">+</span><span class="token string">'/src'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 4.配置一个路由 （比如想响应get请求，就起一个 'test_get' 的名字 ,里面有两个对象，请求和响应）</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/test_get'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token comment">// 函数体</span>    <span class="token comment">// 这里设置一句话，检查是否有人请求了</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有人请求test_get了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello_test_get!!!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 3.监听</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试ajax请求的服务器开启成功了!测试地址如下'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8080/1_ajax小试牛刀.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在html文件中将发送请求的url改成 ‘ <a href="http://127.0.0.1:8080/test_get">http://127.0.0.1:8080/test_get</a> ‘，然后不使用vscode的Live Server打开，而是复制到浏览器使用serve.js的 ‘<a href="http://127.0.0.1:8080/1_ajax%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80.html%E2%80%99">http://127.0.0.1:8080/1_ajax小试牛刀.html’</a> 地址，同时要看到请求是否成功需要借助xhr的状态state来将xhr.response的结果返回给div中</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>该页面是测试：ajax小试牛刀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>点我发送请求（原生js里的ajax的GET请求）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">// 获取按钮</span>        <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span>        <span class="token comment">// 给按钮绑定监听</span>        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 发送ajax请求 有如下几步：</span>                <span class="token comment">// 1.创建xhr实例对象</span>                <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                        content<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h3&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>xhr<span class="token punctuation">.</span>response<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h3&gt;</span><span class="token template-punctuation string">`</span></span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment">// 2.指定发送请求的：method、url</span>                xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'http://127.0.0.1:8080/test_get'</span><span class="token punctuation">)</span>                <span class="token comment">// 3.发送请求</span>                xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="xhr的5种状态（了解）"><a href="#xhr的5种状态（了解）" class="headerlink" title="xhr的5种状态（了解）"></a>xhr的5种状态（了解）</h4><p>复制’1_ajax小试牛刀.html’文件，改名为‘2_xhr的5种状态.html’，其他步骤和1文件类似方法打开</p><p>注意服务器需要再写一行</p><p>//方便复制</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 4.监听</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试ajax请求的服务器开启成功了!测试地址如下'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8080/1_ajax小试牛刀.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8080/2_xhr的5种状态.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//方便复制</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页面html文件代码如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">//...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>该页面是测试：xhr的5种状态.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>点我发送请求（原生js里的ajax的GET请求）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">// 获取按钮</span>        <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span>        <span class="token comment">// 给按钮绑定监听</span>        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 发送ajax请求 有如下几步：</span>                <span class="token comment">// 1.创建xhr实例对象</span>                <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// xhr实例对象在实例出来的那一刻就是0,随着请求变化不断变化</span>                <span class="token comment">/*                    xhr内部有5种状态,5种状态值分别为:0、1、2、3、4                    0:实例出来的那一刻就是0,初始状态                    1:open已经调用,但是send没有调用,此时可以修改请求头内容                    2:send已经调用了,已经无法修改请求头                    3:已经回来部分数据,小的数据会在此阶段一次性接收完毕,较大的数据有待进一步接收,响应头回来了.                    4:数据全部接收完毕                   // getAllResponseHeaders获取所有响应头                */</span>                xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">// xhr的请求头api setRequestHeader //配置请求头:请求头中增加 key:value</span>                        <span class="token comment">// xhr.setRequestHeader('demo',123)</span>                        <span class="token comment">// alert('@')</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">// xhr.setRequestHeader('demo',123) //配置请求头:报错 因为2阶段无法修改请求头了</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3时接收到的数据'</span><span class="token punctuation">,</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3时接收到的响应头'</span><span class="token punctuation">,</span>xhr<span class="token punctuation">.</span><span class="token function">getAllResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                        content<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h3&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>xhr<span class="token punctuation">.</span>response<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h3&gt;</span><span class="token template-punctuation string">`</span></span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment">// 2.指定发送请求的：method、url</span>                xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'http://127.0.0.1:8080/test_get'</span><span class="token punctuation">)</span>                <span class="token comment">// 3.发送请求</span>                xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：请求成功的判断最好详细一点</p><p><code>if(xhr.readyState === 4 &amp;&amp; (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300)){</code></p><p>​    <code>//......</code></p><p><code>}</code>    </p><h4 id="ajax的get请求（掌握）"><a href="#ajax的get请求（掌握）" class="headerlink" title="ajax的get请求（掌握）"></a>ajax的get请求（掌握）</h4><p>复制’2_xhr的5种状态.html’文件，改名为‘3_ajax_get请求.html’，其他步骤和2文件类似方法打开</p><p>页面html文件代码:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//...</span><span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>该页面是测试：ajax_get请求<span class="token punctuation">.</span>html<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">&gt;</span>点我发送请求（原生js里的ajax的<span class="token constant">GET</span>请求）<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>        <span class="token comment">// 获取按钮</span>        <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span>        <span class="token comment">// 给按钮绑定监听</span>        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 发送ajax请求 有如下几步：</span>                <span class="token comment">// 1.创建xhr实例对象</span>                <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 绑定监听</span>                xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                            content<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h3&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>xhr<span class="token punctuation">.</span>response<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h3&gt;</span><span class="token template-punctuation string">`</span></span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment">// 2.指定发送请求的：method、url、参数</span>                <span class="token comment">/*                    1.形如：key=value&amp;key=value 就是query参数的urlencoded编码形式                    2.形如：/xx/xxx/老刘/18 就是params参数                */</span>                <span class="token comment">// xhr.open('GET','http://127.0.0.1:8080/test_get?name=老刘&amp;age=18')   //携带query参数</span>                xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'http://127.0.0.1:8080/test_get2/老刘/18'</span><span class="token punctuation">)</span>            <span class="token comment">//携带params参数</span>                <span class="token comment">// 3.发送请求</span>                xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务器代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1.引入express</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token comment">// 2.创建app实例对象</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 5.解决跨域:暴露静态资源</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>__dirname<span class="token operator">+</span><span class="token string">'/src'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 3.响应GET请求 -query参数</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/test_get'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token comment">// 函数体</span>    <span class="token comment">// 这里设置一句话，检查是否有人请求了</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有人请求test_get了--携带的query参数是：'</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello_test_get!!!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 3.响应GET请求 -params参数</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/test_get2/:name/:age'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token comment">// 函数体</span>    <span class="token comment">// 这里设置一句话，检查是否有人请求了</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有人请求test_get2了--携带的params参数是：'</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello_test_get2!!!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 4.监听</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试ajax请求的服务器开启成功了!测试地址如下'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8080/3_ajax_get请求.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ajax的post请求（掌握）"><a href="#ajax的post请求（掌握）" class="headerlink" title="ajax的post请求（掌握）"></a>ajax的post请求（掌握）</h4><p>复制’3_ajax_get请求.html’文件，改名为‘4_ajax_post请求.html’，其他步骤和3文件类似方法打开</p><p>页面html文件代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//...</span><span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>该页面是测试：ajax_post请求<span class="token punctuation">.</span>html<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">&gt;</span>点我发送请求（原生js里的ajax的<span class="token constant">POST</span>请求）<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>        <span class="token comment">// 获取按钮</span>        <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span>        <span class="token comment">// 给按钮绑定监听</span>        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 发送ajax请求 有如下几步：</span>                <span class="token comment">// 1.创建xhr实例对象</span>                <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 绑定监听</span>                xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                            content<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h3&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>xhr<span class="token punctuation">.</span>response<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h3&gt;</span><span class="token template-punctuation string">`</span></span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment">// 2.指定发送请求的：method、url、参数</span>                                <span class="token comment">// post 可以携带query params参数 和请求体body（body有两种编码形式 urlencoded 、json）</span>                <span class="token comment">// xhr.open('POST','http://127.0.0.1:8080/test_post?name=tom&amp;age=18')       // 携带query参数      </span>                xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'http://127.0.0.1:8080/test_post'</span><span class="token punctuation">)</span>                          <span class="token comment">// 不带参数   (参数放到下方请求体发送)      </span>                <span class="token comment">// 追加响应头用于标识携带请求体参数的编码形式 --urlencoded 形式 </span>                <span class="token comment">// xhr.setRequestHeader('Content-type','application/x-www-form-urlencoded')  </span>                                <span class="token comment">// 追加响应头用于标识携带请求体参数的编码形式 --json 形式</span>                xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span><span class="token string">'application/json'</span><span class="token punctuation">)</span>                                                   <span class="token comment">// 3.发送请求 （post请求可以携带query、params参数，但是一般不带，而是放到请求体里面） 请求体里用urlencoded / json编码形式</span>                <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>                    name<span class="token operator">:</span><span class="token string">'老刘'</span><span class="token punctuation">,</span>                    age<span class="token operator">:</span><span class="token number">18</span>                <span class="token punctuation">}</span>                <span class="token comment">// xhr.send('name=老刘&amp;age=18')     //携带 urlencoded 编码形式的请求体参数</span>                xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//携带 json 编码形式的请求体参数 --使用JSON.stringify()方法将对象转为json格式</span>        <span class="token punctuation">}</span>       <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务器代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1.引入express</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token comment">// 2.创建app实例对象</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 使用中间件express.urlencoded() 解析urlencoded编码形式的请求体参数</span><span class="token comment">// 简单说：如果想用express框架接收post请求所携带的请求体参数，需要借助中间件 express.urlencoded</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span>extended<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 使用中间件解析json编码形式的请求体参数</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 5.解决跨域:暴露静态资源</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>__dirname<span class="token operator">+</span><span class="token string">'/src'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 3.响应POST请求 -请求体参数(后端需要占位符) </span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/test_post'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有人请求test_post了,携带的请求体参数是:'</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello_test_post!!!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 4.监听</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试ajax请求的服务器开启成功了!测试地址如下'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8080/4_ajax_post请求.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git相关操作"><a href="#git相关操作" class="headerlink" title="git相关操作"></a>git相关操作</h2><p><strong>克隆仓库</strong></p><p>例：在一个名为student_ajax文件夹右键打开Git Bush Here 使用 git clone ‘仓库地址’，拿到公司代码 （此时克隆下来的文件里面有.git文件夹，该文件夹里边配置的是克隆的远程仓库的地址）</p><p>本地环境yarn 下载依赖</p><p>git add *   –将文件放到暂存区</p><p>git commit -m ‘描述干啥事情了’    –对刚才的操作进行注释</p><p>目前文件仅在本地git仓库里，还需要推送到线上仓库</p><p>git push origin master</p><p>当线上主线文件更新了之后，支线需要下载主线的最新版本，使用</p><p>git pull origin master 拉取代码 </p><p>那么这样拉取后本地文件将被线上文件覆盖，所以建议单独新建个文件夹存放克隆的的仓库，每次线上有更新就拉取代码到本地该文件夹里</p><p>借助vscode去操作git</p><h2 id="ajax解析json数据（了解）"><a href="#ajax解析json数据（了解）" class="headerlink" title="ajax解析json数据（了解）"></a>ajax解析json数据（了解）</h2><p><strong>推荐安装FeHelper(前端助手)插件到浏览器。</strong></p><p>新建’5_ajax_解析json数据.html’</p><p>页面html文件代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// ...</span>    <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>该页面是：解析json数据<span class="token punctuation">.</span>html<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">&gt;</span>点我发送请求（原生js里的ajax的<span class="token keyword">get</span>请求）<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>        <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span>        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 1.实例化xhr对象</span>            <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// 2.绑定监听</span>            xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">// 将json格式解析成对象 然后使用解构赋值</span>                       <span class="token comment">// 因为不知道后端那边的数据格式，假如后端是对象，直接使用JSON.parse（）就会报错 在3下方使用 xhr.responseType = 'json'解决</span>                        <span class="token keyword">const</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>                        content<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                            &lt;ul&gt;                                    &lt;li&gt;姓名：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;                                        &lt;li&gt;年龄：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;                                        &lt;li&gt;性别：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;                                    &lt;/ul&gt;                        </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">// 3.指定发送请求的：method、url (这里暂时不加参数)</span>            xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'http://127.0.0.1:8080/get_person'</span><span class="token punctuation">)</span>            <span class="token comment">// 因为不知道后端那边的数据格式， responseType用于指定返回数据的格式</span>            xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">'json'</span>            <span class="token comment">// 4.发送请求</span>            xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务器代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1.引入express</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token comment">// 2.创建app实例对象</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 使用中间件express.urlencoded() 解析urlencoded编码形式的请求体参数</span><span class="token comment">// 简单说：如果想用express框架接收post请求所携带的请求体参数，需要借助中间件 express.urlencoded</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span>extended<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 使用中间件解析json编码形式的请求体参数</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 5.解决跨域:暴露静态资源</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>__dirname<span class="token operator">+</span><span class="token string">'/src'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 3.响应get请求 </span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/get_person'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有人请求get_person了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'老刘'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token string">'18'</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">'女'</span><span class="token punctuation">}</span>     response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//response.send('hello')</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 4.监听</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试ajax请求的服务器开启成功了!测试地址如下'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8080/5_ajax_解析json数据.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="连续解构赋值"><a href="#连续解构赋值" class="headerlink" title="连续解构赋值"></a>连续解构赋值</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token comment">// 例子 想要得到c ？？</span>                <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>            a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>            b<span class="token operator">:</span><span class="token punctuation">{</span>                c<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token comment">// 方法1 --标准的解构赋值得到 2</span>        <span class="token comment">// const {c} = (obj.b)</span>        <span class="token comment">// console.log(c);   /</span>        <span class="token comment">// 方法2 --连续解构赋值</span>        <span class="token comment">// const {b:{c}} = obj</span>        <span class="token comment">// console.log(c); // 得到 2</span>        <span class="token comment">// 新需求不喜欢用c名称，改为value </span>        <span class="token comment">//  连续解构赋值 + 重命名</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span>b<span class="token operator">:</span><span class="token punctuation">{</span>c<span class="token operator">:</span>value<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">=</span> obj        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 得到 2</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理IE浏览器-get请求缓存问题（了解）"><a href="#处理IE浏览器-get请求缓存问题（了解）" class="headerlink" title="处理IE浏览器-get请求缓存问题（了解）"></a>处理IE浏览器-get请求缓存问题（了解）</h2><p>协商缓存 –一般浏览器中，当页面第一次向服务器发起请求后，服务器返回数据给页面，在控制台终端Network中可以看到请求的状态码是200。此时，当服务器中的数据更新（改变）后，页面第二次向服务器发起请求，页面数据随之变化，但是第三次点击按钮，控制台终端的状态码显示304（因为这次和上一次请求的地址都没有变化，浏览器会认为返回的信息依然和之前一样，但还是会问一问服务器，数据是否有变化，此时若服务器返回没有变化，那么浏览器会从自己缓存中读取数据，304就出现了） 所以也叫协商缓存。</p><p>但是！<strong>IE浏览器</strong>，在遇到该问题时候非常武断，直接不问服务器直接拿之前的数据给页面用。–IE的强缓存机制</p><p>解决方式：加上了时间戳参数，忽悠IE浏览器每次的请求地址不同。即使服务器接口没有参数，默认不处理请求来的参数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 指定发送请求的：method、url (这里暂时不加参数)</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'http://127.0.0.1:8080/get_person?t='</span><span class="token operator">+</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="请求异常与超时的处理"><a href="#请求异常与超时的处理" class="headerlink" title="请求异常与超时的处理"></a>请求异常与超时的处理</h2><p>新建’ 7_ajax请求的异常与超时处理.html ‘文件</p><p>页面html文件代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>该页面是：ajax请求的异常与超时处理<span class="token punctuation">.</span>html<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">&gt;</span>点我发送请求（原生js里的ajax的<span class="token keyword">get</span>请求）<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>        <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span>        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 1.实例化xhr对象</span>            <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// 2.绑定监听</span>            xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">const</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">}</span> <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response                        content<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                            &lt;ul&gt;                                &lt;li&gt;姓名：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;                                    &lt;li&gt;年龄：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;                                    &lt;li&gt;性别：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;                                &lt;/ul&gt;                        </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">// 3.指定发送请求的：method、url (这里暂时不加参数)</span>            xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'http://127.0.0.1:8080/get_person_delay?t='</span><span class="token operator">+</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">// 因为不知道后端那边的数据格式， responseType用于指定返回数据的格式</span>            xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">'json'</span>            <span class="token comment">// 网络不好的处理 --配置出错的回调</span>            xhr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'请求出错了，可能当前网络不稳定请稍后再试'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//超时时间 --这个api意思是仅请求2秒，2秒后没有数据返回就取消请求</span>            xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">2000</span>            <span class="token comment">// 超时后的回调</span>            xhr<span class="token punctuation">.</span><span class="token function-variable function">ontimeout</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'网速不给力，请切换网络'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token comment">// 4.发送请求</span>            xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务器代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 3.响应get请求 --延时响应</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/get_person_delay'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有人请求get_person了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'海峰6'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token string">'18'</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">'女'</span><span class="token punctuation">}</span>    <span class="token comment">// 3秒后返回数据</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ajax取消请求（掌握）"><a href="#ajax取消请求（掌握）" class="headerlink" title="ajax取消请求（掌握）"></a>ajax取消请求（掌握）</h2><p>新建  ’ 8_ajax取消请求.html ‘ </p><p>页面html文件代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// ...</span>    <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>该页面是：ajax取消请求<span class="token punctuation">.</span>html<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">&gt;</span>点我发送请求（原生js里的ajax的<span class="token keyword">get</span>请求）<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn2"</span><span class="token operator">&gt;</span>取消请求<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>        <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> btn2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn2'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> xhr        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 1.实例化xhr对象</span>            xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// 2.绑定监听</span>            xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">const</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">}</span> <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response                        content<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                            &lt;ul&gt;                                &lt;li&gt;姓名：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;                                    &lt;li&gt;年龄：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;                                    &lt;li&gt;性别：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;                                &lt;/ul&gt;                        </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">// 3.指定发送请求的：method、url (这里暂时不加参数)</span>            xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'http://127.0.0.1:8080/get_person_delay?t='</span><span class="token operator">+</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">// 因为不知道后端那边的数据格式， responseType用于指定返回数据的格式</span>            xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">'json'</span>            <span class="token comment">// 网络不好的处理 --配置出错的回调</span>            xhr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'请求出错了，可能当前网络不稳定请稍后再试'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//超时时间 --这个api意思是仅请求2秒，2秒后没有数据返回就取消请求</span>            xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">2000</span>            <span class="token comment">// 超时后的回调</span>            xhr<span class="token punctuation">.</span><span class="token function-variable function">ontimeout</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'网速不给力，请切换网络'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token comment">// 4.发送请求</span>            xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// xhr.abort() //这里只要发送请求的次数多还是有概率会取消不了</span>        <span class="token punctuation">}</span> <span class="token comment">//点击第二个按钮后触发取消请求</span>        btn2<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             xhr<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务端代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 3.响应get请求</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/get_person_delay'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有人请求get_person了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'海峰6'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token string">'18'</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">'女'</span><span class="token punctuation">}</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="如何避免用户发送重复请求（掌握）"><a href="#如何避免用户发送重复请求（掌握）" class="headerlink" title="如何避免用户发送重复请求（掌握）"></a>如何避免用户发送重复请求（掌握）</h2><p>新建  ’ 9_避免多次重复请求.html ‘ </p><p>页面html文件代码如下：</p><p>思路：点击按钮前，定义一个isLoading变量</p><p>代码执行顺序：当第一次点击按钮后，先判断isLoading变量，为假就取消。然后实例化xhr，指定发送请求的格式参数，发送请求，接着关键一点就是将isLoading变量变为真，（这样当下次点击按钮时候，isLoading变量为真就会取消下次的请求）然后判断服务器那边的状态码将isLoading变量变为假。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// ...</span>    <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>该页面是：避免多次重复请求<span class="token punctuation">.</span>html<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">&gt;</span>点我发送请求（原生js里的ajax的<span class="token keyword">get</span>请求）<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>        <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> xhr        <span class="token comment">// 声明一个变量，假如它为真代表正在发送请求中，就可以在之后取消请求</span>        <span class="token keyword">let</span> isLoading        <span class="token comment">// 每次点击按钮 xhr将被重新实例化，即每次都被替换成新的xhr对象</span>        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">// 这里代表第一次点击按钮 由于isLoading为undefin 所以不会取消请求</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>isLoading<span class="token punctuation">)</span> xhr<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 1.实例化xhr对象</span>                xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 4. 这是判断服务器那边的状态码 （绑定监听）</span>                xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            isloading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">const</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">}</span> <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response                            content<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                                &lt;ul&gt;                                    &lt;li&gt;姓名：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;                                        &lt;li&gt;年龄：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;                                        &lt;li&gt;性别：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;                                    &lt;/ul&gt;                            </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment">// 2.指定发送请求的：method、url (这里暂时不加参数)</span>                xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'http://127.0.0.1:8080/get_person_delay'</span><span class="token punctuation">)</span>                <span class="token comment">// 因为不知道后端那边的数据格式， responseType用于指定返回数据的格式</span>                xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">'json'</span>                <span class="token comment">// 3.发送请求</span>                xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                isLoading <span class="token operator">=</span> <span class="token boolean">true</span>                      <span class="token punctuation">}</span>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务端代码:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 3.响应get请求 --延时响应</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/get_person_delay'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有人请求get_person了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'海峰6'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token string">'18'</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">'女'</span><span class="token punctuation">}</span>    <span class="token comment">// 3秒后返回数据</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="jQuery封装的ajax（了解）"><a href="#jQuery封装的ajax（了解）" class="headerlink" title="jQuery封装的ajax（了解）"></a>jQuery封装的ajax（了解）</h2><p>新建 ‘10_jquery封装的ajax.html’</p><p>打开浏览器 –下载好jquerymini.js放到文件中引入</p><p>页面html文件代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// ...</span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./js/jquery.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>该页面是：jQuery封装的ajax<span class="token punctuation">.</span>html<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn1"</span><span class="token operator">&gt;</span>点我发送请求（jQuery<span class="token operator">-</span>ajax<span class="token operator">-</span><span class="token keyword">get</span>）<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn2"</span><span class="token operator">&gt;</span>点我发送请求（jQuery<span class="token operator">-</span>ajax<span class="token operator">-</span>post）<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>        <span class="token keyword">const</span> btn1 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn1'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> btn2 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn2'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#content'</span><span class="token punctuation">)</span>        btn1<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 使用jQyuery发送get请求 --完整版写法</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                url<span class="token operator">:</span> <span class="token string">'http://127.0.0.1:8080/test_jquery_get'</span><span class="token punctuation">,</span> <span class="token comment">//请求地址</span>                method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>                                <span class="token comment">//请求方式 --不写的话默认也是get</span>                data<span class="token operator">:</span> <span class="token punctuation">{</span> school<span class="token operator">:</span> <span class="token string">'麻省理工学院'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token comment">//携带的数据</span>                dataType<span class="token operator">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>                             <span class="token comment">//配置响应数据格式 --将服务器拿到的json数据类型转换成对象</span>                timeout<span class="token operator">:</span><span class="token string">'2000'</span><span class="token punctuation">,</span>                               <span class="token comment">//指定超时的时间</span>                <span class="token comment">// 成功的回调函数</span>                <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> responseText<span class="token punctuation">,</span> xhr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">//第二个参数 responseText --代表本次响应（成功与否）的文字 第三个参数是xhr</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> responseText<span class="token punctuation">,</span> xhr<span class="token punctuation">)</span><span class="token punctuation">;</span>                    content<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;汽车名：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,价格：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token punctuation">.</span>price<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment">// 失败的回调</span>                <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">xhr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                           <span class="token comment">//里边可以有 xhr参数</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求出错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment">// 使用jQyuery发送get请求 携带query参数 --简版写法</span>            <span class="token comment">// 如果是params请求  /test_jquery_get/bilibili</span>            <span class="token comment">// $.get('http://127.0.0.1:8080/test_jquery_get',{school: '麻省理工学院' },(data)=&gt;{</span>            <span class="token comment">//     console.log(data);</span>            <span class="token comment">// },'json')</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>        btn2<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 使用jQyuery发送 post请求 --完整版写法</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                url<span class="token operator">:</span> <span class="token string">'http://127.0.0.1:8080/test_jquery_post'</span><span class="token punctuation">,</span> <span class="token comment">//请求地址</span>                method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>                                <span class="token comment">//请求方式 --不写的话默认也是get</span>                data<span class="token operator">:</span> <span class="token punctuation">{</span> school<span class="token operator">:</span> <span class="token string">'麻省理工学院'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token comment">//携带的数据</span>                dataType<span class="token operator">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>                             <span class="token comment">//配置响应数据格式 --将服务器拿到的json数据类型转换成对象</span>                timeout<span class="token operator">:</span><span class="token string">'2000'</span><span class="token punctuation">,</span>                               <span class="token comment">//指定超时的时间</span>                <span class="token comment">// 成功的回调函数</span>                <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> responseText<span class="token punctuation">,</span> xhr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">//第二个参数 responseText --代表本次响应（成功与否）的文字 第三个参数是xhr</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> responseText<span class="token punctuation">,</span> xhr<span class="token punctuation">)</span><span class="token punctuation">;</span>                    content<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;汽车名：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,价格：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token punctuation">.</span>price<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment">// 失败的回调</span>                <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">xhr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                           <span class="token comment">//里边可以有 xhr参数</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求出错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment">// 使用jQyuery发送post请求 携带query参数 --简版写法</span>            <span class="token comment">// 如果是params请求  /test_jquery_post/bilibili</span>            <span class="token comment">//$.post('http://127.0.0.1:8080/test_jquery_post',{school: '麻省理工学院' },(data)=&gt;{</span>                <span class="token comment">//console.log(data);</span>                <span class="token comment">//content.append(`&lt;div&gt;汽车名：${data.name},价格：${data.price}&lt;/div&gt;`)</span>            <span class="token comment">//},'json')</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务端代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 响应GET请求 --为jQuery准备： 接收query参数  如果是params参数 --'/test_jquery_get/:school' console.log('有人请求test_jquery_get了',request.params);</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/test_jquery_get'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有人请求test_jquery_get了'</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> car<span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'马自达.阿特兹'</span><span class="token punctuation">,</span>price<span class="token operator">:</span><span class="token string">'25w'</span><span class="token punctuation">}</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 响应POST请求 --为jQuery准备： 响应体：request.body</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/test_jquery_post'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有人请求test_jquery_post了'</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> car<span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'马自达.阿特兹'</span><span class="token punctuation">,</span>price<span class="token operator">:</span><span class="token string">'25w'</span><span class="token punctuation">}</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="演示回调地狱（了解）"><a href="#演示回调地狱（了解）" class="headerlink" title="演示回调地狱（了解）"></a>演示回调地狱（了解）</h2><p>新建 ’ 11_演示回调地狱.html ‘</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span><span class="token number">11</span>_演示回调地狱<span class="token punctuation">.</span>html<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./js/jquery.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>该页面是：演示回调地狱<span class="token punctuation">.</span>html（看代码）<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>需求：点击按钮<span class="token number">1</span>之后发送一条请求，成功后发第二条，第二条成功后再发第三条，<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn1"</span><span class="token operator">&gt;</span>点我发送请求（jQuery<span class="token operator">-</span>ajax<span class="token operator">-</span><span class="token keyword">get</span>）<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>        <span class="token keyword">const</span> btn1 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn1'</span><span class="token punctuation">)</span>        btn1<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 使用jQyuery发送get请求 携带query参数 --简版写法</span>            $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8080/test_jquery_get'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>school<span class="token operator">:</span> <span class="token string">'麻省理工学院'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                        $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8080/test_jquery_get'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>school<span class="token operator">:</span> <span class="token string">'麻省理工学院'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8080/test_jquery_get'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>school<span class="token operator">:</span> <span class="token string">'麻省理工学院'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>                                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">'json'</span><span class="token punctuation">)</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">'json'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">'json'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="跨域问题与同源策略总结："><a href="#跨域问题与同源策略总结：" class="headerlink" title="跨域问题与同源策略总结："></a>跨域问题与同源策略总结：</h2><h3 id="为什么有跨域问题？"><a href="#为什么有跨域问题？" class="headerlink" title="为什么有跨域问题？"></a>为什么有跨域问题？</h3><ul><li><p>原因是浏览器为了安全，而采用的同源策略。</p><p>浏览器中有一个ajax引擎，只要xhr请求必须走ajax引擎，ajax引擎听一个叫同源策略的话，当前后端的端口不同时，浏览器阻止页面收到请求。</p></li></ul><h3 id="什么是同源策略？"><a href="#什么是同源策略？" class="headerlink" title="什么是同源策略？"></a>什么是同源策略？</h3><ul><li><p>同源策略是由<strong>Netscape</strong>（网景公司）提出的一个著名安全策略，现在所有支持JavaScript的浏览器都会使用这个策略。</p></li><li><p>Web是构建同源策略协议基础之上的，浏览器只是针对同源策略的一种实现。</p></li><li><p>所谓同源是指：<strong>协议、域名（IP），端口必须要完全相同。</strong></p></li></ul><p>​        即：协议、域名（IP）、端口都相同，才能算是在<strong>同一个域里</strong></p><p><strong>备注：</strong>规则举例如下（假设已有网站地址为：<a href="http://study.cn/">http://study.cn</a>  不写端口号时，http会使用默认的）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">请求地址：形式 结果http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>study<span class="token punctuation">.</span>cn<span class="token operator">/</span>test<span class="token operator">/</span>a<span class="token punctuation">.</span>html协议、域名、端口均相同      成功http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>study<span class="token punctuation">.</span>cn<span class="token operator">/</span>user<span class="token operator">/</span>a<span class="token punctuation">.</span>html协议、域名、端口均相同   成功http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>a<span class="token punctuation">.</span>study<span class="token punctuation">.</span>cn<span class="token operator">/</span>user<span class="token operator">/</span>a<span class="token punctuation">.</span>html域名不同      失败http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>study<span class="token punctuation">.</span>cn<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>tset<span class="token operator">/</span>a<span class="token punctuation">.</span>html域名不同      失败http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>study<span class="token punctuation">.</span>cn<span class="token operator">/</span>user<span class="token operator">/</span>a<span class="token punctuation">.</span>html协议、域名、端口均相同   成功https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>study<span class="token punctuation">.</span>cn<span class="token operator">/</span>tset<span class="token operator">/</span>a<span class="token punctuation">.</span>html协议不同      失败<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="没有同源策略的危险场景："><a href="#没有同源策略的危险场景：" class="headerlink" title="没有同源策略的危险场景："></a>没有同源策略的危险场景：</h3><p>危险场景：</p><p>​        有一天，你刚睡醒，收到一封邮件，说你的银行账号有风险，赶紧点进<a href="http://www.yinghang.com改密码.你着急的赶紧点击进去,还是熟悉的银行登陆界面,你果断输入账号密码后,还没准备看里边的余额,睡眼朦胧的你想起了平时访问的银行网站是/">www.yinghang.com改密码。你着急的赶紧点击进去，还是熟悉的银行登陆界面，你果断输入账号密码后，还没准备看里边的余额，睡眼朦胧的你想起了平时访问的银行网站是</a> <a href="http://www.yinhang.com,不是现在访问这个。随后你收到短信，钱没了，这个钓鱼网站做了什么呢？">www.yinhang.com,不是现在访问这个。随后你收到短信，钱没了，这个钓鱼网站做了什么呢？</a> 大概是如下思路：</p><p>新建 ’ 12_演示没有同源策略的危险场景.html ‘</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>iframe id<span class="token operator">=</span><span class="token string">"baidu"</span> src<span class="token operator">=</span><span class="token string">"https://www.baidu.com"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>      <span class="token keyword">const</span> iframe <span class="token operator">=</span> window<span class="token punctuation">.</span>frames<span class="token punctuation">[</span><span class="token string">'baidu'</span><span class="token punctuation">]</span>      <span class="token keyword">const</span> inputNode <span class="token operator">=</span> iframe<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'输入铭感信息的input的id'</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputNode<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="非同源受到哪些限制？"><a href="#非同源受到哪些限制？" class="headerlink" title="非同源受到哪些限制？"></a>非同源受到哪些限制？</h3><ul><li><p>Cookie不能读取；</p></li><li><p>DOM无法获得；</p></li><li><p>Ajax请求不能获取数据；</p></li></ul><h2 id="JSONP解决跨域（掌握）"><a href="#JSONP解决跨域（掌握）" class="headerlink" title="JSONP解决跨域（掌握）"></a>JSONP解决跨域（掌握）</h2><p><strong>JSONP是什么</strong></p><p>JSONP (JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明才智开发出来，只支持get请求</p><p>同源策略限制了xhr、Cookie、DOM，但是在网页有一些<strong>标签</strong>具有跨域能力，比如：img, link, iframe, scriptJ。SONP就是利用<strong>script</strong>标签的跨域能力来发送请求的</p><p>新建文件‘13_jsonp解决跨域.html’</p><p>代码如下：</p><p>一切的前提是定义了demo()，当点击按钮后创建一个script节点并且src属性为请求的地址，将节点放入页面，最后在给window添加demo方法。</p><p>解决的原理是绕开了xhr，借助script标签发请求不收同源策略的限制。有一种前端定义函数，后端调用函数的感觉。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这里的jquery可以发送跨域请求 <span class="token operator">--</span>因为是在script的src下支持跨域 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">&gt;</span>点我获取数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 1.创建script节点</span>            <span class="token keyword">const</span> scriptNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span>            <span class="token comment">// 2.给节点指定src属性（请求地址）</span>            scriptNode<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://localhost:8080/test_jsonp'</span>            <span class="token comment">// 3.将节点放入页面</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>scriptNode<span class="token punctuation">)</span>            <span class="token comment">// 4.准备好一个函数</span>            window<span class="token punctuation">.</span><span class="token function-variable function">demo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务端代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 响应get请求 --为jsonp跨域准备</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/test_jsonp'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'tpm'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">}</span>    <span class="token comment">// 想将一个对象变成字符有两种方式：</span>    <span class="token comment">// 1、toString() 方法         但是人类一般接受不了 --demo([object object])</span>    <span class="token comment">// 2、JSON.stringify() 方法</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">demo(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完善JSONP"><a href="#完善JSONP" class="headerlink" title="完善JSONP"></a>完善JSONP</h2><p>优化：</p><p>1、 假如前端的函数名更改了，后端也要更改一次就很麻烦     –需要优化写法</p><p>2、前边每次点击按钮都会动态创建了一个script标签               –需要移除已经使用过的script节点</p><p>页面代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这里的jquery可以发送跨域请求 <span class="token operator">--</span>因为是在script的src下支持跨域 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>当前页面一定不要用服务器去打开，因为要制造跨域问题，用jsonp解决问题<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">&gt;</span>点我获取数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 1.创建script节点</span>            <span class="token keyword">const</span> scriptNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span>            <span class="token comment">// 2.给节点指定src属性（请求地址） 这里的key使用callback命名是因为前端请求，后端返回的数据是一段可以执行的js代码，这段代码触发了peiqi函数的调用</span>            scriptNode<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://localhost:8080/test_jsonp?callback=peiqi'</span>             <span class="token comment">// 3.将节点放入页面</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>scriptNode<span class="token punctuation">)</span>            <span class="token comment">// 4.准备好一个函数</span>            window<span class="token punctuation">.</span><span class="token function-variable function">peiqi</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 5.（优化）移除已经使用过的script节点</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>scriptNode<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务端代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 响应get请求 --为jsonp跨域准备</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/test_jsonp'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>callback<span class="token punctuation">}</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>query    <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'tpm'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'jery'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token string">'16'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>    <span class="token comment">// 这样写的优势是前端的函数名随便更改，后端这里不需要改</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>callback<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSONP面试问题："><a href="#JSONP面试问题：" class="headerlink" title="JSONP面试问题："></a><strong>JSONP面试问题：</strong></h3><h4 id="JSON-和-JSONP有关系吗？"><a href="#JSON-和-JSONP有关系吗？" class="headerlink" title="JSON 和 JSONP有关系吗？"></a><strong>JSON 和 JSONP有关系吗？</strong></h4><p>有一定关系，但是他俩是两回事儿。JSON是一种存储和交互的一种格式，JSONP是后端一种解决跨域的方式。他俩的关系是因为后端返回数据的时候，必须将数据变为JSON字符串。</p><h4 id="用JSONP去解决跨域也是用到了xhr对吗？"><a href="#用JSONP去解决跨域也是用到了xhr对吗？" class="headerlink" title="用JSONP去解决跨域也是用到了xhr对吗？"></a><strong>用JSONP去解决跨域也是用到了xhr对吗？</strong></h4><p>不对，JSONP解决跨域根本没用到xhr</p><h4 id="JSONP解决跨域有什么缺点？"><a href="#JSONP解决跨域有什么缺点？" class="headerlink" title="JSONP解决跨域有什么缺点？"></a><strong>JSONP解决跨域有什么缺点？</strong></h4><p>后端需要配合前端去拿到callback函数名，后端需要配合前端将数据变成JSON格式，后端需要配合前端写成函数调用的形式，简单来说前后端都挺麻烦。</p><h2 id="jQuery封装的JSONP（了解）"><a href="#jQuery封装的JSONP（了解）" class="headerlink" title="jQuery封装的JSONP（了解）"></a>jQuery封装的JSONP（了解）</h2><p><strong>用jQuery去发送一个JSONP请求</strong>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span><span class="token number">14</span>_jQuery封装的<span class="token constant">JSONP</span><span class="token punctuation">.</span>html<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./js/jquery.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>当前页面一定不要用服务器去打开，因为要制造跨域问题，用jQuery封装的<span class="token constant">JSONP</span>解决<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">&gt;</span>点我获取数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">const</span> btn <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span>        btn<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>            $<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">'http://localhost:8080/test_jsonp?callback=?'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CORS-（后端技术）解决跨域（掌握）"><a href="#CORS-（后端技术）解决跨域（掌握）" class="headerlink" title="CORS （后端技术）解决跨域（掌握）"></a>CORS （后端技术）解决跨域（掌握）</h2><h4 id="CORS-是什么？"><a href="#CORS-是什么？" class="headerlink" title="CORS 是什么？"></a>CORS 是什么？</h4><p>​        CORS (Cross-Origin Resource Sharing), 跨域资源共享。CORS 是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持 get 和 post 等请求。跨域资源共享标准新增了一组 HTTP  首部字段（响应头），允许服务器声明哪些源站通过浏览器有权限访问哪些资源</p><h4 id="CORS-怎么工作的？"><a href="#CORS-怎么工作的？" class="headerlink" title="CORS 怎么工作的？"></a>CORS 怎么工作的？</h4><p>​        CORS 是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行。</p><h4 id="CORS-的使用"><a href="#CORS-的使用" class="headerlink" title="CORS 的使用"></a>CORS 的使用</h4><p>新建 ‘ 15_测试cors解决跨域.html ’文件</p><p>代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// ...</span>    <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>当前页面一定不要用服务器去打开，因为要制造跨域问题，测试cors解决跨域<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">&gt;</span>点我获取数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>        <span class="token comment">// 获取按钮</span>        <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span>        <span class="token comment">// 给按钮绑定监听</span>        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 发送ajax请求 有如下几步：</span>                <span class="token comment">// 1.创建xhr实例对象</span>                <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span><span class="token function">getAllResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment">// 2.指定发送请求的：method、url</span>                xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'http://127.0.0.1:8080/test_get'</span><span class="token punctuation">)</span>                <span class="token comment">// 3.发送请求</span>                xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        主要是服务端的设置：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 3.响应GET请求 -可以接收query 参数   request,response --请求、响应对象</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/test_get'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有人请求test_get了--携带的query参数是：'</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span><span class="token string">'http://127.0.0.1:5500'</span><span class="token punctuation">)</span> <span class="token comment">// 只允许这个 http://127.0.0.1:5500 网站进行跨域请求</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Expose-Headers'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token comment">// 把所有的响应头都交给跨域的网站</span>    <span class="token comment">// response.setHeader('Access-Control-Allow-Origin','*') // '*' 任何网站都可以来这个接口拿数据</span>    <span class="token comment">// 这里设置一句话，检查是否有人请求了</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello_test_get!!!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="发送-put-请求"><a href="#发送-put-请求" class="headerlink" title="发送 put 请求"></a>发送 put 请求</h2><p>新建文件 ‘16_ajax_put请求.html’</p><p>文件代码为：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// ...</span>    <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>该页面是测试：ajax_put请求<span class="token punctuation">.</span>html<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">&gt;</span>点我发送请求（原生js里的ajax的<span class="token constant">PUT</span>请求）<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>        <span class="token comment">// 获取按钮</span>        <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span>        <span class="token comment">// 给按钮绑定监听</span>        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 发送ajax请求 有如下几步：</span>                <span class="token comment">// 1.创建xhr实例对象</span>                <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 绑定监听</span>                xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                            content<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h3&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>xhr<span class="token punctuation">.</span>response<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h3&gt;</span><span class="token template-punctuation string">`</span></span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'PUT'</span><span class="token punctuation">,</span><span class="token string">'http://127.0.0.1:8080/test_put'</span><span class="token punctuation">)</span>                           <span class="token comment">// 3.发送请求</span>                xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务端代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 响应 put请求</span>app<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'/test_put'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Expose-Headers'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token comment">// 把所有的响应头都交给跨域的网站</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span>   <span class="token comment">// '*' 任何网站都可以来这个接口拿数据</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello_tset_put'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假如此时使用 open with live serve打开文件，将会显示跨域问题，即仅仅如上设置服务端是没有解决 put请求的跨域问题   –(预请求失败)</p><p>因为get、put属于http里的简单请求，不存在嗅探请求（也叫预请求 –在请求真正发出之前要进行一个预请求的动作  预解析 –在代码真正执行之前有人扫了一遍代码），put和delete有预请求这种嗅探请求。同时复杂请求可以检查服务器的性能，使用HTTP的OPTIONS方法，因此目前服务端没有写这个方法就会失败。所以可以在服务端的put请求之前再写一个options请求</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 预请求的方式</span>app<span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token string">'/test_put'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span>   <span class="token comment">// '*' 任何网站都可以来这个接口拿数据</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Expose-Headers'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token comment">// 把所有的响应头都交给跨域的网站</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Methods'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span>   <span class="token comment">// 预请求 这里代表哪些请求可以跨域 '*'代表任何请求都可以</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'我性能很好'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 响应 put请求</span>app<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'/test_put'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Expose-Headers'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token comment">// 把所有的响应头都交给跨域的网站</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span>   <span class="token comment">// '*' 任何网站都可以来这个接口拿数据</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello_tset_put'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：掌握的需要掌握，了解的需要了解</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AJAX-入门&quot;&gt;&lt;a href=&quot;#AJAX-入门&quot; class=&quot;headerlink&quot; title=&quot;AJAX 入门&quot;&gt;&lt;/a&gt;AJAX 入门&lt;/h1&gt;&lt;h2 id=&quot;AJAX-简介&quot;&gt;&lt;a href=&quot;#AJAX-简介&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Ajax" scheme="https://wuzimo233.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wuzimo233.github.io/posts/0.html"/>
    <id>https://wuzimo233.github.io/posts/0.html</id>
    <published>2022-05-26T07:29:06.527Z</published>
    <updated>2022-06-16T03:09:31.092Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目的技术栈展示-以及项目的核心重点部分"><a href="#项目的技术栈展示-以及项目的核心重点部分" class="headerlink" title="项目的技术栈展示 以及项目的核心重点部分"></a>项目的技术栈展示 以及项目的核心重点部分</h1><p><img src="./images/8.png" alt="项目技术栈"></p><ol><li>项目搭建+使用element实现首页布局</li><li>顶部导航菜单及与左侧导航联动的面包屑实现</li><li>封装一个ECharts组件 </li><li>封装一个Form表单组件和Table表格组件 </li><li>企业开发之权限管理思路讲解</li></ol><h1 id="一、前置所需"><a href="#一、前置所需" class="headerlink" title="一、前置所需"></a>一、前置所需</h1><h2 id="1、安装node-js"><a href="#1、安装node-js" class="headerlink" title="1、安装node.js"></a>1、安装node.js</h2><p>进入官网下载<a href="http://nodejs.cn/">Node.js 中文网 (nodejs.cn)</a>node.js</p><h2 id="2、安装-cnpm"><a href="#2、安装-cnpm" class="headerlink" title="2、安装 cnpm"></a>2、安装 cnpm</h2><p>1、说明：npm（node package manager）是nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）；</p><p>2、使用npm安装插件：命令提示符执行npm install <name> </name></p><p>3、选装 cnpm 因为npm安装插件是从国外服务器下载，受网络影响大，可能出现异常，如果npm的服务器在中国就好了，所以我们乐于分享的淘宝团队干了这事！</p><p>安装：</p><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p>输入cnpm -v，可以查看当前cnpm版本</p><p>PS:</p><p><a href="https://yarn.bootcss.com/">yarn</a>是个包管理器，是facebook发布的一款取代npm的包管理工具</p><p>//npm安装yarn</p><p><code>npm install -g yarn</code></p><h2 id="3、脚手架的搭建（命令行工具-cli）"><a href="#3、脚手架的搭建（命令行工具-cli）" class="headerlink" title="3、脚手架的搭建（命令行工具 cli）"></a>3、脚手架的搭建（命令行工具 cli）</h2><p><strong>Vue CLI</strong> 是一个基于 Vue.js 进行快速开发的完整系统</p><p>Vue CLI 的包名称由 <code>vue-cli</code> 改成了 <code>@vue/cli</code>。 如果你已经全局安装了旧版本的 <code>vue-cli</code> (1.x 或 2.x)，你需要先通过 <code>npm uninstall vue-cli -g</code> 或 <code>yarn global remove vue-cli</code> 卸载它。</p><p><strong>Node 版本要求：</strong></p><p>Vue CLI 4.x 需要 <a href="https://nodejs.org/">Node.js</a> v8.9 或更高版本 (推荐 v10 以上)。你可以使用 <a href="https://github.com/tj/n">n</a>，<a href="https://github.com/creationix/nvm">nvm</a> 或 <a href="https://github.com/coreybutler/nvm-windows">nvm-windows</a> 在同一台电脑中管理多个 Node 版本。</p><p>可以使用下列任一命令安装这个新的包：</p><pre class="line-numbers language-none"><code class="language-none">npm install -g @vue/cli# 或者yarn global add @vue/cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果不喜欢当前的脚手架版本，可以使用以下代码回退（我使用的是cli 4.5.17版本）</p><pre class="line-numbers language-none"><code class="language-none">npm uninstall -g vue-cli #删除npm install -g @vue/cli@4.5.17 #安装指定版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4、创建项目"><a href="#4、创建项目" class="headerlink" title="4、创建项目"></a>4、创建项目</h2><p><code>vue create vue-manage-me</code></p><p>选择的是默认vue2.0安装</p><p>dafault (babel,eslint)</p><h2 id="5、启动项目"><a href="#5、启动项目" class="headerlink" title="5、启动项目"></a>5、启动项目</h2><p>cd+项目名进入项目路径</p><p>使用npm run serve 运行</p><h2 id="6、element-ui的使用"><a href="#6、element-ui的使用" class="headerlink" title="6、element-ui的使用"></a>6、element-ui的使用</h2><ul><li>网页直接使用</li><li>脚手架中使用<ul><li>全部引入</li><li>按需引入</li></ul></li></ul><h3 id="1、网页直接使用"><a href="#1、网页直接使用" class="headerlink" title="1、网页直接使用"></a>1、网页直接使用</h3><p>是在html单文件中引入vue.js、element.css、element.js、和需要的便签组件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token keyword">import</span> <span class="token constant">CSS</span> <span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"https://unpkg.com/element-ui/lib/theme-chalk/index.css"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>button @click<span class="token operator">=</span><span class="token string">"visible = true"</span><span class="token operator">&gt;</span>Button<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>dialog <span class="token operator">:</span>visible<span class="token punctuation">.</span>sync<span class="token operator">=</span><span class="token string">"visible"</span> title<span class="token operator">=</span><span class="token string">"Hello world"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Try Element<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>dialog<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token keyword">import</span> Vue before Element <span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./vue.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token keyword">import</span> JavaScript <span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://unpkg.com/element-ui/lib/index.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>             visible<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-、脚手架全部引入"><a href="#2-、脚手架全部引入" class="headerlink" title="2 、脚手架全部引入"></a>2 、脚手架全部引入</h3><p>在 main.js 中写入以下内容：缺点是打包后体积增加，优点是使用快捷方便</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-、脚手架局部引入"><a href="#3-、脚手架局部引入" class="headerlink" title="3 、脚手架局部引入"></a>3 、脚手架局部引入</h3><p>在 main.js 中写入以下内容：需要用到什么组件便签就增加什么标签，缺点是较麻烦</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>Button<span class="token punctuation">,</span>Radio<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Radio<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、Vue-Router路由的使用"><a href="#二、Vue-Router路由的使用" class="headerlink" title="二、Vue Router路由的使用"></a>二、Vue Router路由的使用</h1><h2 id="1、介绍："><a href="#1、介绍：" class="headerlink" title="1、介绍："></a>1、介绍：</h2><p>Vue Router 是 <a href="http://v3.vuejs.org/">Vue.js</a> 的官方路由。它与 Vue.js 核心深度集成，让用 Vue.js 构建单页应用变得轻而易举。功能包括：</p><ul><li>嵌套路由映射</li><li>动态路由选择</li><li>模块化、基于组件的路由配置</li><li>路由参数、查询、通配符</li><li>展示由 Vue.js 的过渡系统提供的过渡效果</li><li>细致的导航控制</li><li>自动激活 CSS 类的链接</li><li>HTML5 history 模式或 hash 模式</li><li>可定制的滚动行为</li><li>URL 的正确编码</li></ul><h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><p>这里我安装的是指定的3.2.0版本</p><p>npm安装</p><pre class="line-numbers language-none"><code class="language-none">npm install vue-router@3.2.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>yarn安装</p><pre class="line-numbers language-none"><code class="language-none">yarn add vue-router@3.2.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3、配置路由"><a href="#3、配置路由" class="headerlink" title="3、配置路由"></a>3、配置路由</h2><h3 id="1、创建router文件夹"><a href="#1、创建router文件夹" class="headerlink" title="1、创建router文件夹"></a>1、创建router文件夹</h3><p>在项目<strong>根目录</strong>创建router文件夹，并在其内创建路由的逻辑文件 index.js </p><h3 id="2、引入-router里的index-js"><a href="#2、引入-router里的index-js" class="headerlink" title="2、引入 router里的index.js"></a>2、引入 router里的index.js</h3><p>在<strong>main.js</strong>中引入 router里的index.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>Button<span class="token punctuation">,</span>Radio<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'../router/index'</span> <span class="token comment">//1.这里引入的index.js</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Radio<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  router<span class="token operator">:</span>router<span class="token punctuation">,</span> <span class="token comment">//2.引入后要配置使用一下</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、创建view文件夹"><a href="#3、创建view文件夹" class="headerlink" title="3、创建view文件夹"></a>3、创建view文件夹</h3><p>在根目录创建view文件夹，并在其内创建Home.vue文件方便展示在页面观察有无路由效果</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>      我是home页面  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span><span class="token string">'Home'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、router的配置"><a href="#4、router的配置" class="headerlink" title="4、router的配置"></a>4、router的配置</h3><p>刚创建router文件夹其的逻辑文件 index.js ，步骤较多直接展示代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 路由逻辑文件</span><span class="token comment">// 1.引入 vue 和 vue-router</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment">// 5.直接引入方式 --引入要用路由跳转的vue文件相对路径 如果使用按需引入方式这里可以注释</span><span class="token comment">// import Home from '../views/Home.vue'</span><span class="token comment">// 2.全局引入 VueRouter</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token comment">// 4.路由详细的配置 --声明一个常量 routes 接收一个数组里面包括很多对象</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token comment">// 4-1. 匹配的路由地址 '/' 是指根目录</span>        path<span class="token operator">:</span><span class="token string">'/'</span><span class="token punctuation">,</span>        <span class="token comment">// 4-2.取名 可选 使得根目录默认显示的是叫做Home的页面</span>        name<span class="token operator">:</span><span class="token string">'Home'</span><span class="token punctuation">,</span>        <span class="token comment">// 4-3. 两种引入方式 直接引入 or 按需引入 </span>        <span class="token comment">// component: Home, --直接引入</span>        <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/Home.vue'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment">// 3.对VueRouter进行相关配置 --同时声明一个变量router 接收VueRouter实例</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment">// 3-1.设置路由匹配模式</span>    mode<span class="token operator">:</span><span class="token string">'history'</span><span class="token punctuation">,</span>    <span class="token comment">// 6.将routes传入</span>    routes<span class="token operator">:</span>routes<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 7.全局暴露router</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、router-view"><a href="#5、router-view" class="headerlink" title="5、router-view"></a>5、router-view</h3><p>在APP.vue文件夹内的 template 内使用  <router-view></router-view>组件展示路由效果</p><p>同时可以再在view下创建一个User.vue文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>      我是user页面  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span><span class="token string">'User'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着在路由index.js文件内routes添加一个user的对象属性，</p><p>同时可以再在view下创建一个User.vue文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>          path<span class="token operator">:</span><span class="token string">'/'</span><span class="token punctuation">,</span>        name<span class="token operator">:</span><span class="token string">'Home'</span><span class="token punctuation">,</span>        <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/Home.vue'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        path<span class="token operator">:</span><span class="token string">'/user'</span><span class="token punctuation">,</span>        name<span class="token operator">:</span><span class="token string">'User'</span><span class="token punctuation">,</span>        <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/User.vue'</span><span class="token punctuation">)</span>  <span class="token comment">//即当前routes内是如此</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、router-link"><a href="#6、router-link" class="headerlink" title="6、router-link"></a>6、router-link</h3><p>最后最重要的是去页面的App.vue或者其他页面上（当前作为展示的出口页面）写入</p><p>  <router-link to=""></router-link>使其按下按钮后指向跳转的路径 成功即代表路由配置正确</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span><span class="token operator">&gt;</span>首页按钮<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/user"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span><span class="token operator">&gt;</span>用户按钮<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、项目的页面布局"><a href="#三、项目的页面布局" class="headerlink" title="三、项目的页面布局"></a>三、项目的页面布局</h1><h2 id="1、首页架子的搭建"><a href="#1、首页架子的搭建" class="headerlink" title="1、首页架子的搭建"></a>1、首页架子的搭建</h2><p>使用的是<a href="https://element.eleme.cn/#/zh-CN/component/container#footer-attributes">container容器</a></p><p>  <strong>在Home页面使用container容器</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>container style<span class="token operator">=</span><span class="token string">"height:100%"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>aside width<span class="token operator">=</span><span class="token string">"auto"</span><span class="token operator">&gt;</span>Aside<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>aside<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>container<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>header<span class="token operator">&gt;</span>Header<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>header<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>main<span class="token operator">&gt;</span>Main<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>main<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>container<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>container<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"Home"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token comment">// 使用less 需要先下载引入</span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"less"</span> scoped<span class="token operator">&gt;</span><span class="token punctuation">.</span>el<span class="token operator">-</span>header <span class="token punctuation">{</span>    background<span class="token operator">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>el<span class="token operator">-</span>main <span class="token punctuation">{</span>padding<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>同时需要下载less 和less loader解析器</strong></p><p><code>npm i less 和 npm i less-loader@5.0.0</code></p><p>如果有报错就根据提示安装需要的数据</p><p>当然因为是按需加载需要在main.js里添加刚才使用的组件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>Button<span class="token punctuation">,</span>Radio<span class="token punctuation">,</span>Container<span class="token punctuation">,</span>Aside<span class="token punctuation">,</span>Header<span class="token punctuation">,</span>Main<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'../router/index'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Radio<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Container<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Aside<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Header<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Main<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  router<span class="token operator">:</span>router<span class="token punctuation">,</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、侧边栏aside的实现"><a href="#2、侧边栏aside的实现" class="headerlink" title="2、侧边栏aside的实现"></a>2、侧边栏aside的实现</h2><p>使用的是<a href="https://element.eleme.cn/#/zh-CN/component/menu#menu-group-attribute">NavMenu 导航菜单的样式</a></p><h4 id="1、引入NavMenu"><a href="#1、引入NavMenu" class="headerlink" title="1、引入NavMenu"></a>1、引入NavMenu</h4><p>因为是考虑其他页面也显示侧边栏在commponents文件夹下新建CommonAside.vue文件，并导入NavMenu 导航菜单的样式，记得展开菜单一下方便观察collapse改为false</p><p>当然还要再Home.vue文件里引入这个组件，注意在标签内要用小写，然后在main.js里导入element刚使用到的组件！（注意：驼峰命名改为小写字母＋中横线）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>container style<span class="token operator">=</span><span class="token string">"height: 100%"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 左侧aside区域 <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>aside width<span class="token operator">=</span><span class="token string">"auto"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 驼峰命名改为小写字母＋中横线 <span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>common<span class="token operator">-</span>aside<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>common<span class="token operator">-</span>aside<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>aside<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 右侧的头和main区域 <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>container<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>header<span class="token operator">&gt;</span>Header<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>header<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>main<span class="token operator">&gt;</span>Main<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>main<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>container<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>container<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> CommonAside <span class="token keyword">from</span> <span class="token string">"../src/components/CommonAside.vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token operator">:</span> <span class="token punctuation">{</span>    CommonAside<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  name<span class="token operator">:</span> <span class="token string">"Home"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token comment">// 使用less 需要先下载引入</span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"less"</span> scoped<span class="token operator">&gt;</span><span class="token punctuation">.</span>el<span class="token operator">-</span>header <span class="token punctuation">{</span>  background<span class="token operator">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>el<span class="token operator">-</span>main <span class="token punctuation">{</span>  padding<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、一级菜单实现："><a href="#2、一级菜单实现：" class="headerlink" title="2、一级菜单实现："></a>2、一级菜单实现：</h4><p>在data里添加数据</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span>        <span class="token punctuation">{</span>          path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>          name<span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>          label<span class="token operator">:</span> <span class="token string">'首页'</span><span class="token punctuation">,</span>          icon<span class="token operator">:</span> <span class="token string">'s-home'</span><span class="token punctuation">,</span>          url<span class="token operator">:</span> <span class="token string">'Home/Home'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          path<span class="token operator">:</span> <span class="token string">'/mall'</span><span class="token punctuation">,</span>          name<span class="token operator">:</span> <span class="token string">'mall'</span><span class="token punctuation">,</span>          label<span class="token operator">:</span> <span class="token string">'商品管理'</span><span class="token punctuation">,</span>          icon<span class="token operator">:</span> <span class="token string">'video-play'</span><span class="token punctuation">,</span>          url<span class="token operator">:</span> <span class="token string">'MallManage/MallManage'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          path<span class="token operator">:</span> <span class="token string">'/user'</span><span class="token punctuation">,</span>          name<span class="token operator">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span>          label<span class="token operator">:</span> <span class="token string">'用户管理'</span><span class="token punctuation">,</span>          icon<span class="token operator">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span>          url<span class="token operator">:</span> <span class="token string">'UserManage/UserManage'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          label<span class="token operator">:</span> <span class="token string">'其他'</span><span class="token punctuation">,</span>          icon<span class="token operator">:</span> <span class="token string">'location'</span><span class="token punctuation">,</span>          children<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>              path<span class="token operator">:</span> <span class="token string">'/page1'</span><span class="token punctuation">,</span>              name<span class="token operator">:</span> <span class="token string">'page1'</span><span class="token punctuation">,</span>              label<span class="token operator">:</span> <span class="token string">'页面1'</span><span class="token punctuation">,</span>              icon<span class="token operator">:</span> <span class="token string">'setting'</span><span class="token punctuation">,</span>              url<span class="token operator">:</span> <span class="token string">'Other/PageOne'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>              path<span class="token operator">:</span> <span class="token string">'/page2'</span><span class="token punctuation">,</span>              name<span class="token operator">:</span> <span class="token string">'page2'</span><span class="token punctuation">,</span>              label<span class="token operator">:</span> <span class="token string">'页面2'</span><span class="token punctuation">,</span>              icon<span class="token operator">:</span> <span class="token string">'setting'</span><span class="token punctuation">,</span>              url<span class="token operator">:</span> <span class="token string">'Other/PageTwo'</span>            <span class="token punctuation">}</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在计算属性中添加两个方法获取有无子菜单的对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">computed<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token function">noChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">//   对数据源过滤 判断data里有无子项目 没有的话就将它返回</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>menu<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>item<span class="token punctuation">.</span>children<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token function">hasChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>menu<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>children<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在第一个没有子菜单的el-menu-item里遍历刚才计算属性的noChildren方法 记得引入icon组件在main.js中</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>el<span class="token operator">-</span>menu<span class="token operator">-</span>item v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item) in noChildren"</span> <span class="token operator">:</span>index<span class="token operator">=</span><span class="token string">"item.path"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"item.path"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> item下有icon的图标 <span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>i <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"'el-icon-' + item.icon"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>span slot<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>label<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>menu<span class="token operator">-</span>item<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、二级菜单的实现"><a href="#3、二级菜单的实现" class="headerlink" title="3、二级菜单的实现"></a>3、二级菜单的实现</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>el<span class="token operator">-</span>menu    <span class="token keyword">default</span><span class="token operator">-</span>active<span class="token operator">=</span><span class="token string">"1-4-1"</span>    <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"el-menu-vertical-demo"</span>    @open<span class="token operator">=</span><span class="token string">"handleOpen"</span>    @close<span class="token operator">=</span><span class="token string">"handleClose"</span>    <span class="token operator">:</span>collapse<span class="token operator">=</span><span class="token string">"isCollapse"</span>  <span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>zimo后台管理系统<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 一级菜单 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>menu<span class="token operator">-</span>item      v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in noChildren"</span>      <span class="token operator">:</span>index<span class="token operator">=</span><span class="token string">"item.path"</span>      <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"item.path"</span>    <span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> item下有icon的图标 <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>i <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"'el-icon-' + item.icon"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>span slot<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> item<span class="token punctuation">.</span>label <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>menu<span class="token operator">-</span>item<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 二级菜单 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>submenu v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in hasChildren"</span> <span class="token operator">:</span>index<span class="token operator">=</span><span class="token string">"item.icon"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"item.icon"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>template slot<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>i <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"'el-icon-' + item.icon"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>span slot<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> item<span class="token punctuation">.</span>label <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>menu<span class="token operator">-</span>item<span class="token operator">-</span>group v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"subItem in item.children"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"subItem.path"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>menu<span class="token operator">-</span>item <span class="token operator">:</span>index<span class="token operator">=</span><span class="token string">"subItem.path"</span><span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>i <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"'el-icon-' + subItem.icon"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>          <span class="token punctuation">{</span><span class="token punctuation">{</span> subItem<span class="token punctuation">.</span>label <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>menu<span class="token operator">-</span>item<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>menu<span class="token operator">-</span>item<span class="token operator">-</span>group<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>submenu<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>menu<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、menu样式和侧边栏跳转"><a href="#4、menu样式和侧边栏跳转" class="headerlink" title="4、menu样式和侧边栏跳转"></a>4、menu样式和侧边栏跳转</h4><p>首先将左侧顶部的xx管理系统样式调整一下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"less"</span> scoped<span class="token operator">&gt;</span><span class="token punctuation">.</span>el<span class="token operator">-</span>menu<span class="token operator">-</span>vertical<span class="token operator">-</span>demo<span class="token operator">:</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">.</span>el<span class="token operator">-</span>menu<span class="token operator">--</span>collapse</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  width<span class="token operator">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  min<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>el<span class="token operator">-</span>menu  <span class="token punctuation">{</span>    height<span class="token operator">:</span> <span class="token number">100</span>vh<span class="token punctuation">;</span>    border<span class="token operator">:</span> none<span class="token punctuation">;</span>    h3 <span class="token punctuation">{</span>        color<span class="token operator">:</span> #fff<span class="token punctuation">;</span>        text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>        line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">48</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后对左侧边栏背景色和选择样式进行调整</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>el<span class="token operator">-</span>menu  <span class="token keyword">default</span><span class="token operator">-</span>active<span class="token operator">=</span><span class="token string">"1-4-1"</span>  <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"el-menu-vertical-demo"</span>  @open<span class="token operator">=</span><span class="token string">"handleOpen"</span>  @close<span class="token operator">=</span><span class="token string">"handleClose"</span>  <span class="token operator">:</span>collapse<span class="token operator">=</span><span class="token string">"isCollapse"</span>  background<span class="token operator">-</span>color<span class="token operator">=</span><span class="token string">"#545c64"</span> #背景色  text<span class="token operator">-</span>color<span class="token operator">=</span><span class="token string">"#fff"</span> #前景色  active<span class="token operator">-</span>text<span class="token operator">-</span>color<span class="token operator">=</span><span class="token string">"#ffd04b"</span> #选中色<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着去掉顶部的百边需要在App.vue中调整</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>#app <span class="token punctuation">{</span>  height<span class="token operator">:</span> <span class="token number">100</span>vh<span class="token punctuation">;</span><span class="token punctuation">}</span>html<span class="token punctuation">,</span>body <span class="token punctuation">{</span>  margin<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  padding<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置路由的点击跳转   –即点击首页或者商品管理后跳转到该页面上</p><p>在el-menu-item上添加一个点击事件@click=”clickMenu(item)”,</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 一级菜单 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>el<span class="token operator">-</span>menu<span class="token operator">-</span>item @click<span class="token operator">=</span><span class="token string">"clickMenu(item)"</span>  v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in noChildren"</span>  <span class="token operator">:</span>index<span class="token operator">=</span><span class="token string">"item.path"</span>  <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"item.path"</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> item下有icon的图标 <span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>i <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"'el-icon-' + item.icon"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>span slot<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> item<span class="token punctuation">.</span>label <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>menu<span class="token operator">-</span>item<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并在methods中配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">clickMenu</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 让路由地址名称后追加点击的路由名称路径</span>    <span class="token comment">// 因为 router在router文件夹里全局引入了 这里可以直接使用 </span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        name<span class="token operator">:</span>item<span class="token punctuation">.</span>name    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，对于Home页面不仅是首页，更像是一个公共的layout，所以将其改名为Main，并去路由名称修改一下，然后Main.vue文件里name也修改为Main</p><p>同时在views下新建home和user文件夹，里面分别再建index.vue文件，接着去路由配置文件里配置路由</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 4.路由详细的配置 --声明一个常量 routes 接收一个数组里面包括很多对象</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token comment">// 4-1. 匹配的路由地址 '/' 是指根目录</span>        path<span class="token operator">:</span><span class="token string">'/'</span><span class="token punctuation">,</span>        <span class="token comment">// 4-2.取名 可选 </span>        name<span class="token operator">:</span><span class="token string">'Main'</span><span class="token punctuation">,</span>        <span class="token comment">// 4-3. 两种引入方式 直接引入 or 按需引入 </span>        <span class="token comment">// component: Home, --直接引入</span>        <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/Main.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        children<span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token comment">// 8. 增加路由</span>            <span class="token punctuation">{</span>                path<span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>                name<span class="token operator">:</span><span class="token string">'home'</span><span class="token punctuation">,</span>                <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/home/index.vue'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                path<span class="token operator">:</span><span class="token string">'/user'</span><span class="token punctuation">,</span>                name<span class="token operator">:</span><span class="token string">'User'</span><span class="token punctuation">,</span>                <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/user/index.vue'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为上边是嵌套路由写法所以还要使用router-view 展示在页面上  –去Main.vue中的main区域引入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>   <span class="token operator">**</span>在Home页面使用container容器<span class="token operator">**</span> <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>container style<span class="token operator">=</span><span class="token string">"height: 100%"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 左侧aside区域 <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>aside width<span class="token operator">=</span><span class="token string">"auto"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>common<span class="token operator">-</span>aside<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>common<span class="token operator">-</span>aside<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>aside<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 右侧的头和main区域 <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>container<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>header<span class="token operator">&gt;</span>Header<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>header<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>main<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 展示嵌套路由的组件 <span class="token operator">--</span><span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>main<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>container<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>container<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、顶栏header的实现"><a href="#3、顶栏header的实现" class="headerlink" title="3、顶栏header的实现"></a>3、顶栏header的实现</h2><p>首先在src下的assets引入资料中的images、less（<strong>包括了四个css样式文件</strong>，其中index.css文件将其他三个css文件进行了引入，所以在main.js中只需要引入index.css）<code>import '../src/assets/less/index.less'</code></p><p>在components文件夹下新建CommonHeader.vue的文件，</p><p>然后Main.vue中引入CommonHeader.vue组件展示在页面上</p><p>CommonHeader.vue引入Dropdown组件样式详细代码如下：（记得去main.js中按需引入Dropdown的相关组件）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>header<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"l-content"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>button plain icon<span class="token operator">=</span><span class="token string">"el-icon-menu"</span> size<span class="token operator">=</span><span class="token string">"mini"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h3 style<span class="token operator">=</span><span class="token string">"color: #fff"</span><span class="token operator">&gt;</span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Dropdown 右侧下拉菜单 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"r-content"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>dropdown trigger<span class="token operator">=</span><span class="token string">"click"</span> size<span class="token operator">=</span><span class="token string">"mini"</span><span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span>img <span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"userImg"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"user"</span> <span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>el<span class="token operator">-</span>dropdown<span class="token operator">-</span>menu slot<span class="token operator">=</span><span class="token string">"dropdown"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>el<span class="token operator">-</span>dropdown<span class="token operator">-</span>item<span class="token operator">&gt;</span>个人中心<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>dropdown<span class="token operator">-</span>item<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>el<span class="token operator">-</span>dropdown<span class="token operator">-</span>item<span class="token operator">&gt;</span>退出<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>dropdown<span class="token operator">-</span>item<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>dropdown<span class="token operator">-</span>menu<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>dropdown<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"CommonHeader"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      userImg<span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../assets/images/user.png"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"less"</span> scoped<span class="token operator">&gt;</span><span class="token punctuation">.</span>user <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1、header组件的样式"><a href="#1、header组件的样式" class="headerlink" title="1、header组件的样式"></a>1、<strong>header组件的样式</strong></h3><p>使用flex布局</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"less"</span> scoped<span class="token operator">&gt;</span>header <span class="token punctuation">{</span>  display<span class="token operator">:</span> flex<span class="token punctuation">;</span>  height<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>  justify<span class="token operator">-</span>content<span class="token operator">:</span> space<span class="token operator">-</span>between<span class="token punctuation">;</span>  align<span class="token operator">-</span>items<span class="token operator">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>l<span class="token operator">-</span>content <span class="token punctuation">{</span>  display<span class="token operator">:</span> flex<span class="token punctuation">;</span>  align<span class="token operator">-</span>items<span class="token operator">:</span> center<span class="token punctuation">;</span>  <span class="token punctuation">.</span>el<span class="token operator">-</span>button <span class="token punctuation">{</span>    margin<span class="token operator">-</span>right<span class="token operator">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span>r<span class="token operator">-</span>content <span class="token punctuation">{</span>  <span class="token punctuation">.</span>user <span class="token punctuation">{</span>    width<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>    height<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>    border<span class="token operator">-</span>radius<span class="token operator">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、header按钮侧边栏折叠（vuex）"><a href="#2、header按钮侧边栏折叠（vuex）" class="headerlink" title="2、header按钮侧边栏折叠（vuex）"></a>2、header按钮侧边栏折叠（vuex）</h3><p><strong>主要思路：</strong>是CommonAside.vue中控制el-menu中的 :collapse=”isCollapse” 值布尔值的切换，true为不展开，false为展开。</p><p>然后控制的按钮是CommonHeader.vue中的el-button，因为两个文件是兄弟组件，使用vuex来传递事件（当然还有其他简单的方法）</p><p>首先下载vux相关依赖</p><p><code>npm i vuex</code></p><p>在根目录新建store文件夹，其下新建index.js存放vuex数据，</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入vue </span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// 引入vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment">// 引入模块</span><span class="token keyword">import</span> tab <span class="token keyword">from</span> <span class="token string">'./tab'</span><span class="token comment">// 全局注入</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    modules<span class="token operator">:</span><span class="token punctuation">{</span>        tab    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在store文件夹下再新建tab.js 模块导入vuex数据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>   <span class="token comment">// 在state里定义好数据用来控制展开的布尔值</span>    state<span class="token operator">:</span><span class="token punctuation">{</span>        isCollapse<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 在mutations里定义方法修改state的数据</span>    mutations<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token function">collapseMenu</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            state<span class="token punctuation">.</span>isCollapse <span class="token operator">=</span> <span class="token operator">!</span>state<span class="token punctuation">.</span>isCollapse        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在main.js中引入store</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token punctuation">;</span><span class="token comment">//1.引入store</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'../store'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment">// 2.注册store</span>  store<span class="token operator">:</span>store<span class="token punctuation">,</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在CommonAside.vue文件内计算属性增加一个获取vuex中的state里的isCollapse数据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> computed<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">//...</span>   <span class="token comment">// 获取vuex中的state数据</span>   <span class="token function">isCollapse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>tab<span class="token punctuation">.</span>isCollapse   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后可以将原先定义在data里用于控制侧边栏展开与否的isCollapse删除，原因是上方计算属性已经有同名且拿到数据的isCollapse，已经通过上方<template>模板里el-menu属性里的 :collapse=”isCollapse” 绑定<p>然后去CommonHeader.vue文件内定义个点击事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>header<span class="token operator">&gt;</span>   <span class="token comment">//....</span>    <span class="token comment">//1.定义点击事件</span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>button plain icon<span class="token operator">=</span><span class="token string">"el-icon-menu"</span> size<span class="token operator">=</span><span class="token string">"mini"</span> @click<span class="token operator">=</span><span class="token string">"handleMenu()"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">&gt;</span>   <span class="token comment">//....</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span> <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token comment">//...</span>  methods<span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token comment">// 2.点击事件函数内使用 this.$store.commit（'mutations里方法名'） 修改state里isCollapse的布尔值取反</span>    <span class="token function">handleMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'collapseMenu'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后解决一下展开侧边栏前后的管理系统名称长度</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//使用三元表达式 如果isCollapse为真 即折叠的时候显示'后台两字'，否则为假显示'子墨后台管理系统'</span><span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>isCollapse <span class="token operator">?</span> <span class="token string">'后台'</span> <span class="token operator">:</span> <span class="token string">'子墨后台管理系统'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5、主页home的实现"><a href="#5、主页home的实现" class="headerlink" title="5、主页home的实现"></a>5、主页home的实现</h2><h3 id="1、用户头像部分"><a href="#1、用户头像部分" class="headerlink" title="1、用户头像部分"></a>1、用户头像部分</h3><p>使用element-ui的Layout组件 对views文件夹下的home/index.vue 布局 （依旧要去main.js中按需引入）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 使用Layout 布局 <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>             gutter <span class="token operator">:</span>  栅格间隔             span  <span class="token operator">:</span>   栅格占据的列数      <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>row <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span> <span class="token operator">:</span>gutter<span class="token operator">=</span><span class="token string">"20"</span><span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>el<span class="token operator">-</span>col <span class="token operator">:</span>span<span class="token operator">=</span><span class="token string">"8"</span> style<span class="token operator">=</span><span class="token string">"margin-top:20px"</span><span class="token operator">&gt;</span>              <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 卡片 <span class="token operator">--</span><span class="token operator">&gt;</span>              <span class="token operator">&lt;</span>el<span class="token operator">-</span>card shadow<span class="token operator">=</span><span class="token string">"hover"</span><span class="token operator">&gt;</span>                  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">&gt;</span>                      <span class="token operator">&lt;</span>img <span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"userImg"</span><span class="token operator">&gt;</span>                      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"userinfo"</span><span class="token operator">&gt;</span>                          <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">&gt;</span>Admin<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>                          <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"access"</span><span class="token operator">&gt;</span>超级管理员<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>                      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>                  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>                  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"login-info"</span><span class="token operator">&gt;</span>                      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>上次登录时间：<span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">26</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>                      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>上次登录地点：<span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>成都<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>                  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>              <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>card<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>col<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>row<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span><span class="token string">'home'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            userImg<span class="token operator">:</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../src/assets/images/user.png'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、购买统计部分"><a href="#2、购买统计部分" class="headerlink" title="2、购买统计部分"></a>2、购买统计部分</h3><p>主要使用element-ui中的 table组件 （依旧要去main.js中按需引入相关组件）</p><p>将准备好的tableData数据存入打他中待会 <el-table :data="tableData"> 使用</el-table></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">tableData<span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">'oppo'</span><span class="token punctuation">,</span>            todayBuy<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>            monthBuy<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>            totalBuy<span class="token operator">:</span> <span class="token number">800</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">'vivo'</span><span class="token punctuation">,</span>            todayBuy<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>            monthBuy<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>            totalBuy<span class="token operator">:</span> <span class="token number">800</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">'苹果'</span><span class="token punctuation">,</span>            todayBuy<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>            monthBuy<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>            totalBuy<span class="token operator">:</span> <span class="token number">800</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">'小米'</span><span class="token punctuation">,</span>            todayBuy<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>            monthBuy<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>            totalBuy<span class="token operator">:</span> <span class="token number">800</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">'三星'</span><span class="token punctuation">,</span>            todayBuy<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>            monthBuy<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>            totalBuy<span class="token operator">:</span> <span class="token number">800</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">'魅族'</span><span class="token punctuation">,</span>           todayBuy<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>            monthBuy<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>            totalBuy<span class="token operator">:</span> <span class="token number">800</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//...</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 购买统计卡片 <span class="token operator">--</span><span class="token operator">&gt;</span>       <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>             data <span class="token operator">:</span> 显示的数据            prop <span class="token operator">:</span> 对应列内容的字段名，            label <span class="token operator">:</span> 显示的标题        <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>el<span class="token operator">-</span>card style<span class="token operator">=</span><span class="token string">"margin-top: 20px; height: 460px"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>table <span class="token operator">:</span>data<span class="token operator">=</span><span class="token string">"tableData"</span><span class="token operator">&gt;</span>              <span class="token operator">&lt;</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(val,key) in tableLabel"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"key"</span> <span class="token operator">:</span>prop<span class="token operator">=</span><span class="token string">"key"</span> <span class="token operator">:</span>label<span class="token operator">=</span><span class="token string">"val"</span><span class="token operator">&gt;</span>                               <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>card<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"home"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      userImg<span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../../src/assets/images/user.png"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      tableData<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          name<span class="token operator">:</span> <span class="token string">"oppo"</span><span class="token punctuation">,</span>          todayBuy<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>          monthBuy<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>          totalBuy<span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//...</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      tableLabel<span class="token operator">:</span><span class="token punctuation">{</span>          name<span class="token operator">:</span><span class="token string">'课程'</span><span class="token punctuation">,</span>          todayBuy<span class="token operator">:</span><span class="token string">'今日购买'</span><span class="token punctuation">,</span>          monthBuy<span class="token operator">:</span><span class="token string">'本月购买'</span><span class="token punctuation">,</span>          totalBuy<span class="token operator">:</span><span class="token string">'总购买'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、订单统计和图表部分（布局）"><a href="#3、订单统计和图表部分（布局）" class="headerlink" title="3、订单统计和图表部分（布局）"></a>3、订单统计和图表部分（布局）</h3><p>将这里准备好的countData数据存入data中，6个el-card盒子处遍历使用 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">countData<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          name<span class="token operator">:</span> <span class="token string">"今日支付订单"</span><span class="token punctuation">,</span>          value<span class="token operator">:</span> <span class="token number">1234</span><span class="token punctuation">,</span>          icon<span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>          color<span class="token operator">:</span> <span class="token string">"#2ec7c9"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          name<span class="token operator">:</span> <span class="token string">"今日收藏订单"</span><span class="token punctuation">,</span>          value<span class="token operator">:</span> <span class="token number">210</span><span class="token punctuation">,</span>          icon<span class="token operator">:</span> <span class="token string">"star-on"</span><span class="token punctuation">,</span>          color<span class="token operator">:</span> <span class="token string">"#ffb980"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          name<span class="token operator">:</span> <span class="token string">"今日未支付订单"</span><span class="token punctuation">,</span>          value<span class="token operator">:</span> <span class="token number">1234</span><span class="token punctuation">,</span>          icon<span class="token operator">:</span> <span class="token string">"s-goods"</span><span class="token punctuation">,</span>          color<span class="token operator">:</span> <span class="token string">"#5ab1ef"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          name<span class="token operator">:</span> <span class="token string">"本月支付订单"</span><span class="token punctuation">,</span>          value<span class="token operator">:</span> <span class="token number">1234</span><span class="token punctuation">,</span>          icon<span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>          color<span class="token operator">:</span> <span class="token string">"#2ec7c9"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          name<span class="token operator">:</span> <span class="token string">"本月收藏订单"</span><span class="token punctuation">,</span>          value<span class="token operator">:</span> <span class="token number">210</span><span class="token punctuation">,</span>          icon<span class="token operator">:</span> <span class="token string">"star-on"</span><span class="token punctuation">,</span>          color<span class="token operator">:</span> <span class="token string">"#ffb980"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          name<span class="token operator">:</span> <span class="token string">"本月未支付订单"</span><span class="token punctuation">,</span>          value<span class="token operator">:</span> <span class="token number">1234</span><span class="token punctuation">,</span>          icon<span class="token operator">:</span> <span class="token string">"s-goods"</span><span class="token punctuation">,</span>          color<span class="token operator">:</span> <span class="token string">"#5ab1ef"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 右侧区域 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>el<span class="token operator">-</span>col <span class="token operator">:</span>span<span class="token operator">=</span><span class="token string">"16"</span> style<span class="token operator">=</span><span class="token string">"margin-top: 20px"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">6</span>个订单盒子 <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"num"</span><span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>el<span class="token operator">-</span>card v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in countData"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"item.name"</span> <span class="token operator">:</span>body<span class="token operator">-</span>style<span class="token operator">=</span><span class="token string">"{display:'flex',padding:0}"</span><span class="token operator">&gt;</span>              <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"icon"</span> <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"`el-icon-${item.icon}`"</span> <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"{background:item.color}"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"detail"</span><span class="token operator">&gt;</span>                  <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"num"</span><span class="token operator">&gt;</span>￥<span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>                  <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>card<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">3</span>个图表盒子 <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>card style<span class="token operator">=</span><span class="token string">"height:280px"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>card<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"graph"</span><span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>el<span class="token operator">-</span>card style<span class="token operator">=</span><span class="token string">"height:260px"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>card<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>el<span class="token operator">-</span>card style<span class="token operator">=</span><span class="token string">"height:260px"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>card<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>col<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、使用axios获取图表数据"><a href="#4、使用axios获取图表数据" class="headerlink" title="4、使用axios获取图表数据"></a>4、使用axios获取图表数据</h3><p><code>npm install axios</code>下载</p><p>然后在 main.js 中引入 axios </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> http <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token comment">//axios不是插件，想全局中使用只能绑定在vue的原型上</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$http <span class="token operator">=</span> http <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>然后对axios二次封装</strong></p><p>在项目根目录下新建api文件夹，并在其下新建axios.js文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="main组件的实现"><a href="#main组件的实现" class="headerlink" title="main组件的实现"></a>main组件的实现</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// mock数据模拟</span><span class="token keyword">import</span> Mock <span class="token keyword">from</span> <span class="token string">'mockjs'</span><span class="token comment">// 图表数据</span><span class="token keyword">let</span> List <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function-variable function">getStatisticalData</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//Mock.Random.float 产生随机数100到8000之间 保留小数 最小0位 最大0位</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      List<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>        Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          苹果<span class="token operator">:</span> Mock<span class="token punctuation">.</span>Random<span class="token punctuation">.</span><span class="token function">float</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          vivo<span class="token operator">:</span> Mock<span class="token punctuation">.</span>Random<span class="token punctuation">.</span><span class="token function">float</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          oppo<span class="token operator">:</span> Mock<span class="token punctuation">.</span>Random<span class="token punctuation">.</span><span class="token function">float</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          魅族<span class="token operator">:</span> Mock<span class="token punctuation">.</span>Random<span class="token punctuation">.</span><span class="token function">float</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          三星<span class="token operator">:</span> Mock<span class="token punctuation">.</span>Random<span class="token punctuation">.</span><span class="token function">float</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          小米<span class="token operator">:</span> Mock<span class="token punctuation">.</span>Random<span class="token punctuation">.</span><span class="token function">float</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      code<span class="token operator">:</span> <span class="token number">20000</span><span class="token punctuation">,</span>      data<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token comment">// 饼图</span>        videoData<span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">'小米'</span><span class="token punctuation">,</span>            value<span class="token operator">:</span> <span class="token number">2999</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">'苹果'</span><span class="token punctuation">,</span>            value<span class="token operator">:</span> <span class="token number">5999</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">'vivo'</span><span class="token punctuation">,</span>            value<span class="token operator">:</span> <span class="token number">1500</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">'oppo'</span><span class="token punctuation">,</span>            value<span class="token operator">:</span> <span class="token number">1999</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">'魅族'</span><span class="token punctuation">,</span>            value<span class="token operator">:</span> <span class="token number">2200</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">'三星'</span><span class="token punctuation">,</span>            value<span class="token operator">:</span> <span class="token number">4500</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment">// 柱状图</span>        userData<span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            date<span class="token operator">:</span> <span class="token string">'周一'</span><span class="token punctuation">,</span>            <span class="token keyword">new</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>            active<span class="token operator">:</span> <span class="token number">200</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            date<span class="token operator">:</span> <span class="token string">'周二'</span><span class="token punctuation">,</span>            <span class="token keyword">new</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>            active<span class="token operator">:</span> <span class="token number">500</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            date<span class="token operator">:</span> <span class="token string">'周三'</span><span class="token punctuation">,</span>            <span class="token keyword">new</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>            active<span class="token operator">:</span> <span class="token number">550</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            date<span class="token operator">:</span> <span class="token string">'周四'</span><span class="token punctuation">,</span>            <span class="token keyword">new</span><span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span>            active<span class="token operator">:</span> <span class="token number">800</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            date<span class="token operator">:</span> <span class="token string">'周五'</span><span class="token punctuation">,</span>            <span class="token keyword">new</span><span class="token operator">:</span> <span class="token number">65</span><span class="token punctuation">,</span>            active<span class="token operator">:</span> <span class="token number">550</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            date<span class="token operator">:</span> <span class="token string">'周六'</span><span class="token punctuation">,</span>            <span class="token keyword">new</span><span class="token operator">:</span> <span class="token number">53</span><span class="token punctuation">,</span>            active<span class="token operator">:</span> <span class="token number">770</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            date<span class="token operator">:</span> <span class="token string">'周日'</span><span class="token punctuation">,</span>            <span class="token keyword">new</span><span class="token operator">:</span> <span class="token number">33</span><span class="token punctuation">,</span>            active<span class="token operator">:</span> <span class="token number">170</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment">// 折线图</span>        orderData<span class="token operator">:</span> <span class="token punctuation">{</span>          date<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'20191001'</span><span class="token punctuation">,</span> <span class="token string">'20191002'</span><span class="token punctuation">,</span> <span class="token string">'20191003'</span><span class="token punctuation">,</span> <span class="token string">'20191004'</span><span class="token punctuation">,</span> <span class="token string">'20191005'</span><span class="token punctuation">,</span> <span class="token string">'20191006'</span><span class="token punctuation">,</span> <span class="token string">'20191007'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          data<span class="token operator">:</span> List        <span class="token punctuation">}</span><span class="token punctuation">,</span>        tableData<span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">'oppo'</span><span class="token punctuation">,</span>            todayBuy<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>            monthBuy<span class="token operator">:</span> <span class="token number">3500</span><span class="token punctuation">,</span>            totalBuy<span class="token operator">:</span> <span class="token number">22000</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">'vivo'</span><span class="token punctuation">,</span>            todayBuy<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>            monthBuy<span class="token operator">:</span> <span class="token number">2200</span><span class="token punctuation">,</span>            totalBuy<span class="token operator">:</span> <span class="token number">24000</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">'苹果'</span><span class="token punctuation">,</span>            todayBuy<span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>            monthBuy<span class="token operator">:</span> <span class="token number">4500</span><span class="token punctuation">,</span>            totalBuy<span class="token operator">:</span> <span class="token number">65000</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">'小米'</span><span class="token punctuation">,</span>            todayBuy<span class="token operator">:</span> <span class="token number">1200</span><span class="token punctuation">,</span>            monthBuy<span class="token operator">:</span> <span class="token number">6500</span><span class="token punctuation">,</span>            totalBuy<span class="token operator">:</span> <span class="token number">45000</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">'三星'</span><span class="token punctuation">,</span>            todayBuy<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>            monthBuy<span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>            totalBuy<span class="token operator">:</span> <span class="token number">34000</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">'魅族'</span><span class="token punctuation">,</span>            todayBuy<span class="token operator">:</span> <span class="token number">350</span><span class="token punctuation">,</span>            monthBuy<span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>            totalBuy<span class="token operator">:</span> <span class="token number">22000</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="echarts-的基本使用"><a href="#echarts-的基本使用" class="headerlink" title="echarts 的基本使用"></a>echarts 的基本使用</h1><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/echarts/4.3.0/echarts.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="订单echarts配置"><a href="#订单echarts配置" class="headerlink" title="订单echarts配置"></a>订单echarts配置</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">order<span class="token operator">:</span><span class="token punctuation">{</span>  legend<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">// 图例文字颜色</span>    textStyle<span class="token operator">:</span> <span class="token punctuation">{</span>      color<span class="token operator">:</span> <span class="token string">"#333"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  grid<span class="token operator">:</span> <span class="token punctuation">{</span>    left<span class="token operator">:</span> <span class="token string">"20%"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 提示框</span>  tooltip<span class="token operator">:</span> <span class="token punctuation">{</span>    trigger<span class="token operator">:</span> <span class="token string">"axis"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  xAxis<span class="token operator">:</span> <span class="token punctuation">{</span>    type<span class="token operator">:</span> <span class="token string">"category"</span><span class="token punctuation">,</span> <span class="token comment">// 类目轴</span>    data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    axisLine<span class="token operator">:</span> <span class="token punctuation">{</span>      lineStyle<span class="token operator">:</span> <span class="token punctuation">{</span>        color<span class="token operator">:</span> <span class="token string">"#17b3a3"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    axisLabel<span class="token operator">:</span> <span class="token punctuation">{</span>      interval<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      color<span class="token operator">:</span> <span class="token string">"#333"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  yAxis<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      type<span class="token operator">:</span> <span class="token string">"value"</span><span class="token punctuation">,</span>      axisLine<span class="token operator">:</span> <span class="token punctuation">{</span>        lineStyle<span class="token operator">:</span> <span class="token punctuation">{</span>          color<span class="token operator">:</span> <span class="token string">"#17b3a3"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  color<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"#2ec7c9"</span><span class="token punctuation">,</span> <span class="token string">"#b6a2de"</span><span class="token punctuation">,</span> <span class="token string">"#5ab1ef"</span><span class="token punctuation">,</span> <span class="token string">"#ffb980"</span><span class="token punctuation">,</span> <span class="token string">"#d87a80"</span><span class="token punctuation">,</span> <span class="token string">"#8d98b3"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  series<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="用户配置"><a href="#用户配置" class="headerlink" title="用户配置"></a>用户配置</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">user<span class="token operator">:</span> <span class="token punctuation">{</span>          legend<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token comment">// 图例文字颜色</span>            textStyle<span class="token operator">:</span> <span class="token punctuation">{</span>              color<span class="token operator">:</span> <span class="token string">"#333"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          grid<span class="token operator">:</span> <span class="token punctuation">{</span>            left<span class="token operator">:</span> <span class="token string">"20%"</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token comment">// 提示框</span>          tooltip<span class="token operator">:</span> <span class="token punctuation">{</span>            trigger<span class="token operator">:</span> <span class="token string">"axis"</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          xAxis<span class="token operator">:</span> <span class="token punctuation">{</span>            type<span class="token operator">:</span> <span class="token string">"category"</span><span class="token punctuation">,</span> <span class="token comment">// 类目轴</span>            data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            axisLine<span class="token operator">:</span> <span class="token punctuation">{</span>              lineStyle<span class="token operator">:</span> <span class="token punctuation">{</span>                color<span class="token operator">:</span> <span class="token string">"#17b3a3"</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            axisLabel<span class="token operator">:</span> <span class="token punctuation">{</span>              interval<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>              color<span class="token operator">:</span> <span class="token string">"#333"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          yAxis<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>              type<span class="token operator">:</span> <span class="token string">"value"</span><span class="token punctuation">,</span>              axisLine<span class="token operator">:</span> <span class="token punctuation">{</span>                lineStyle<span class="token operator">:</span> <span class="token punctuation">{</span>                  color<span class="token operator">:</span> <span class="token string">"#17b3a3"</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          color<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"#2ec7c9"</span><span class="token punctuation">,</span> <span class="token string">"#b6a2de"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          series<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="饼状图配置"><a href="#饼状图配置" class="headerlink" title="饼状图配置"></a>饼状图配置</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token operator">:</span> <span class="token punctuation">{</span>          tooltip<span class="token operator">:</span> <span class="token punctuation">{</span>            trigger<span class="token operator">:</span> <span class="token string">"item"</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          color<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"#0f78f4"</span><span class="token punctuation">,</span>            <span class="token string">"#dd536b"</span><span class="token punctuation">,</span>            <span class="token string">"#9462e5"</span><span class="token punctuation">,</span>            <span class="token string">"#a6a6a6"</span><span class="token punctuation">,</span>            <span class="token string">"#e1bb22"</span><span class="token punctuation">,</span>            <span class="token string">"#39c362"</span><span class="token punctuation">,</span>            <span class="token string">"#3ed1cf"</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          series<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="面包屑导航思路"><a href="#面包屑导航思路" class="headerlink" title="面包屑导航思路"></a>面包屑导航思路</h1><p>面包屑是在head部分组件里,Tag标签虽然不再head部分组件里,但是它在整个管理后台系统中是会一直存在的，所以需要在Main.vue中。</p><p>这两块功能的实现,主要依赖Element-ui两个样式 Breadcrumb 面包屑 + Tag 标签</p><p>整个大致逻辑是这样的,首先是面包屑 首页 一定要存在的,接下来 侧边组件 点击某菜单,把这个数据存到vuex中，然后 头部组件 来获取vuex中这个数据并展示。</p><h1 id="封装一个form表单组件"><a href="#封装一个form表单组件" class="headerlink" title="封装一个form表单组件"></a>封装一个form表单组件</h1><h2 id="简单form表单的应用"><a href="#简单form表单的应用" class="headerlink" title="简单form表单的应用"></a>简单form表单的应用</h2><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;el-form ref="form" :model="form" label-width="80px"&gt;    &lt;el-form-item label="姓名" &gt;        &lt;el-input v-model="form.name" style="width: 195px"&gt;&lt;/el-input&gt;    &lt;/el-form-item&gt;    &lt;el-form-item label="国籍"&gt;        &lt;el-select v-model="form.region" placeholder="请选择国籍"&gt;            &lt;el-option label="中国" value="china"&gt;&lt;/el-option&gt;            &lt;el-option label="美国" value="America"&gt;&lt;/el-option&gt;        &lt;/el-select&gt;    &lt;/el-form-item&gt;    &lt;el-form-item label="爱好"&gt;        &lt;el-checkbox-group v-model="form.type"&gt;            &lt;el-checkbox label="画画" name="type" &gt;&lt;/el-checkbox&gt;            &lt;el-checkbox label="吹泡泡" name="type"&gt;&lt;/el-checkbox&gt;            &lt;el-checkbox label="放风筝" name="type"&gt;&lt;/el-checkbox&gt;            &lt;el-checkbox label="看佩琦" name="type"&gt;&lt;/el-checkbox&gt;        &lt;/el-checkbox-group&gt;    &lt;/el-form-item&gt;    &lt;el-form-item&gt;        &lt;el-button type="primary" @click="onSubmit" size="small"&gt;立即创建&lt;/el-button&gt;    &lt;/el-form-item&gt;&lt;/el-form&gt;&lt;/template&gt;&lt;script&gt;    export default {        data() {            return {                form: {                    name: '',                    region: '',                    type: []                }            }        },        methods: {            onSubmit() {                console.log('提交 -&gt; ' + this.form.name + " " + this.form.region + " " + this.form.type );            }        }    }&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="我们看一下现在项目中的form表单的组件"><a href="#我们看一下现在项目中的form表单的组件" class="headerlink" title="我们看一下现在项目中的form表单的组件"></a>我们看一下现在项目中的form表单的组件</h2><p><img src="./images/9.png" alt="image"><br><img src="./images/10.png" alt="image"></p><h2 id="看了这个以后大家可以来想一想怎么做封装"><a href="#看了这个以后大家可以来想一想怎么做封装" class="headerlink" title="看了这个以后大家可以来想一想怎么做封装"></a>看了这个以后大家可以来想一想怎么做封装</h2><p>想的过程：<br>这里的图片展示了两个from 表单<br>两个form表单里面的item类型都不一样<br>假设现在我们有一个封装好的commonFrom组件 那么这两个form表单的值应该是通过属性传递过来的 那么这里在传递的时候就有两份值 并且每一份值都不一样 这个时候传递的数据机构是什么样的你能想象的到吗？</p><p>应该是 数组里面套对象 每个对象的类型都不一样 那么每个对象里面的类型对应的就是form item的类型</p><p>也就是说我们label对应的数据 待会是要传过来的<br>那么我们设计这一部分的传过来的值是 这种类型的 </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>      label<span class="token operator">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>      type<span class="token operator">:</span> <span class="token string">'input'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      label<span class="token operator">:</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>      type<span class="token operator">:</span> <span class="token string">'input'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>那下面我们来写代码<br>commonForm.vue<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;!--是否行内表单--&gt;  &lt;el-form ref="form" label-width="100px"&gt;    &lt;!--标签显示名称--&gt;    &lt;el-form-item v-for="item in formLabel" :key="item.label" :label="item.label"&gt;    &lt;/el-form-item&gt;  &lt;/el-form&gt;&lt;/template&gt;&lt;script&gt;export default {  // formLabel 是标签数据  props: {    formLabel: Array,  },};&lt;/script&gt;&lt;style lang="scss" scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>User.vue<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;common-form :formLabel="operateFormLabel"&gt;&lt;/common-form&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import CommonForm from "../../components/CommonFrom.vue";export default {  components: {    CommonForm,  },  data() {    return {      operateFormLabel: [        {          label: "姓名",          type: "input",        },        {          label: "年龄",          type: "input",        },      ],    };  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>此时可以看到遍历出来了但是没有表单的类型 也就是input 框 select框这些 那么理所当然能都想到 刚刚传过来的值里面有type所以 根据type判断 那么就有了</p><p>CommonFrom.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;!--是否行内表单--&gt;  &lt;el-form ref="form" label-width="100px"&gt;    &lt;!--标签显示名称--&gt;    &lt;el-form-item v-for="item in formLabel" :key="item.label" :label="item.label"&gt;      &lt;!--根据type来显示是什么标签--&gt;      &lt;el-input        :placeholder="'请输入' + item.label"        v-if="item.type === 'input'"      &gt;&lt;/el-input&gt;      &lt;el-switch v-if="item.type === 'switch'"&gt;&lt;/el-switch&gt;      &lt;el-date-picker        type="date"        placeholder="选择日期"        v-if="item.type === 'date'"        value-format="yyyy-MM-dd"      &gt;      &lt;/el-date-picker&gt;          &lt;/el-form-item&gt;  &lt;/el-form&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>继续想一下 如果是select 肯定有 options 是需要遍历的 那么就会多套一层数据结构<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">  &lt;el-select  placeholder="请选择" v-if="item.type === 'select'"&gt;      &lt;!--如果是select或者checkbox 、Radio就还需要选项信息--&gt;    &lt;el-option v-for="item in item.opts" :key="item.value" :label="item.label" :value="item.value"&gt;&lt;/el-option&gt;&lt;/el-select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>此时我们考虑完了 type 接下来的就是表单双向绑定的值 应该怎么处理？<br>肯定也是传过来<br>父组件 传过来 值的类型依然是对象 </p><pre class="line-numbers language-js" data-language="js"><div class="caption"><span>User.vue</span></div><code class="language-js"> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    operateFormLabel<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        label<span class="token operator">:</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span>        type<span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        label<span class="token operator">:</span> <span class="token string">"年龄"</span><span class="token punctuation">,</span>        type<span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    operateForm<span class="token operator">:</span> <span class="token punctuation">{</span>      name<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      addr<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      age<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      birth<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      sex<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><div class="caption"><span>CommonForm.vue</span></div><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment">// formLabel 是标签数据</span>  <span class="token comment">// form是表单数据</span>  props<span class="token operator">:</span> <span class="token punctuation">{</span>    formLabel<span class="token operator">:</span> Array<span class="token punctuation">,</span>    form<span class="token operator">:</span> Object<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意：在el-form上面 受:model控制所以<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>el<span class="token operator">-</span>form ref<span class="token operator">=</span><span class="token string">"form"</span> label<span class="token operator">-</span>width<span class="token operator">=</span><span class="token string">"100px"</span> <span class="token operator">:</span>model<span class="token operator">=</span><span class="token string">"form"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>思考 那么formitem上面的 v-model怎么对应起来呢 那我们在传上一个formLabel的时候 可以在对象的key值里面加一个与之对应</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>el<span class="token operator">-</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"form[item.model]"</span> <span class="token operator">:</span>placeholder<span class="token operator">=</span><span class="token string">"'请输入' + item.label"</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"item.type==='input'"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>input<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">operateFormLabel<span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span>                        model<span class="token operator">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span>                        label<span class="token operator">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>                        type<span class="token operator">:</span> <span class="token string">'input'</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        model<span class="token operator">:</span> <span class="token string">'age'</span><span class="token punctuation">,</span>                        label<span class="token operator">:</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>                        type<span class="token operator">:</span> <span class="token string">'input'</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        model<span class="token operator">:</span> <span class="token string">'sex'</span><span class="token punctuation">,</span>                        label<span class="token operator">:</span> <span class="token string">'性别'</span><span class="token punctuation">,</span>                        type<span class="token operator">:</span> <span class="token string">'select'</span><span class="token punctuation">,</span>                        opts<span class="token operator">:</span> <span class="token punctuation">[</span>                            <span class="token punctuation">{</span>                                label<span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>                                value<span class="token operator">:</span> <span class="token number">1</span>                            <span class="token punctuation">}</span><span class="token punctuation">,</span>                            <span class="token punctuation">{</span>                                label<span class="token operator">:</span> <span class="token string">'女'</span><span class="token punctuation">,</span>                                value<span class="token operator">:</span> <span class="token number">0</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        model<span class="token operator">:</span> <span class="token string">'birth'</span><span class="token punctuation">,</span>                        label<span class="token operator">:</span> <span class="token string">'出生日期'</span><span class="token punctuation">,</span>                        type<span class="token operator">:</span> <span class="token string">'date'</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        model<span class="token operator">:</span> <span class="token string">'addr'</span><span class="token punctuation">,</span>                        label<span class="token operator">:</span> <span class="token string">'地址'</span><span class="token punctuation">,</span>                        type<span class="token operator">:</span> <span class="token string">'input'</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="预留一个插槽-下面的不一样的地方可以灵活的处理"><a href="#预留一个插槽-下面的不一样的地方可以灵活的处理" class="headerlink" title="预留一个插槽 下面的不一样的地方可以灵活的处理"></a>预留一个插槽 下面的不一样的地方可以灵活的处理</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">&gt;</span><span class="token operator">&lt;</span>slot<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;common-form &gt;     &lt;el-button type="primary" @click="getList(searchFrom.keyword)"&gt;搜索&lt;/el-button&gt;   &lt;/common-form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="表单是不是一行展示"><a href="#表单是不是一行展示" class="headerlink" title="表单是不是一行展示"></a>表单是不是一行展示</h2><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><ol><li>登录权限</li></ol><p><img src="./images/4.jpeg" alt="项目技术栈"></p><ol start="2"><li>菜单权限</li></ol><p><img src="./images/5.jpg" alt="项目技术栈"></p><h3 id="登录权限"><a href="#登录权限" class="headerlink" title="登录权限"></a>登录权限</h3><p>我们给系统添加一个登录凭证叫”token”，这个token在登录的时候通过接口请求将用户名和密码传给后端，后端再数据库中匹配成功后返回一个凭证，前端将token缓存起来，再调用接口时传给后端验证就建立了登录权限校验</p><p>Mock数据 permission</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Mock <span class="token keyword">from</span> <span class="token string">'mockjs'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function-variable function">getMenu</span><span class="token operator">:</span> <span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>body<span class="token punctuation">)</span>    <span class="token comment">// 先判断用户是否存在</span>    <span class="token comment">// 判断账号和密码是否对应</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">===</span> <span class="token string">'admin'</span> <span class="token operator">&amp;&amp;</span> password <span class="token operator">===</span> <span class="token string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        code<span class="token operator">:</span> <span class="token number">20000</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">{</span>          menu<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>              path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>              name<span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>              label<span class="token operator">:</span> <span class="token string">'首页'</span><span class="token punctuation">,</span>              icon<span class="token operator">:</span> <span class="token string">'s-home'</span><span class="token punctuation">,</span>              url<span class="token operator">:</span> <span class="token string">'home/index'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>              path<span class="token operator">:</span> <span class="token string">'/mall'</span><span class="token punctuation">,</span>              name<span class="token operator">:</span> <span class="token string">'mall'</span><span class="token punctuation">,</span>              label<span class="token operator">:</span> <span class="token string">'商品管理'</span><span class="token punctuation">,</span>              icon<span class="token operator">:</span> <span class="token string">'video-play'</span><span class="token punctuation">,</span>              url<span class="token operator">:</span> <span class="token string">'mall/index'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>              path<span class="token operator">:</span> <span class="token string">'/user'</span><span class="token punctuation">,</span>              name<span class="token operator">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span>              label<span class="token operator">:</span> <span class="token string">'用户管理'</span><span class="token punctuation">,</span>              icon<span class="token operator">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span>              url<span class="token operator">:</span> <span class="token string">'User/index'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>              label<span class="token operator">:</span> <span class="token string">'其他'</span><span class="token punctuation">,</span>              icon<span class="token operator">:</span> <span class="token string">'location'</span><span class="token punctuation">,</span>              children<span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                  path<span class="token operator">:</span> <span class="token string">'/page1'</span><span class="token punctuation">,</span>                  name<span class="token operator">:</span> <span class="token string">'page1'</span><span class="token punctuation">,</span>                  label<span class="token operator">:</span> <span class="token string">'页面1'</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">'setting'</span><span class="token punctuation">,</span>                  url<span class="token operator">:</span> <span class="token string">'other/pageOne'</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                  path<span class="token operator">:</span> <span class="token string">'/page2'</span><span class="token punctuation">,</span>                  name<span class="token operator">:</span> <span class="token string">'page2'</span><span class="token punctuation">,</span>                  label<span class="token operator">:</span> <span class="token string">'页面2'</span><span class="token punctuation">,</span>                  icon<span class="token operator">:</span> <span class="token string">'setting'</span><span class="token punctuation">,</span>                  url<span class="token operator">:</span> <span class="token string">'other/pageTwo'</span>                <span class="token punctuation">}</span>              <span class="token punctuation">]</span>            <span class="token punctuation">}</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          token<span class="token operator">:</span> Mock<span class="token punctuation">.</span>Random<span class="token punctuation">.</span><span class="token function">guid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          message<span class="token operator">:</span> <span class="token string">'获取成功'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">===</span> <span class="token string">'xiaoxiao'</span> <span class="token operator">&amp;&amp;</span> password <span class="token operator">===</span> <span class="token string">'xiaoxiao'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        code<span class="token operator">:</span> <span class="token number">20000</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">{</span>          menu<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>              path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>              name<span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>              label<span class="token operator">:</span> <span class="token string">'首页'</span><span class="token punctuation">,</span>              icon<span class="token operator">:</span> <span class="token string">'s-home'</span><span class="token punctuation">,</span>              url<span class="token operator">:</span> <span class="token string">'home/index'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>              path<span class="token operator">:</span> <span class="token string">'/video'</span><span class="token punctuation">,</span>              name<span class="token operator">:</span> <span class="token string">'video'</span><span class="token punctuation">,</span>              label<span class="token operator">:</span> <span class="token string">'商品管理'</span><span class="token punctuation">,</span>              icon<span class="token operator">:</span> <span class="token string">'video-play'</span><span class="token punctuation">,</span>              url<span class="token operator">:</span> <span class="token string">'mall/index'</span>            <span class="token punctuation">}</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          token<span class="token operator">:</span> Mock<span class="token punctuation">.</span>Random<span class="token punctuation">.</span><span class="token function">guid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          message<span class="token operator">:</span> <span class="token string">'获取成功'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        code<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">{</span>          message<span class="token operator">:</span> <span class="token string">'密码错误'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></template></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;项目的技术栈展示-以及项目的核心重点部分&quot;&gt;&lt;a href=&quot;#项目的技术栈展示-以及项目的核心重点部分&quot; class=&quot;headerlink&quot; title=&quot;项目的技术栈展示 以及项目的核心重点部分&quot;&gt;&lt;/a&gt;项目的技术栈展示 以及项目的核心重点部分&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vuex学习</title>
    <link href="https://wuzimo233.github.io/posts/13.html"/>
    <id>https://wuzimo233.github.io/posts/13.html</id>
    <published>2022-05-26T07:00:00.000Z</published>
    <updated>2022-05-26T07:25:52.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vuex学习"><a href="#Vuex学习" class="headerlink" title="Vuex学习"></a>Vuex学习</h1><h2 id="1、Vuex是什么？"><a href="#1、Vuex是什么？" class="headerlink" title="1、Vuex是什么？"></a>1、Vuex是什么？</h2><p>1.介绍</p><p>​        Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p>2.说明：</p><p>​        Vuex是vue组件之间数据传递的方式，任意组件都可以使用-类似大仓库  </p><p>一般来说某个组件要用数据，可以调用<strong>Render读取</strong>Vuex中的数据，然后使用Dispatch调用<strong>Actions修改</strong>页面的数据，当然还有许多其他步骤，这只是最经典的动作（<strong>先读再操作</strong>）。Actions操作后会利用中间转接人<strong>Mutations去修改State</strong>，</p><p><img src="https://v3.vuex.vuejs.org/vuex.png" alt="vuex"></p><h2 id="2、安装Vuex"><a href="#2、安装Vuex" class="headerlink" title="2、安装Vuex"></a>2、安装Vuex</h2><ol><li><p>安装：</p><p><code>cnpm install vuex --save</code> 目前默认安装的是Vue3的vuex4版本，vue2需要安装指定版本，我使用的npm i <a href="mailto:vuex@3.6.2">vuex@3.6.2</a></p></li><li><p>main.js 全局引入</p><p><code>import Vue from 'vue'</code><br><code>import Vuex from 'vuex'</code><br><code>Vue.use(Vuex)</code></p></li></ol><p>​    3.创建store仓库<br>​            每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的状态 (state)</p><p>​            <strong>Vuex 和单纯的全局对象有以下两点不同：</strong></p><p>​        1. Vuex 的状态存储是响应式的，当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p><p>​        2. 你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation</p><p><strong>最简单的 Store</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token comment">// 1.引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment">// 2.使用Vuex</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment">// 3.创建Vuex仓库</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment">// 4.共享的数据</span>    state<span class="token operator">:</span><span class="token punctuation">{</span>      user<span class="token operator">:</span><span class="token string">'admin'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  router<span class="token punctuation">,</span>  <span class="token comment">// 5.仓库放到（挂载）Vue实例上去</span>  store<span class="token punctuation">,</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、Vuex核心概念"><a href="#3、Vuex核心概念" class="headerlink" title="3、Vuex核心概念"></a>3、Vuex核心概念</h2><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><h5 id="1-介绍："><a href="#1-介绍：" class="headerlink" title="1.介绍："></a>1.介绍：</h5><p>​        1. Vuex 使用单一状态树——是的，用一个对象就包含了全部的应用层级状态。</p><p>​        2.说明：state就是存储数据仓库 容器 </p><h5 id="2-获取state数据"><a href="#2-获取state数据" class="headerlink" title="2.获取state数据"></a>2.获取state数据</h5><h6 id="1、this-直接获取"><a href="#1、this-直接获取" class="headerlink" title="1、this 直接获取"></a>1、this 直接获取</h6><p>​        <strong><code>this.$store.state.xxx</code></strong></p><p>​        假如某个组件想获取刚才定义在Vuex中store仓库里state中的user数据，就可以通过this下的$store来找到</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>我是home<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>vuex<span class="token operator">-</span>直接获取state数据：<span class="token punctuation">{</span><span class="token punctuation">{</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>user<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//'admin'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2、mapState-辅助函数获取"><a href="#2、mapState-辅助函数获取" class="headerlink" title="2、mapState 辅助函数获取"></a>2、mapState 辅助函数获取</h6><h6 id="了解三个使用方式："><a href="#了解三个使用方式：" class="headerlink" title="了解三个使用方式："></a>了解三个使用方式：</h6><p>三个辅助函数使用方法，不必掌握因为比较麻烦且不能复用计算属性</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>我是home<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>vuex<span class="token operator">-</span>直接获取state数据：<span class="token punctuation">{</span><span class="token punctuation">{</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>user<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>mapState辅助函数 箭头函数 写法获取state数据：<span class="token punctuation">{</span><span class="token punctuation">{</span> user1 <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>mapState辅助函数 字符串 写法获取state数据：<span class="token punctuation">{</span><span class="token punctuation">{</span> user2 <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>mapState辅助函数 普通函数方法 写法获取state数据：<span class="token punctuation">{</span><span class="token punctuation">{</span> user3 <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token comment">// 1.导入辅助函数</span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      msg<span class="token operator">:</span><span class="token string">'你好'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 2.使用计算属性获取state方法---了解</span>  computed<span class="token operator">:</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment">// 方式1、箭头函数写法（代码更简练）</span>      <span class="token function-variable function">user1</span><span class="token operator">:</span><span class="token parameter">state</span><span class="token operator">=&gt;</span>state<span class="token punctuation">.</span>user<span class="token punctuation">,</span>      <span class="token comment">// 方式2、传字符串参数 'count' 等同于 `state =&gt; state.count`</span>      user2<span class="token operator">:</span><span class="token string">'user'</span><span class="token punctuation">,</span>      <span class="token comment">// 方式3、为了能够使用 `this` 获取局部状态，必须使用常规函数</span>      <span class="token function">user3</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> state<span class="token punctuation">.</span>user<span class="token operator">+</span><span class="token string">'----'</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="需要掌握的使用方式："><a href="#需要掌握的使用方式：" class="headerlink" title="需要掌握的使用方式："></a>需要掌握的使用方式：</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>我是home<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>vuex<span class="token operator">-</span>直接获取state数据：<span class="token punctuation">{</span><span class="token punctuation">{</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>user<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token comment">// 4.直接使用</span>    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>mapState辅助函数 字符串数组写法 获取state数据：<span class="token punctuation">{</span><span class="token punctuation">{</span> user <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token punctuation">{</span><span class="token punctuation">{</span> count <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token comment">// 1.导入辅助函数</span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      msg<span class="token operator">:</span><span class="token string">'你好'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 2.使用计算属性获取state方法---掌握</span>  computed<span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token comment">//3.mapState 传一个字符串数组方法 ——名称要和vuex仓库里的数据名一致  因为是数据所以放在计算属性里 注意别和data里数据名重复</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">,</span><span class="token string">'count'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然直接把vuex放到main.js中不合适，可以单独在项目根下创建一个叫做store文件夹，里面创建一个index.js的文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1. 引入Vue</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// 2.引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment">// 3.使用Vuex</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment">// 4.创建Vuex仓库</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment">// 5.共享的数据</span>    state<span class="token operator">:</span><span class="token punctuation">{</span>      user<span class="token operator">:</span><span class="token string">'admin'</span><span class="token punctuation">,</span>      count<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 6.导出</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后再在main.js中导入引入store</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   <span class="token comment">//路由挂载到vue实例</span>  router<span class="token punctuation">,</span>  <span class="token comment">// 仓库放到（挂载到）Vue实例</span>  store<span class="token punctuation">,</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Mutations"><a href="#Mutations" class="headerlink" title="Mutations"></a>Mutations</h3><h5 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h5><p>​    更改 Vuex 的 store 中的状态的唯一方法是提交 mutation<br>​     Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数</p><h5 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h5><p>4-2 处定义一个mutations对象，里面包含想修改state数据的方法</p><p><strong>mutations里的方法有两个参数，比如</strong> addCount(state,payload)  –其中state是固定的state数据，payload是要携带的参数可以省略(参数可以是对象、字符串、数字)</p><p><strong>无参数版</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1. 引入Vue</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// 2.引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment">// 3.使用Vuex</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment">// 4.创建Vuex仓库</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment">// 4-1.共享的数据 说明：state状态 任意类型</span>    state<span class="token operator">:</span><span class="token punctuation">{</span>      user<span class="token operator">:</span><span class="token string">'admin'</span><span class="token punctuation">,</span>      count<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 4-2.修改state仓库数据 里面包含的是方法-修改state数据</span>    mutations<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            state<span class="token punctuation">.</span>count <span class="token operator">++</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">reduceCount</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            state<span class="token punctuation">.</span>count <span class="token operator">-=</span> <span class="token number">10</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 5.导出</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>有参数版</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">mutations<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>num</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//增加了一个参数需要在使用的组件里添加具体参数</span>            state<span class="token punctuation">.</span>count <span class="token operator">+=</span> num         <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">reduceCount</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span><span class="token punctuation">{</span>num<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            state<span class="token punctuation">.</span>count <span class="token operator">-=</span> num        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>以下是其他组件需要使用muaations时携带参数的方法<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>我是home<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>mutations修改state数据<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"add"</span><span class="token operator">&gt;</span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"reduce"</span><span class="token operator">&gt;</span><span class="token operator">-</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 使用commit()方法调用mutations里的方法去修改state数据 同时将参数10代入</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'addCount'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">//即当前每次点击增加10</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'reduceCount'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            num<span class="token operator">:</span><span class="token number">8</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-操作方法："><a href="#3-操作方法：" class="headerlink" title="3.操作方法："></a>3.操作方法：</h5><h6 id="1、直接操作mutations"><a href="#1、直接操作mutations" class="headerlink" title="1、直接操作mutations"></a>1、直接操作mutations</h6><p>直接使用commit()方法调用mutations里的方法去修改state数据</p><p>在需要修改的组件里使用  this.$store.commit(state,payload)  –state是定义在mutations里的方法名，payload是参数需要看mutations里的方法是否可以省略</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>我是home<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>mutations修改state数据<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"add"</span><span class="token operator">&gt;</span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"reduce"</span><span class="token operator">&gt;</span><span class="token operator">-</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 注意：不能直接修改 仓库不会同步视图</span>        <span class="token comment">// this.$store.state.count = 200</span>        <span class="token comment">// 使用commit()方法调用mutations里的方法去修改state数据</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'addCount'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'reduceCount'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2、辅助函数操作"><a href="#2、辅助函数操作" class="headerlink" title="2、辅助函数操作"></a>2、辅助函数操作</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>我是home<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>mutations修改state数据<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"add2"</span><span class="token operator">&gt;</span>辅助函数<span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"reduce2"</span><span class="token operator">&gt;</span>辅助函数<span class="token operator">-</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token comment">// 1.引入辅助函数</span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapMutations <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token comment">// 2.mapMutations 是方法所以放在methods里</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'addCount'</span><span class="token punctuation">,</span><span class="token string">'reduceCount'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">add2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">// 3.操作辅助函数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addCount</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">reduce2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reduceCount</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        num<span class="token operator">:</span><span class="token number">20</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3、Mutation-必须是同步函数"><a href="#3、Mutation-必须是同步函数" class="headerlink" title="3、Mutation 必须是同步函数"></a>3、Mutation 必须是同步函数</h6><p>一条重要的原则就是要记住 mutation 必须是同步函数</p><h6 id="4、-Mutation-需遵守-Vue-的响应规则"><a href="#4、-Mutation-需遵守-Vue-的响应规则" class="headerlink" title="4、 Mutation 需遵守 Vue 的响应规则"></a>4、 Mutation 需遵守 Vue 的响应规则</h6><p> Vuex 中的 mutation 也需要与使用 Vue 一样遵守一些注意事项：<br>       1. 最好提前在你的 store 中初始化好所有所需属性。<br>    1. 当需要在对象上添加新属性时，你应该<br>        使用 Vue.set(obj, ‘newProp’, 123), 或者<br>        以新对象替换老对象。例如，利用对象展开运算符 (opens new window)我们可以这样写：<br>        state.obj = { …state.obj, newProp: 123 }</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">mutations<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            state<span class="token punctuation">.</span>count <span class="token operator">+=</span> num        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">reduceCount</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span><span class="token punctuation">{</span>num<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            state<span class="token punctuation">.</span>count <span class="token operator">-=</span> num        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">// 修改已经存在的属性</span>        <span class="token function">changeUserinfo</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>payload</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            state<span class="token punctuation">.</span>userinfo<span class="token punctuation">.</span>uname <span class="token operator">=</span> payload<span class="token punctuation">.</span>uname        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">// 添加数据</span>        <span class="token function">addUserinfo</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>payload</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 直接增加属性 数据会修改 但是视图不同步</span>            <span class="token comment">// state.userinfo.love = payload.love;</span>                        <span class="token comment">// 解决方式：</span>            <span class="token comment">// 1.提前定义好属性</span>            <span class="token comment">// 2.Vue.set(obj,'属性','值')</span>            <span class="token comment">// 3.{...}</span>            <span class="token comment">// 4.Object.assign()</span>            Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>userinfo<span class="token punctuation">,</span><span class="token string">'love'</span><span class="token punctuation">,</span>payload<span class="token punctuation">.</span>love<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>组件中使用：</strong>  当添加一个没有存在的属性 state会添加成功但是页面不会显示，因为对象里的属性地址是没有改变的vue检测不到</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"about"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>我是about<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>获取userinfo数据<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">{</span>userinfo<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"addobj"</span><span class="token operator">&gt;</span>对象添加一个不存在的属性<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  computed<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'userinfo'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">// 直接修改state数据</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'changeUserinfo'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        uname<span class="token operator">:</span><span class="token string">'zimo'</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 当添加一个没有存在的属性 state会添加成功但是页面不会显示，因为对象里的属性地址是没有改变的vue检测不到</span>    <span class="token function">addobj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'addUserinfo'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        love<span class="token operator">:</span><span class="token string">'擦擦擦'</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="5、-使用常量替代-Mutation-事件类型"><a href="#5、-使用常量替代-Mutation-事件类型" class="headerlink" title="5、 使用常量替代 Mutation 事件类型"></a>5、 使用常量替代 Mutation 事件类型</h6><p>使用常量替代 mutation中 事件类型（即方法的名称）在各种 Flux 实现中是很常见的模式。这样可以使 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然：</p><p>首先在store下新建js文件，里边写一个对象暴露出去</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** 定义mutations事件类型：函数名称定义常量*/</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">ADDCOUNT</span> <span class="token operator">=</span> <span class="token string">'ADDCOUNT'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id=""><a href="#" class="headerlink" title=""></a></h6><p>在需要用到mutations的组件里这样使用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>我是home<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>mutations修改state数据<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"add"</span><span class="token operator">&gt;</span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"reduce"</span><span class="token operator">&gt;</span><span class="token operator">-</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"add2"</span><span class="token operator">&gt;</span>辅助函数<span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"reduce2"</span><span class="token operator">&gt;</span>辅助函数<span class="token operator">-</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token comment">// 辅助函数</span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState<span class="token punctuation">,</span>mapMutations <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment">//1. 导入常量js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">ADDCOUNT</span><span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../store/mutation-types.js'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">,</span><span class="token string">'count'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token comment">// 2.辅助函数里也改成定义的常量名</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token constant">ADDCOUNT</span><span class="token punctuation">,</span><span class="token string">'reduceCount'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 3.使用commit()方法调用mutations里的方法也要改为常量名</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token constant">ADDCOUNT</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'reduceCount'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>          num<span class="token operator">:</span><span class="token number">8</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">add2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//4. 其他直接使用辅助函数＋的地方也改为常量名</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ADDCOUNT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">reduce2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reduceCount</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        num<span class="token operator">:</span><span class="token number">20</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><h5 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h5><p>​        Action 类似于 mutation，不同在于：</p><ul><li><p><strong>Action 提交的是 mutation，而不是直接变更状态。</strong></p></li><li><p><strong>Action 可以包含任意异步操作。</strong></p></li></ul><h5 id="2、例子"><a href="#2、例子" class="headerlink" title="2、例子"></a>2、例子</h5><p>注册一个简单的 action：</p><p>action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 <code>context.commit</code> 提交一个 mutation，或者通过 <code>context.state</code> 和 <code>context.getters</code> 来获取 state 和 getters。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token operator">:</span> <span class="token punctuation">{</span>    count<span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>count<span class="token operator">++</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、操作Action"><a href="#3、操作Action" class="headerlink" title="3、操作Action"></a>3、操作Action</h5><h6 id="1-直接获取actions"><a href="#1-直接获取actions" class="headerlink" title="1.直接获取actions"></a>1.直接获取actions</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'actions里的函数名'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="2-辅助函数获取actions"><a href="#2-辅助函数获取actions" class="headerlink" title="2.辅助函数获取actions"></a>2.辅助函数获取actions</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1.引入mapActions辅助函数</span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapActions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span>    <span class="token comment">//2.在方法里面调用</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'increment'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">//3.使用辅助函数里的方法</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、实际上手练习"><a href="#4、实际上手练习" class="headerlink" title="4、实际上手练习"></a>4、实际上手练习</h5><h6 id="1-定义actions对象"><a href="#1-定义actions对象" class="headerlink" title="1.定义actions对象"></a>1.定义actions对象</h6><p>首先在vuex文件下定义actions对象（4-3），准备一个异步函数，第一个参数context与 store 实例具有相同方法和属性，第二个参数是因为mutstions里减法函数需要一个对象参数num，使用context.commit()方法，第一个参数是mutations里的方法名称，第二个参数是接收上边传递的参数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1. 引入Vue</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// 2.引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment">// 3.使用Vuex</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment">// 4.创建Vuex仓库</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment">// 4-1.共享的数据 说明：state状态 任意类型</span>    state<span class="token operator">:</span><span class="token punctuation">{</span>      count<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 4-2.修改state仓库数据 里面包含的是方法-修改state数据</span>    mutations<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token function">reduceCount</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span><span class="token punctuation">{</span>num<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            state<span class="token punctuation">.</span>count <span class="token operator">-=</span> num        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 4-3. actions操作异步 执行mutations</span>    actions<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token comment">// 定义函数-异步</span>        <span class="token function">asyncReduceCount</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//模拟异步请求 5秒后操作上面的mutations里的减法函数 reduceCount</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>                context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'reduceCount'</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 5.导出</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-在组件上使用"><a href="#2-在组件上使用" class="headerlink" title="2.在组件上使用"></a>2.在组件上使用</h6><p>1、组件里<strong>直接调用actions</strong></p><p>使用<code>this.$store.dispatch（'想要调用的actions里的方法名称',’需要传递的num值‘）</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"about"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>我是about<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>操作actions<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>vuex<span class="token operator">-</span>count<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">{</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"jian"</span><span class="token operator">&gt;</span>actions 直接调用<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  methods<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token function">jian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'asyncReduceCount'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        num<span class="token operator">:</span><span class="token number">10</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、组件里使用<strong>辅助函数方法调用actions</strong> </p><p>例子1</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"about"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>我是about<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>操作actions<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>vuex<span class="token operator">-</span>count<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">{</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"jian2"</span><span class="token operator">&gt;</span>actions 辅助函数调用<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>mapActions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  methods<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'asyncReduceCount'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">jian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//直接调用actions</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'asyncReduceCount'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        num<span class="token operator">:</span><span class="token number">10</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">jian2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">// 辅助函数方法调用actions</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">asyncReduceCount</span><span class="token punctuation">(</span><span class="token punctuation">{</span>num<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子2 </p><p>组件获取state里的用户名</p><p>安装一下axios</p><p><code>cnpm i axios  - S</code></p><p>然后在vuex文件下store仓库的代码如下</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    state<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token comment">//1.定义一个空的用户名</span>      user<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    mutations<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token comment">// 2.定义一个修改state的user函数</span>        <span class="token function">changeUser</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>uname</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            state<span class="token punctuation">.</span>user <span class="token operator">=</span> uname        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    actions<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token comment">// 3.定义一个异步请求--用户名的函数</span>        <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://iwenwiki.com/api/blueberrypai/getIndexBanner.php'</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>banner<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 4.数据获取成功后，解析出来想要的数据格式 --再利用mutations来修改状态state</span>                <span class="token comment">// 5.操作-mutations可以使用contxet.commit('要操作的方法名','其他参数')来修改用户名</span>                context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'changeUser'</span><span class="token punctuation">,</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>banner<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在组件里的代码如下</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"about"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>我是about<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>用户名<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">{</span>user<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"getUser1"</span><span class="token operator">&gt;</span>获取用户名<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState<span class="token punctuation">,</span>mapActions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  computed<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'userinfo'</span><span class="token punctuation">,</span><span class="token string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'asyncReduceCount'</span><span class="token punctuation">,</span><span class="token string">'getUser'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">getUser1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><h5 id="1、介绍-1"><a href="#1、介绍-1" class="headerlink" title="1、介绍"></a>1、介绍</h5><p>​        Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。对数据缓存和过滤处理。</p><h5 id="2、如何访问"><a href="#2、如何访问" class="headerlink" title="2、如何访问"></a>2、如何访问</h5><h6 id="1-直接获取getters"><a href="#1-直接获取getters" class="headerlink" title="1.直接获取getters"></a>1.直接获取getters</h6><p>​                this.$store.getters.属性        </p><h6 id="2-辅助函数访问"><a href="#2-辅助函数访问" class="headerlink" title="2.辅助函数访问"></a>2.辅助函数访问</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> mapGetters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>   <span class="token comment">// ...</span>   computed<span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span>       <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'doneTodosCount'</span><span class="token punctuation">,</span><span class="token string">'anotherGetter'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、例子"><a href="#3、例子" class="headerlink" title="3、例子"></a>3、例子</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    state<span class="token operator">:</span><span class="token punctuation">{</span>      user<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    mutations<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    actions<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    getters<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token function-variable function">userName</span><span class="token operator">:</span><span class="token parameter">state</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> state<span class="token punctuation">.</span>user <span class="token operator">+</span><span class="token string">'vip用户'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他组件使用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"about"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>我是about<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h4<span class="token operator">&gt;</span>getters使用<span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>用户名<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">{</span>user<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>新的用户名直接读取：<span class="token punctuation">{</span><span class="token punctuation">{</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>userName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>新的用户名辅助函数读取：<span class="token punctuation">{</span><span class="token punctuation">{</span>userName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>  <span class="token comment">//1. 导入辅助函数</span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState<span class="token punctuation">,</span>mapActions<span class="token punctuation">,</span>mapGetters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">// 2.计算属性中使用辅助函数</span>  computed<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'userinfo'</span><span class="token punctuation">,</span><span class="token string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'userName'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="-2"><a href="#-2" class="headerlink" title=""></a></h4><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="1、vuex仓库数据-state-getters"><a href="#1、vuex仓库数据-state-getters" class="headerlink" title="1、vuex仓库数据 state getters"></a>1、vuex仓库数据 state getters</h4><h5 id="1-state-获取："><a href="#1-state-获取：" class="headerlink" title="1.state 获取："></a>1.state 获取：</h5><p>​        1、直接获取</p><p>​        this.$store.state.xx</p><p>​        2、辅助函数获取</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入辅助函数...</span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span>computed<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-getters获取"><a href="#2-getters获取" class="headerlink" title="2.getters获取:"></a>2.getters获取:</h5><p>​        1、直接获取<br>​        this.$store.getters.xx</p><p>​        2、辅助函数获取</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入辅助函数...</span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapGetters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span>computed<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、操作修改state-–mutations-actions"><a href="#2、操作修改state-–mutations-actions" class="headerlink" title="2、操作修改state –mutations actions"></a>2、操作修改state –mutations actions</h4><h5 id="1-mutations操作"><a href="#1-mutations操作" class="headerlink" title="1.mutations操作"></a>1.mutations操作</h5><p>​        1、直接获取<br>​        this.$store.commit(‘函数名字’,’参数’)</p><p>​        2、辅助函数获取</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入辅助函数...</span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapMutations <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span>computed<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-actions操作"><a href="#2-actions操作" class="headerlink" title="2.actions操作"></a>2.actions操作</h5><p>​        1、直接获取<br>​        this.$store.dispatch(‘函数名字’,’参数’)</p><p>​        2、辅助函数获取</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入辅助函数...</span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapActions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span>computed<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><h5 id="1、介绍："><a href="#1、介绍：" class="headerlink" title="1、介绍："></a>1、介绍：</h5><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块</p><p><strong>简单来说store还有一个modules属性对象里面可以单独存储入</strong>：用户信息、城市数据、购物车数据、搜索数据等等</p><h5 id="2、命名空间"><a href="#2、命名空间" class="headerlink" title="2、命名空间:"></a>2、命名空间:</h5><p>​        <strong>如果希望你的模块具有更高的封装度和复用性，你可以通过添加 namespaced: true 的方式使其成为带命名空间的模块。</strong></p><h5 id="3、modules的使用："><a href="#3、modules的使用：" class="headerlink" title="3、modules的使用："></a>3、modules的使用：</h5><p>4-5 处写一个modules对象，添加一个模块名称的属性对象，里面可以包含state，mutations，actions，getters</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1. 引入Vue</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// 2.引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">ADDCOUNT</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./mutation-types.js'</span><span class="token comment">// 3.使用Vuex</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment">// 4.创建Vuex仓库</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment">// 4-1.共享的数据 说明：state状态 任意类型</span>    state<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 4-2.修改state仓库数据 里面包含的是方法-修改state数据</span>    mutations<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 4-3. actions操作异步 执行mutations</span>    actions<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 4-4. getters 处理state数据进行加工</span>    getters<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">// 4-5. modules 模块 分类存储很多信息</span>    modules<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token comment">// 1、例：存城市数据</span>        cityModule<span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token comment">// 开启了命名空间 让actions mutations getters的作用域是当前的模块下而不是挂载到全局</span>            namespaced<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>            state<span class="token operator">:</span><span class="token punctuation">{</span>                cityName<span class="token operator">:</span><span class="token string">'成都'</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            mutations<span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token function">changeCity</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>payload</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    state<span class="token punctuation">.</span>cityName <span class="token operator">=</span> payload                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            actions<span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token comment">// 也可以写成这种格式 getCity({commit},city)</span>                <span class="token function">getCity</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>city</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'changeCity'</span><span class="token punctuation">,</span>city<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 5.导出</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在需要用到的模块组件下使用：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>城市模块的使用<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>h4<span class="token operator">&gt;</span>state<span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>当前城市<span class="token operator">--</span>直接读取：<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>cityModule<span class="token punctuation">.</span>cityName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>当前城市<span class="token operator">--</span>辅助函数读取：<span class="token punctuation">{</span><span class="token punctuation">{</span>cityName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>h4<span class="token operator">&gt;</span>mutations<span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"getCity1"</span><span class="token operator">&gt;</span>修改城市城名<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"getCity2"</span><span class="token operator">&gt;</span>辅助函数修改城市城名<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>h4<span class="token operator">&gt;</span>actions<span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"updateCity1"</span><span class="token operator">&gt;</span>actions<span class="token operator">-</span>修改城市城名<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"updateCity2"</span><span class="token operator">&gt;</span>actions<span class="token operator">-</span>辅助函数修改城市城名<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>h4<span class="token operator">&gt;</span>getters<span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> getters这里不能直接打点调用下面的方法，而是用中括号加引号 <span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>getters<span class="token operator">--</span>获取数据：cityVal<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">[</span><span class="token string">'cityModule/cityVal'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>getters<span class="token operator">--</span>辅助函数获取数据：cityVal<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>cityVal<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState<span class="token punctuation">,</span>mapMutations<span class="token punctuation">,</span>mapActions<span class="token punctuation">,</span>mapGetters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    methods<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token string">'cityModule'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'changeCity'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token string">'cityModule'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'getCity'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">getCity1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 1、直接获取模块下的mutations</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'cityModule/changeCity'</span><span class="token punctuation">,</span><span class="token string">'南京'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">getCity2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 2、辅助函数获取模块下的mutations下的changeCity方法</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeCity</span><span class="token punctuation">(</span><span class="token string">'南京'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">updateCity1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//1、直接使用actions模块下的getCity方法</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'cityModule/getCity'</span><span class="token punctuation">,</span><span class="token string">'北京'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">updateCity2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 2、辅助函数获取模块下的actions的getCity</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token string">'北京'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token comment">// ...mapState('模块名称',['模块里的变量'])</span>        <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token string">'cityModule'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'cityName'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token string">'cityModule'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'cityVal'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、带命名空间的模块内访问全局内容"><a href="#4、带命名空间的模块内访问全局内容" class="headerlink" title="4、带命名空间的模块内访问全局内容"></a>4、带命名空间的模块内访问全局内容</h5><h6 id="1-在getter对象里的四个参数"><a href="#1-在getter对象里的四个参数" class="headerlink" title="1.在getter对象里的四个参数"></a>1.在getter对象里的四个参数</h6><p>如果你希望使用全局 state 和 getter，<code>rootState</code> 和 <code>rootGetters</code> 会作为第三和第四参数传入 getter，也会通过 <code>context</code> 对象的属性传入 action</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">    <span class="token comment">// 4-5. modules 模块 分类存储很多信息</span>modules<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token comment">// 1、例：存城市数据</span>        cityModule<span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token comment">// 开启了命名空间 让actions mutations getters的作用域是当前的模块下而不是挂载到全局</span>            namespaced<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>            state<span class="token operator">:</span><span class="token punctuation">{</span>                cityName<span class="token operator">:</span><span class="token string">'成都'</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            getters<span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token function-variable function">cityVal</span><span class="token operator">:</span><span class="token parameter">state</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> state<span class="token punctuation">.</span>cityName <span class="token operator">+</span> <span class="token string">'好去处'</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment">// getGlobalCity方法 --getter数据处理的时候，获取全局的getters state数据</span>                <span class="token function">getGlobalCity</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>getters<span class="token punctuation">,</span>rootState<span class="token punctuation">,</span>rootGetters</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment">// state 获取当前模块的状态-state </span>                    <span class="token comment">// getters 获取当前模块的所有的getterrs</span>                    <span class="token comment">// rootState 获取根上的state数据 可以获取其他模块的数据</span>                    <span class="token comment">// rootGetters 获取根上所有的getters 全局的和所有模块的getters</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span>getters<span class="token punctuation">,</span>rootState<span class="token punctuation">,</span>rootGetters<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            mutations<span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token function">changeCity</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>payload</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    state<span class="token punctuation">.</span>cityName <span class="token operator">=</span> payload                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            actions<span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token comment">// 也可以写成这种格式 getCity({commit},city)</span>                <span class="token function">getCity</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>city</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'changeCity'</span><span class="token punctuation">,</span>city<span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment">//  注意：局部模块的context对象可以访问全局对象 state getters mutations getters 包括其他模块 ！</span>                <span class="token function">getGlobalCityAction</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组件中使用 如下，    // 同时局部模块的context对象可以访问全局对象 state getters mutations getters 包括其他模块</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>h4<span class="token operator">&gt;</span>模块内访问全局的数据state getters<span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"getGetters"</span> <span class="token operator">&gt;</span>访问getters<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"getGlobalCityAction1"</span> <span class="token operator">&gt;</span>访问局部模块的context对象<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState<span class="token punctuation">,</span>mapMutations<span class="token punctuation">,</span>mapActions<span class="token punctuation">,</span>mapGetters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    methods<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token string">'cityModule'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'changeCity'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token string">'cityModule'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'getCity'</span><span class="token punctuation">,</span><span class="token string">'getGlobalCityAction'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">getGetters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// console.log(this.getGlobalCity);</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>getGlobalCity        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">getGlobalCityAction1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getGlobalCityAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token comment">// ...mapState('模块名称',['模块里的变量'])</span>        <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token string">'cityModule'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'cityName'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token string">'cityModule'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'cityVal'</span><span class="token punctuation">,</span><span class="token string">'getGlobalCity'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-root-true-第三参数"><a href="#2-root-true-第三参数" class="headerlink" title="2.{ root: true } 第三参数"></a>2.{ root: true } 第三参数</h6><p>需要在全局命名空间内分发  (<strong>触发</strong>) action 或提交 mutation，将 { root: true } 作为第三参数传给 dispatch 或 commit 即可</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">actions方法接收一个context对象，使用context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法能操作mutation，第一个参数是mutations里的方法名称，第二个参数是接收上边传递的参数<span class="token punctuation">,</span>所以当第三个参数是<span class="token punctuation">{</span> root<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> 的时候，将可以访问到全局下的mutation，同理dispatch下能访问到全局下的action里的xx方法<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>解释：就是在命名的模块内想要访问全局的actions或者mutaitons里面的函数</p></li><li><p>语法：actions里面: context.commit(‘changeUser’,null,{root:true})</p><p>例如：在命名的模块下，如果对象想访问全局的actions 或者是全局的mutations 都是可以的</p></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//  modules 模块 分类存储很多信息</span>modules<span class="token operator">:</span><span class="token punctuation">{</span>           mutations<span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token function">changeCity</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>payload</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    state<span class="token punctuation">.</span>cityName <span class="token operator">=</span> payload                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            actions<span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token comment">// 局部模块的context对象可以访问全局对象 state getters mutations getters 包括其他模块</span>                <span class="token comment">// context对象里面包含了={dispatch:'',commit:'',state:'',getters:'',rootState:'',rootGetters:''}</span>                <span class="token function">getGlobalCityAction</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 如果对象想访问全局的actions 或者是全局的mutations 都是可以的 这里访问全局的mutations方法修改全局state数据</span>                    context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'changeUser'</span><span class="token punctuation">,</span><span class="token string">'局部修改全局的user'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>root<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="！！注意："><a href="#！！注意：" class="headerlink" title="！！注意："></a><strong>！！注意</strong>：</h3><h5 id="1、commit"><a href="#1、commit" class="headerlink" title="1、commit"></a>1、commit</h5><p>actions里的方法能够使用commit去调用mutations里的方法，</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">actions方法接收一个context对象，使用context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法能操作mutation，第一个参数是mutation里的方法名称，第二个参数是接收上边传递的参数<span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2、dispatch"><a href="#2、dispatch" class="headerlink" title="2、dispatch"></a>2、dispatch</h5><p>能够使用dispatch调用action里面的方法</p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><h5 id="1、规则"><a href="#1、规则" class="headerlink" title="1、规则"></a>1、规则</h5><p>虽然vuex设计并不限制你的代码结构，但是，它规定了一些需要遵守的规则：</p><p>​        a: 应用层级的状态应该集中到单个 store 对象中。（所有的数据都要在 new Vuex.Store中）<br>​        b: 提交 mutation 是更改状态的唯一方法，并且这个过程是同步的。（想改state数据只能通过mutation的方法去修改）<br>​        c: 异步逻辑都应该封装到 action 里面。</p><p>只要你遵守以上规则，如何组织代码随你便。</p><h5 id="2、项目结构实例"><a href="#2、项目结构实例" class="headerlink" title="2、项目结构实例"></a>2、项目结构实例</h5><p>通过上方的学习后会发现vuex文件已经有一百多行代码，看起来较为麻烦。vuex设计了只需将 action、mutation 和 getter 分割到单独的文件。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">项目结构示例└── store  ├── index<span class="token punctuation">.</span>js          # 我们组装模块并导出 store 的地方  ├── actions<span class="token punctuation">.</span>js        # 根级别的 action  ├── mutations<span class="token punctuation">.</span>js      # 根级别的 mutation  └── modules      ├── cart<span class="token punctuation">.</span>js       # 购物车模块      └── products<span class="token punctuation">.</span>js   # 产品模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在store文件夹下新建state 、mutations 、actions 、getterrs 后辍为.js的文件，模块文件需要单独在store下新建modules文件夹放入各个 模块名.js,然后将原store里的代码移动过去，并暴露出来，重新将项目分割后如下:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1. 引入Vue</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// 2.引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment">// 拆分后：引入state mutations actions getterrs 和命名空间模块cityModule、loginModule</span><span class="token keyword">import</span> state <span class="token keyword">from</span> <span class="token string">'./state'</span><span class="token keyword">import</span> mutations <span class="token keyword">from</span> <span class="token string">'./mutations'</span><span class="token keyword">import</span> actions <span class="token keyword">from</span> <span class="token string">'./actions'</span><span class="token keyword">import</span> getters <span class="token keyword">from</span> <span class="token string">'./getters'</span><span class="token keyword">import</span> cityModule <span class="token keyword">from</span> <span class="token string">'./modules/cityModule'</span><span class="token keyword">import</span> loginModule <span class="token keyword">from</span> <span class="token string">'./modules/loginModule'</span><span class="token comment">// 3.使用Vuex</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment">// 4.创建Vuex仓库</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment">// 4-1.共享的数据 说明：state状态 任意类型</span>    state<span class="token operator">:</span>state<span class="token punctuation">,</span>    <span class="token comment">// 4-2.修改state仓库数据 里面包含的是方法-修改state数据</span>    mutations<span class="token operator">:</span>mutations<span class="token punctuation">,</span>    <span class="token comment">// 4-3. actions操作异步 执行mutations</span>    actions<span class="token operator">:</span>actions<span class="token punctuation">,</span>    <span class="token comment">// 4-4. getters 处理state数据进行加工</span>    getters<span class="token operator">:</span>getters<span class="token punctuation">,</span>    <span class="token comment">// 4-5. modules 模块 分类存储很多信息</span>    modules<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token comment">// 1、例：存城市数据</span>        cityModule<span class="token operator">:</span>cityModule<span class="token punctuation">,</span>        <span class="token comment">// 2、例：存用户的数据</span>        loginModule<span class="token operator">:</span>loginModule<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 5.导出</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vuex学习&quot;&gt;&lt;a href=&quot;#Vuex学习&quot; class=&quot;headerlink&quot; title=&quot;Vuex学习&quot;&gt;&lt;/a&gt;Vuex学习&lt;/h1&gt;&lt;h2 id=&quot;1、Vuex是什么？&quot;&gt;&lt;a href=&quot;#1、Vuex是什么？&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Vuex" scheme="https://wuzimo233.github.io/tags/Vuex/"/>
    
  </entry>
  
  <entry>
    <title>Uni-app学习</title>
    <link href="https://wuzimo233.github.io/posts/12.html"/>
    <id>https://wuzimo233.github.io/posts/12.html</id>
    <published>2022-05-04T15:17:00.000Z</published>
    <updated>2022-05-04T15:23:37.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><ul><li>有vue基础</li></ul><h1 id="什么是uni-app"><a href="#什么是uni-app" class="headerlink" title="什么是uni-app"></a>什么是uni-app</h1><ul><li>uni-app 是DCloud公司打造的一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝）、快应用等多个平台。</li></ul><h2 id="HTML结构-简单了解"><a href="#HTML结构-简单了解" class="headerlink" title="HTML结构(简单了解)"></a>HTML结构(简单了解)</h2><ol><li>View容器–类似于div</li><li>text文本–包裹文本</li><li>swiper–轮播图</li><li>img–图片</li><li>video–视频</li><li>button–按钮</li></ol><h2 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h2><ol><li>属性<ul><li>字体</li><li>大小</li><li>布局：float</li></ul></li><li>选择器<br> class</li><li>取值与单位<ul><li>px</li><li>color</li><li>rpx 自动根据屏幕大小比例进行适配</li></ul></li><li>盒子模型<br> margin:外边距<br> padding:内边距<br> border:边框</li><li>弹性盒子模型<br> 更好的布局</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前置条件&quot;&gt;&lt;a href=&quot;#前置条件&quot; class=&quot;headerlink&quot; title=&quot;前置条件&quot;&gt;&lt;/a&gt;前置条件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;有vue基础&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;什么是uni-app&quot;&gt;&lt;a href=&quot;#什么是uni-a</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="uni-app" scheme="https://wuzimo233.github.io/tags/uni-app/"/>
    
  </entry>
  
  <entry>
    <title>Vue-图书管理案例</title>
    <link href="https://wuzimo233.github.io/posts/11.html"/>
    <id>https://wuzimo233.github.io/posts/11.html</id>
    <published>2022-04-26T04:00:00.000Z</published>
    <updated>2022-04-29T16:41:10.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><ul><li>安装Visual Studio Code（代码编辑器）</li><li>电脑已安装node.js</li><li>配置好vue相关文件</li></ul><h1 id="开始构建"><a href="#开始构建" class="headerlink" title="开始构建"></a>开始构建</h1><ul><li><p>电脑任意位置新建文件夹命名为”Vue-图书管理”</p></li><li><p>新建文件index.html 并创建基本html结构</p></li><li><p>因为是局部使用vue ，需要cdn方式引入Vue</p><pre class="line-numbers language-none"><code class="language-none">&lt;script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"&gt;&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>开始 new vue实例 并赋值为vm，在其内部构建</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;    const vm = new Vue({      el:'#app', //获取vue的边界element元素 即展示的区域      data:{      },      methods:{                      }    })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将data里放入图书的数组数据</p><pre class="line-numbers language-none"><code class="language-none">data:{    books: [        {            id: 1,            name: "三国演义",            price: "12",        },        {            id: 2,            name: "水浒传",            price: "20",        },        {            id: 3,            name: "红楼梦",            price: "20512",        },        {            id: 4,            name: "西游记",            price: "212",        },    ],},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>布局基本html样式</p><pre class="line-numbers language-none"><code class="language-none">&lt;h2&gt;图书管理&lt;/h2&gt;&lt;div id="app"&gt;    &lt;div &gt;        编号：&lt;input type="text" v-model="obj.id"&gt;        名称：&lt;input type="text" v-model="obj.name"&gt;         价格：&lt;input type="text" v-model="obj.price"&gt;        &lt;button type="submit" @click="submit"&gt;提交&lt;/button&gt;    &lt;/div&gt;    &lt;p&gt;图书总数: {{num}}&lt;/p&gt;    &lt;table border="1" cellspacing='0' width="300px"&gt;        &lt;tr&gt;            &lt;th&gt;编号&lt;/th&gt;            &lt;th&gt;名称&lt;/th&gt;            &lt;th&gt;价格&lt;/th&gt;            &lt;th&gt;操作&lt;/th&gt;        &lt;/tr&gt;        &lt;tr v-for="(item,index) in books" :key="item.id"&gt;            &lt;td&gt;{{item.id}}&lt;/td&gt;            &lt;td&gt;{{item.name}}&lt;/td&gt;            &lt;td&gt;{{item.price}}&lt;/td&gt;            &lt;td&gt;                &lt;a href=""&gt;编辑&lt;/a&gt; |                &lt;a href=""&gt;删除&lt;/a&gt;            &lt;/td&gt;        &lt;/tr&gt;    &lt;/table&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>增加添加图书功能</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;      const vm = new Vue({          el:'#app', //获取vue的边界element元素 即展示的区域          data:{              obj:{                  id:'',                  name:'',                  price:'',              },              newobj:'',              num:'',              books: [                  {                      id: 1,                      name: "三国演义",                      price: "12",                  },                  {                      id: 2,                      name: "水浒传",                      price: "20",                  },                  {                      id: 3,                      name: "红楼梦",                      price: "21",                  },                  {                      id: 4,                      name: "西游记",                      price: "22",                  },              ],          },          methods:{              submit(){                  // 1.获取用户输入的信息 并保存到data里的obj里                  this.newobj = this.o                      // 2. 追加数组 将obj对象推入data中 books里                  this.books.push(this.newob                      // 3. 清空输入框的信息                  this.obj = {                      id:'',                      name:'',                      price:'',                  }              },          }      })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编辑图书功能</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;    &lt;h2&gt;图书管理&lt;/h2&gt;    &lt;div id="app"&gt;        &lt;div &gt;            编号：&lt;input type="text" v-model="obj.id" :disabled="isDisabled"&gt;            名称：&lt;input type="text" v-model="obj.name"&gt;             价格：&lt;input type="text" v-model="obj.price"&gt;            &lt;button type="submit" @click="submit" :disabled="noSubmit"&gt;提交&lt;/button&gt;        &lt;/div&gt;        &lt;p&gt;图书总数: {{num}}&lt;/p&gt;        &lt;table border="1" cellspacing='0' width="300px"&gt;            &lt;tr&gt;                &lt;th&gt;编号&lt;/th&gt;                 &lt;th&gt;名称&lt;/th&gt;                &lt;th&gt;价格&lt;/th&gt;                &lt;th&gt;操作&lt;/th&gt;            &lt;/tr&gt;            &lt;tr v-for="(item,index) in books" :key="item.id"&gt;                &lt;td&gt;{{item.id}}&lt;/td&gt;                &lt;td&gt;{{item.name}}&lt;/td&gt;                &lt;td&gt;{{item.price}}&lt;/td&gt;                &lt;td&gt;                    &lt;a href="##" @click.prevent="editor(index)"&gt;编辑&lt;/a&gt; |                    &lt;a href="##"&gt;删除&lt;/a&gt;                &lt;/td&gt;            &lt;/tr&gt;        &lt;/table&gt;    &lt;/div&gt;    &lt;script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"&gt;&lt;/script&gt;        &lt;script&gt;        Vue.config.productionTip= false;        const vm = new Vue({            el:'#app', //获取vue的边界element元素 即展示的区域            data:{                noSubmit:false, //禁止提交按钮的状态                isDisabled:false, //默认可以点击                indexData:'', //存储index标识                obj:{                    id:'',                    name:'',                    price:'',                },                newobj:'',                num:'2',                books: [                    {                        id: 1,                        name: "三国演义",                        price: "12",                    },                    {                        id: 2,                        name: "水浒传",                        price: "20",                    },                    {                        id: 3,                        name: "红楼梦",                        price: "21",                    },                    {                        id: 4,                        name: "西游记",                        price: "22",                    },                ],            },            methods:{                // 提交按钮                submit(){                    // 判断是否是提交新数据还是修改旧数据                    if(this.isDisabled) {                        //编辑功能:                        // 方法 1： 获取index 找操作的行元素 修改它                        // console.log('编辑');                        // console.log('编辑的当前行',this.books[this.indexData]);                        // this.books[this.indexData].name = this.obj.name                        // this.books[this.indexData].price = this.obj.price                                                // 方法 2： 找id  获取编辑的id == books里面的id                        // 使用方法 some 查找原数组里是否有某元素 如果有返回true                        // ele 可以获取books数组的每一项                        this.books.some( (ele) =&gt; {                           if( ele.id == this.obj.id){ //这个ele就是编辑的数据                            ele.name = this.obj.name                            ele.price = this.obj.price                            return true                           }                        })                        // 释放禁止按钮                        this.isDisabled = false;                    }else { //添加功能                        // 1.获取用户输入的信息 并保存到data里的obj里                        this.newobj = this.obj                            // 2. 追加数组 将obj对象推入data中 books里                        this.books.push(this.newobj)                        }                    // 3. 清空输入框的信息                    this.obj = {                        id:'',                        name:'',                        price:'',                    }                },                // 编辑按钮                editor(index){                    //1 获取当前行的数据  渲染到文本框中                    console.log(this.books[index]);                    // this.obj.id = this.books[index].id                    // this.obj.name = this.books[index].name                    // this.obj.price = this.books[index].price                    this.obj = this.books[index]                    // 2. 编辑的时候--编号禁止操作                    this.isDisabled = true;                    // 3. 存储index下标---目的：提交的时候 修改的是哪个数据用                    this.indexData = index;                }            },            //侦听器            watch:{               "obj.name":function(val){                    console.log('监听了数据变化',val);                    var flag = this.books.some(ele =&gt; {                        return ele.name == val                    })                    if(flag) {                        this.noSubmit = true                        alert('已经存在相同名称书籍')                    } else {                        this.noSubmit = false                    }                                       }            }        })    &lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前置条件&quot;&gt;&lt;a href=&quot;#前置条件&quot; class=&quot;headerlink&quot; title=&quot;前置条件&quot;&gt;&lt;/a&gt;前置条件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;安装Visual Studio Code（代码编辑器）&lt;/li&gt;
&lt;li&gt;电脑已安装node.js&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="vue案例" scheme="https://wuzimo233.github.io/tags/vue%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>Vue路由拦截</title>
    <link href="https://wuzimo233.github.io/posts/9.html"/>
    <id>https://wuzimo233.github.io/posts/9.html</id>
    <published>2022-04-20T17:28:00.000Z</published>
    <updated>2022-04-29T16:41:05.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="路由拦截案例："><a href="#路由拦截案例：" class="headerlink" title="路由拦截案例："></a>路由拦截案例：</h1><h2 id="从零开始创建一个新的项目"><a href="#从零开始创建一个新的项目" class="headerlink" title="从零开始创建一个新的项目"></a>从零开始创建一个新的项目</h2><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><h4 id="安装Visual-Studio-Code"><a href="#安装Visual-Studio-Code" class="headerlink" title="安装Visual Studio Code"></a>安装Visual Studio Code</h4><ul><li>官网地址：(<a href="https://code.visualstudio.com/)%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85">https://code.visualstudio.com/)下载安装</a></li><li>Visual Studio Code(VS Code)是微软2015年推出的一个轻量但功能强大的源代码编辑器，基于 Electron 开发，支持 Windows、Linux 和 macOS 操作系统。内置了对JavaScript，TypeScript和Node.js的支持并且具有丰富的其它语言和扩展的支持，功能超级强大。</li><li>简单来说就是我们编写代码的必备工具</li></ul><h4 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h4><ul><li><p>Node 是一个让 JavaScript 运行在服务端的开发平台，它让 JavaScript 成为与PHP、Python、Perl、Ruby 等服务端语言平起平坐的脚本语言。发布于2009年5月，由Ryan Dahl开发，实质是对Chrome V8引擎进行了封装。</p></li><li><p>通俗点讲 Node.js是一个JavaScript编程语言的运行环境，在没有node.js之前，JavaScript代码几乎只能在浏览器中运行，通过浏览器解释执行。浏览器其实也是JavaScript的一个运行环境，JavaScript在浏览器中运行主要是面向客户端这方面的。后来node.js诞生了，JavaScript就可以在node.js中来运行了，JavaScript可以基于node.js环境做服务端开发。<strong>所以node.js也是JavaScript的服务端运行环境</strong>。</p></li><li><p>官方下载地址(<a href="https://nodejs.org/en/">https://nodejs.org/en/</a>) 或者中文网站(<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a>)</p></li><li><p>一般选LTS长期稳定版嘛 基本功能都差不多，点击下载并安装</p></li><li><p>安装时，安装路径可以自由更改，最后英文路径或者默认，其它点下一步</p></li><li><p>安装后，打开Win+R，输入cmd，窗口中输入：node -v 或 npm -v 查看版本号</p></li></ul><h4 id="安装vue脚手架（vue-cli）"><a href="#安装vue脚手架（vue-cli）" class="headerlink" title="安装vue脚手架（vue-cli）"></a>安装vue脚手架（vue-cli）</h4><p>官网地址：(<a href="https://cli.vuejs.org/zh/guide/installation.html">https://cli.vuejs.org/zh/guide/installation.html</a>)</p><ul><li>Window + R键打开运行界面，并输入cmd，点击确定。</li><li>输入命令：npm install -g @vue/cli  安装脚手架</li><li>或者 yarn global add @vue/cli 安装（前提先安装yarn 使用： npm i yarn -g）</li><li>vue –version 或 vue -V 查看当前版本号</li></ul><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><h4 id="配置下载地址"><a href="#配置下载地址" class="headerlink" title="配置下载地址"></a>配置下载地址</h4><blockquote><p>（如果出现Unexpected token .. in JSON at position …. 那么执行）</p></blockquote><ul><li>下载慢可以切换成淘宝的国内镜像：<br>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org/</a> </li><li>查看是否切换成功<br>npm config get registry </li><li>强制清除npm缓存：<br>npm cache clean –force</li><li>再执行安装npm：<br>npm install -g npm</li></ul><h4 id="通过命令创建"><a href="#通过命令创建" class="headerlink" title="通过命令创建"></a>通过命令创建</h4><ul><li>任选一个文件夹位置创建，例如桌面的一个新建文件夹里</li><li>将新建文件夹拖入vscode里面 将鼠标移动到该文件夹上 右键终端打开</li><li>输入 vue create xxx  (xxx是项目的名称为小写英文)</li><li>后续就根据项目配置进行选择，上下箭头是移动，空格是确认选择，回车是执行。如果没有，直接回车</li></ul><h4 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h4><ul><li>进入项目目录！！！</li><li>npm run serve 运行或者 yarn serve</li></ul><h2 id="配置路由组件"><a href="#配置路由组件" class="headerlink" title="配置路由组件"></a>配置路由组件</h2><ul><li>配置路由组件 – login登录界面 layout-布局界面（首页-新闻-我的）</li><li>简单说就是 layout组件里包含首页、新闻、我的 等界面，而在login组件里包含登录，且login和layout是平级的关系</li></ul><ol><li>删除HomeView.vue里的默认信息改名为Home，添加 <h1>首页</h1> </li><li>AboutView.vue组件改名About，里面 h1信息This is an about page改为 我的</li><li>添加News.vue组件，添加h1新闻界面</li><li>在views下新建Login组件，添加h1登录界面</li><li>在views下新建Layout组件</li><li>配置路由router下的index.js</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;路由拦截案例：&quot;&gt;&lt;a href=&quot;#路由拦截案例：&quot; class=&quot;headerlink&quot; title=&quot;路由拦截案例：&quot;&gt;&lt;/a&gt;路由拦截案例：&lt;/h1&gt;&lt;h2 id=&quot;从零开始创建一个新的项目&quot;&gt;&lt;a href=&quot;#从零开始创建一个新的项目&quot; class=&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="vue案例" scheme="https://wuzimo233.github.io/tags/vue%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>TEST</title>
    <link href="https://wuzimo233.github.io/posts/10.html"/>
    <id>https://wuzimo233.github.io/posts/10.html</id>
    <published>2022-04-20T08:15:00.000Z</published>
    <updated>2022-04-20T17:27:34.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用hexo发布文章遇到的问题"><a href="#使用hexo发布文章遇到的问题" class="headerlink" title="使用hexo发布文章遇到的问题"></a>使用hexo发布文章遇到的问题</h2><p>使用两个花括号报错</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用hexo发布文章遇到的问题&quot;&gt;&lt;a href=&quot;#使用hexo发布文章遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;使用hexo发布文章遇到的问题&quot;&gt;&lt;/a&gt;使用hexo发布文章遇到的问题&lt;/h2&gt;&lt;p&gt;使用两个花括号报错&lt;/p&gt;
</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JS" scheme="https://wuzimo233.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS进阶学习</title>
    <link href="https://wuzimo233.github.io/posts/8.html"/>
    <id>https://wuzimo233.github.io/posts/8.html</id>
    <published>2022-04-18T13:53:00.000Z</published>
    <updated>2022-04-18T14:26:33.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES6高级"><a href="#ES6高级" class="headerlink" title="ES6高级"></a>ES6高级</h2><p><strong>待更新。。。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ES6高级&quot;&gt;&lt;a href=&quot;#ES6高级&quot; class=&quot;headerlink&quot; title=&quot;ES6高级&quot;&gt;&lt;/a&gt;ES6高级&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;待更新。。。&lt;/strong&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JS" scheme="https://wuzimo233.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Vue进阶知识学习</title>
    <link href="https://wuzimo233.github.io/posts/6.html"/>
    <id>https://wuzimo233.github.io/posts/6.html</id>
    <published>2022-04-18T13:42:00.000Z</published>
    <updated>2022-04-29T16:41:24.726Z</updated>
    
    <content type="html"><![CDATA[<p>该页面假设你已经阅读过了组件基础。如果你还对组件不太了解，推荐你先阅读它。</p><h1 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h1><h2 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h2><ol><li>创建一个组件Mycomp.vue</li><li>在需要用到的地方引入：<pre class="line-numbers language-none"><code class="language-none">import Mycomp from './components/Mycomp.vue'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>注册组件<pre class="line-numbers language-none"><code class="language-none">export default { name: 'App', components: {     Mycomp }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用组件在 template <pre class="line-numbers language-none"><code class="language-none">&lt;Mycomp&gt;&lt;/Mycomp&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="组件组成"><a href="#组件组成" class="headerlink" title="组件组成"></a>组件组成</h2><ol><li>template 视图</li><li>script 逻辑</li><li>style  样式</li></ol><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><ol><li><p>注册全局组件 在Vue对象身上有个Vue.component() 注册全局组件 在所有的组件中 不需要引入 可以直接使用</p></li><li><p>语法：<br>Vue.component(‘my-component-name’, {</p><pre><code>  // ... 选项 ...</code></pre><p>  })</p></li><li><p>代码演示</p><pre class="line-numbers language-none"><code class="language-none">// import Vue from 'vue'//运行时：vue.runtime.js import Vue from 'vue/dist/vue'/注册全局组件(放到main.js)// Vue.component('组件名称',{内容配置})Vue.component('my-comp',{    //视图 template :template作为属性使用 必须vue.js （完整版的vue.js）  默认引入-运行时-vue.runtime.js     template:'&lt;div&gt; &lt;h2&gt;我是一个全局组件&lt;/h2&gt; &lt;p&gt;{{ msg }}&lt;/p&gt;&lt;/div&gt;',    //数据    data(){        return {            msg:'hello vue全局组件'        }    },    //方法    methods:{    }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="全局组件–可以挂载创建好的局部组件-注册全局"><a href="#全局组件–可以挂载创建好的局部组件-注册全局" class="headerlink" title="全局组件–可以挂载创建好的局部组件 注册全局"></a>全局组件–可以挂载创建好的局部组件 注册全局</h2><p>import MyBanner from ‘./components/MyBanner.vue’<br>// Vue.component(‘MyBanner’,MyBanner)<br>Vue.component(MyBanner.name,MyBanner)</p></li></ol><h1 id="组件中的data为什么是函数"><a href="#组件中的data为什么是函数" class="headerlink" title="组件中的data为什么是函数"></a>组件中的data为什么是函数</h1><p>答案<br>避免组件中的数据互相影响。同一个组件被复用多次会创建多个实例，如果 data 是一个对象的话，这些实例用的是同一个构造函数。为了保证组件的数据独立，要求每个组件都必须通过 data 函数返回一个对象作为组件的状态。</p><h1 id="computed和watch的区别"><a href="#computed和watch的区别" class="headerlink" title="computed和watch的区别"></a>computed和watch的区别</h1><h1 id="action-与-mutation-的区别"><a href="#action-与-mutation-的区别" class="headerlink" title="action 与 mutation 的区别"></a>action 与 mutation 的区别</h1><ul><li>mutation 是同步更新， $watch 严格模式下会报错</li><li>action 是异步操作，可以获取数据后调用 mutation 提交最终数据</li></ul><h1 id="Vue-组件通讯有哪几种方式"><a href="#Vue-组件通讯有哪几种方式" class="headerlink" title="Vue 组件通讯有哪几种方式"></a>Vue 组件通讯有哪几种方式</h1><p><strong>父传子</strong><br>通过props传递<br>父亲提供数据通过属性 props传给儿子；儿子通过 $on 绑父亲的事件，再通过 $emit 触发自己的事件（发布订阅）<br>利用父子关系 $parent 、 $children </p><p><strong>子传父</strong><br>在父组件中给子组件绑定一个自定义的事件，子组件通过$emit()触发该事件并传值。<br>父组件： &lt;child @receive = ‘receive’ /&gt;<br>子组件: this.$emit(‘receive’,’传递的数据’)</p><p><strong>兄弟组件传值</strong><br>通过中央通信 let bus = new Vue()<br>prop 验证，和默认值</p><h1 id="v-for-为什么要加-key"><a href="#v-for-为什么要加-key" class="headerlink" title="v-for 为什么要加 key"></a>v-for 为什么要加 key</h1><h1 id="v-model-原理"><a href="#v-model-原理" class="headerlink" title="v-model 原理"></a>v-model 原理</h1><h1 id="怎样理解-Vue-的单向数据流"><a href="#怎样理解-Vue-的单向数据流" class="headerlink" title="怎样理解 Vue 的单向数据流"></a>怎样理解 Vue 的单向数据流</h1><h1 id="Vue2-x响应式数据-双向绑定原理"><a href="#Vue2-x响应式数据-双向绑定原理" class="headerlink" title="Vue2.x响应式数据/双向绑定原理"></a>Vue2.x响应式数据/双向绑定原理</h1><p>整体思路是数据劫持+观察者模式<br>Vue 数据双向绑定主要是指：数据变化更新视图，视图变化更新数据。其中，View变化更新Data，可以通过事件监听的方式来实现，所以 Vue数据双向绑定的工作主要是如何根据Data变化更新View。</p><h1 id="虚拟-DOM-是什么-有什么优缺点"><a href="#虚拟-DOM-是什么-有什么优缺点" class="headerlink" title="虚拟 DOM 是什么 有什么优缺点"></a>虚拟 DOM 是什么 有什么优缺点</h1><hr><h1 id="谈一下对-vuex-的个人理解"><a href="#谈一下对-vuex-的个人理解" class="headerlink" title="谈一下对 vuex 的个人理解"></a>谈一下对 vuex 的个人理解</h1><h1 id="vuex是什么"><a href="#vuex是什么" class="headerlink" title="vuex是什么"></a>vuex是什么</h1><p>Vuex 是一个专为 Vue.js应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 devtools extension，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p><h1 id="怎么使用vuex"><a href="#怎么使用vuex" class="headerlink" title="怎么使用vuex"></a>怎么使用vuex</h1><h1 id="vuex中有几个核心属性，分别是什么？"><a href="#vuex中有几个核心属性，分别是什么？" class="headerlink" title="vuex中有几个核心属性，分别是什么？"></a>vuex中有几个核心属性，分别是什么？</h1><ol><li>一共有5个核心属性，分别是:</li></ol><ul><li>state 唯一数据源,Vue 实例中的 data 遵循相同的规则</li><li>getters 可以认为是 store 的计算属性,就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。Getter 会暴露为 store.getters 对象，你可以以属性的形式访问这些值.</li><li>mutation 更改 Vuex 的 store 中的状态的唯一方法是提交 mutation,非常类似于事件,通过store.commit 方法触发</li><li>action Action 类似于 mutation，不同在于Action 提交的是 mutation，而不是直接变更状态，Action 可以包含任意异步操作</li><li>module 由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。</li></ul><hr><h1 id="路由页面管理（vue-router）"><a href="#路由页面管理（vue-router）" class="headerlink" title="路由页面管理（vue-router）"></a>路由页面管理（vue-router）</h1><h1 id="什么是vue-router"><a href="#什么是vue-router" class="headerlink" title="什么是vue-router"></a>什么是vue-router</h1><h1 id="怎么使用vue-router"><a href="#怎么使用vue-router" class="headerlink" title="怎么使用vue-router"></a>怎么使用vue-router</h1><h1 id="怎么定义vue-router的动态路由？怎么获取传过来的动态参数？"><a href="#怎么定义vue-router的动态路由？怎么获取传过来的动态参数？" class="headerlink" title="怎么定义vue-router的动态路由？怎么获取传过来的动态参数？"></a>怎么定义vue-router的动态路由？怎么获取传过来的动态参数？</h1><h1 id="vue-router-路由钩子函数是什么-执行顺序是什么"><a href="#vue-router-路由钩子函数是什么-执行顺序是什么" class="headerlink" title="vue-router 路由钩子函数是什么 执行顺序是什么"></a>vue-router 路由钩子函数是什么 执行顺序是什么</h1><h1 id="路由拦截方法"><a href="#路由拦截方法" class="headerlink" title="路由拦截方法"></a>路由拦截方法</h1><p><strong>待更新。。。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;该页面假设你已经阅读过了组件基础。如果你还对组件不太了解，推荐你先阅读它。&lt;/p&gt;
&lt;h1 id=&quot;注册&quot;&gt;&lt;a href=&quot;#注册&quot; class=&quot;headerlink&quot; title=&quot;注册&quot;&gt;&lt;/a&gt;注册&lt;/h1&gt;&lt;h2 id=&quot;局部组件&quot;&gt;&lt;a href=&quot;#局部组件</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="vue" scheme="https://wuzimo233.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>JS基础知识</title>
    <link href="https://wuzimo233.github.io/posts/7.html"/>
    <id>https://wuzimo233.github.io/posts/7.html</id>
    <published>2022-04-17T17:00:00.000Z</published>
    <updated>2022-04-22T17:59:48.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript基础知识点"><a href="#JavaScript基础知识点" class="headerlink" title="JavaScript基础知识点"></a>JavaScript基础知识点</h1><h2 id="了解-JavaScript"><a href="#了解-JavaScript" class="headerlink" title="了解 JavaScript"></a>了解 JavaScript</h2><h3 id="JavaScript是什么"><a href="#JavaScript是什么" class="headerlink" title="JavaScript是什么"></a>JavaScript是什么</h3><ul><li>JavaScript是一种运行在客户端（浏览器）高级的、解释型的编程语言的，实现人机交互效果</li><li>由ECMA（欧洲电脑制造商协会）通过ECMAScript实现语言的标准化。被世界上的绝大多数网站所使用，也被世界主流浏览器（Chrome、IE、Firefox、Safari、Opera）支持</li><li>JavaScript乍一听与Java在名字上相似，但其实是雷锋与雷锋塔、老婆和老婆饼的关系hhh</li><li>一般简称JS，以下都以JS称呼</li></ul><h3 id="JS的作用（做什么）"><a href="#JS的作用（做什么）" class="headerlink" title="JS的作用（做什么）"></a>JS的作用（做什么）</h3><ul><li>网页特效 （监听用户的一些行为让网页做出对应的反馈） </li><li>表单验证 （针对表单数据的合法性进行判断）</li><li>数据交互 （获取后台的数据，渲染到前端页面）</li><li>服务端编程（node.js） </li></ul><h3 id="JS的组成（有什么）"><a href="#JS的组成（有什么）" class="headerlink" title="JS的组成（有什么）"></a>JS的组成（有什么）</h3><p>JS 是由ECMAScript和WebApi 组成。WebApi又由DOM（页面文档对象模型）和BOM（浏览器对象模型）构成</p><ul><li>ECMAScript是由网景的布兰登·艾克开发的一种脚本语言的标准化规范；最初命名为Mocha，后来改名为LiveScript，最后重命名为JavaScript[1]。</li><li>DOM 操作文档，比如对页面元素进行移动、大小、添加删除等操作</li><li>Bom 操作浏览器，比如页面弹窗，检测窗口宽度，存储数据到浏览器等</li></ul><h3 id="JS的位置"><a href="#JS的位置" class="headerlink" title="JS的位置"></a>JS的位置</h3><h4 id="内部引入"><a href="#内部引入" class="headerlink" title="内部引入"></a>内部引入</h4><ul><li>直接在HTML文件中引入（一般在标签的底部使用）<pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;    alert('我是内部引入的JS')&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="外部引入"><a href="#外部引入" class="headerlink" title="外部引入"></a>外部引入</h4><ul><li>是指将JS文件外置在HTML文件的外部，在head标签内引入相对路径中的JS文件</li><li>使代码更加有序，易于复用，且没有了脚本的混合，HTML也会更加易读<pre class="line-numbers language-none"><code class="language-none">&lt;head&gt;    &lt;script src="./my.js"&gt;&lt;/script&gt;&lt;/head&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="内联使用"><a href="#内联使用" class="headerlink" title="内联使用"></a>内联使用</h4><ul><li>在标签内部使用<pre class="line-numbers language-none"><code class="language-none">&lt;button onclick="alert('我是内联JS')"&gt;我是按钮&lt;/button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="JS注释"><a href="#JS注释" class="headerlink" title="JS注释"></a>JS注释</h3><ul><li>单行注释 // xxx</li><li>多行注释 /* xxx */</li></ul><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><ul><li>了解什么是字面量前，先知道什么是语法？<blockquote><p>是人和计算机打交道的规则—我们按照这个规则去敲代码</p></blockquote></li><li>比如输入语法：<pre class="line-numbers language-none"><code class="language-none">document.write('输出的文字-文字展示到页面')document.write('&lt;h1&gt;我是嵌套的h1标签&lt;/h1&gt;')alert('要输出的内容-弹框形式展示到页面')console.log('控制台打印的内容')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在计算机科学中，字面量（literal）是在计算机中描述 事/物<br>比如:</li><li>初级前端开发薪水是：8k 此时8k就是数字字面量</li><li>‘hello world’ ：这是字符串字面量</li><li>还有其他数组字面量、对象字面量</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量是什么？"><a href="#变量是什么？" class="headerlink" title="变量是什么？"></a>变量是什么？</h3><ul><li>通俗来讲：变量是计算机存储数据的“容器”</li><li>白话：变量就是一个装东西的盒子</li><li>变量不是数据本身，它们仅仅是一个用于存储数值的容器，可以理解为是一个个用来装东西的盒子~<br>例如：用户在网页输入自己姓名或者电话等信息时候，就是通过变量存储。</li></ul><h3 id="变量的声明方式"><a href="#变量的声明方式" class="headerlink" title="变量的声明方式"></a>变量的声明方式</h3><p>在JS中<strong>创建变量被称为声明变量</strong>，JS中变量声明又分为显示声明和隐式声明。其中显示声明中，声明关键字有var、let、const、function、class、import </p><ul><li><strong>let 变量名</strong></li><li>语法：声明关键字 + 变量名</li><li>let 即关键字（let：允许、让、要），所谓关键字是系统提供的专门用来声明（定义）变量的词语</li><li>注意let不能多次声明一个变量名 </li><li>可以一次声明多个变量 let age=18,name=’zimo’;<pre class="line-numbers language-none"><code class="language-none">// 声明关键字 + 变量名let age;age = 18;   // 变量声明后一般会赋值 也可以连写let age = 18;age = 19;   // 变量可以更新值  document.write(age);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol><li>案例：用户输入姓名后，页面显示刚才用户输入的姓名<pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;   let name = (prompt('请输入您的姓名'))   document.write(name)&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>案例：交换变量的值<br>需求：2个不同变量的变量去交换其值。<pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;    let num1 = 10    let num2 = 20    let num3 = ''    num3 = num1    num1 = num2    num2 = num3    console.log(num1,num2);&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="变量本质"><a href="#变量本质" class="headerlink" title="变量本质"></a>变量本质</h3><p>先了解一下内存：是计算机存储数据的地方，相当于一个空间<br>变量：是程序在内存中申请的一块用来存放数据的小空间</p><h3 id="变量的命名规则与规范"><a href="#变量的命名规则与规范" class="headerlink" title="变量的命名规则与规范"></a>变量的命名规则与规范</h3><ul><li>不能用关键字<br>比如：let var if for等</li><li>只能使用下划线、字母、数字、$组成，且数字不能开头</li><li>字母严格区分大小写</li><li>起名要有意义</li><li>遵守小驼峰命名法 （第一个单词首字母小写，后面每个单词首字母大写，如：UserName）</li></ul><h3 id="拓展-let-与-var-区别"><a href="#拓展-let-与-var-区别" class="headerlink" title="拓展 let 与 var 区别"></a>拓展 let 与 var 区别</h3><ul><li>let为了解决var的一些问题</li><li>var可以先使用 在声明（不合理）</li><li>var声明过的变量可以重复声明（不合理）</li><li>比如变量提升、全局变量、没有块级作用域等等</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript基础知识点&quot;&gt;&lt;a href=&quot;#JavaScript基础知识点&quot; class=&quot;headerlink&quot; title=&quot;JavaScript基础知识点&quot;&gt;&lt;/a&gt;JavaScript基础知识点&lt;/h1&gt;&lt;h2 id=&quot;了解-JavaScript</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JS" scheme="https://wuzimo233.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Vue基础知识学习</title>
    <link href="https://wuzimo233.github.io/posts/5.html"/>
    <id>https://wuzimo233.github.io/posts/5.html</id>
    <published>2022-04-17T11:47:00.000Z</published>
    <updated>2022-04-29T16:41:33.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue的安装"><a href="#Vue的安装" class="headerlink" title="Vue的安装"></a>Vue的安装</h2><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><h4 id="安装Visual-Studio-Code"><a href="#安装Visual-Studio-Code" class="headerlink" title="安装Visual Studio Code"></a>安装Visual Studio Code</h4><ul><li>官网地址：(<a href="https://code.visualstudio.com/)%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85">https://code.visualstudio.com/)下载安装</a></li><li>Visual Studio Code(VS Code)是微软2015年推出的一个轻量但功能强大的源代码编辑器，基于 Electron 开发，支持 Windows、Linux 和 macOS 操作系统。内置了对JavaScript，TypeScript和Node.js的支持并且具有丰富的其它语言和扩展的支持，功能超级强大。</li><li>简单来说就是我们编写代码的必备工具</li></ul><h4 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h4><ul><li><p>Node 是一个让 JavaScript 运行在服务端的开发平台，它让 JavaScript 成为与PHP、Python、Perl、Ruby 等服务端语言平起平坐的脚本语言。发布于2009年5月，由Ryan Dahl开发，实质是对Chrome V8引擎进行了封装。</p></li><li><p>通俗点讲 Node.js是一个JavaScript编程语言的运行环境，在没有node.js之前，JavaScript代码几乎只能在浏览器中运行，通过浏览器解释执行。浏览器其实也是JavaScript的一个运行环境，JavaScript在浏览器中运行主要是面向客户端这方面的。后来node.js诞生了，JavaScript就可以在node.js中来运行了，JavaScript可以基于node.js环境做服务端开发。<strong>所以node.js也是JavaScript的服务端运行环境</strong>。</p></li><li><p>官方下载地址(<a href="https://nodejs.org/en/">https://nodejs.org/en/</a>) 或者中文网站(<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a>)</p></li><li><p>一般选LTS长期稳定版嘛 基本功能都差不多，点击下载并安装</p></li><li><p>安装时，安装路径可以自由更改，最后英文路径或者默认，其它点下一步</p></li><li><p>安装后，打开Win+R，输入cmd，窗口中输入：node -v 或 npm -v 查看版本号</p></li></ul><h4 id="安装vue脚手架（vue-cli）"><a href="#安装vue脚手架（vue-cli）" class="headerlink" title="安装vue脚手架（vue-cli）"></a>安装vue脚手架（vue-cli）</h4><p>官网地址：(<a href="https://cli.vuejs.org/zh/guide/installation.html">https://cli.vuejs.org/zh/guide/installation.html</a>)</p><ul><li>Window + R键打开运行界面，并输入cmd，点击确定。</li><li>输入命令：npm install -g @vue/cli  安装脚手架</li><li>或者 yarn global add @vue/cli 安装（前提先安装yarn 使用： npm i yarn -g）</li><li>vue –version 或 vue -V 查看当前版本号</li></ul><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><h4 id="配置下载地址"><a href="#配置下载地址" class="headerlink" title="配置下载地址"></a>配置下载地址</h4><blockquote><p>（如果出现Unexpected token .. in JSON at position …. 那么执行）</p></blockquote><ul><li>下载慢可以切换成淘宝的国内镜像：<br>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org/</a> </li><li>查看是否切换成功<br>npm config get registry </li><li>强制清除npm缓存：<br>npm cache clean –force</li><li>再执行安装npm：<br>npm install -g npm</li></ul><h4 id="通过命令创建"><a href="#通过命令创建" class="headerlink" title="通过命令创建"></a>通过命令创建</h4><ul><li>任选一个文件夹位置创建，例如桌面的一个新建文件夹里</li><li>将新建文件夹拖入vscode里面 将鼠标移动到该文件夹上 右键终端打开</li><li>输入 vue create xxx  (xxx是项目的名称为小写英文)</li><li>后续就根据项目配置进行选择，上下箭头是移动，空格是确认选择，回车是执行。如果没有，直接回车</li></ul><h4 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h4><ul><li>进入项目目录！！！</li><li>npm run serve 运行或者 yarn serve</li></ul><h2 id="Vue介绍"><a href="#Vue介绍" class="headerlink" title="Vue介绍"></a>Vue介绍</h2><ol><li>Vue是渐进式（渐进式：项目中可以逐步使用vue框架 可以使用一部分 或者是整个项目） JavaScript 框架</li><li>框架为单页面的应用程序 （Vue项目入口：只有一个页面 index.html ）</li><li>跳转的页面路由功能-  路由 （其他页面组件）</li><li>框架里面使用的是虚拟DOM 没有js BOM DOM </li></ol><p>特点： MVVM 模式；代码简洁体积小，运行效率高，适合移动PC端开发；本身只关注 UI （和 react 相似），可以轻松引入 Vue 插件或其他的第三方库进行开发。</p><h2 id="Vue的优缺点"><a href="#Vue的优缺点" class="headerlink" title="Vue的优缺点"></a>Vue的优缺点</h2><p><strong>优点：</strong></p><blockquote><p><strong>轻量级框架</strong>：只关注视图层，是一个构建数据的视图集合，大小只有几十kb；简单易学：国人开发，中文文档，不存在语言障碍 ，易于理解和学习；<br><strong>双向数据绑定</strong>：保留了angular的特点，在数据操作方面更为简单；<br><strong>组件化</strong>：保留了react的优点，实现了html的封装和重用，在构建单页面应用方面有着独特的优势；<br><strong>视图，数据，结构分离</strong>：使数据的更改更为简单，不需要进行逻辑代码的修改，只需要操作数据就能完成相关操作；<br><strong>虚拟DOM</strong>：dom操作是非常耗费性能的，不再使用原生的dom操作节点，极大解放dom操作，但具体操作的还是dom不过是换了另一种方式；<br><strong>运行速度更快</strong>:相比较与react而言，同样是操作虚拟dom，就性能而言，vue存在很大的优势。<br><strong>缺点：</strong></p></blockquote><ol><li>单页面应用程序，首页加载速度慢  </li><li>不利于搜索引擎优化  </li></ol><h2 id="Vue的使用"><a href="#Vue的使用" class="headerlink" title="Vue的使用"></a>Vue的使用</h2><h3 id="局部使用Vue"><a href="#局部使用Vue" class="headerlink" title="局部使用Vue"></a>局部使用Vue</h3><ol><li>引入 Vue 的cnd网址 或者是下载到本地js文件  （类似：jquery.js）</li><li>创建vue实例  </li><li>代码演示<pre class="line-numbers language-none"><code class="language-none">&lt;head&gt;    //引入js文件夹里的vue    &lt;script src="./JS/vue.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;!-- 使用vue --&gt;    &lt;div id="app"&gt;        &lt;p&gt;这是vue的区域了 app--&lt;/p&gt;        &lt;p&gt;获取vue的信息：{{msg}}&lt;/p&gt;    &lt;/div&gt;    &lt;!-- 创建vue实例 --&gt;    &lt;script&gt;        const vm = new Vue({            el:'#app',//获取element元素            data:{                msg:'hello vue',            }        })    &lt;/script&gt;&lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="搭建vue项目"><a href="#搭建vue项目" class="headerlink" title="搭建vue项目"></a>搭建vue项目</h3><p><strong>1.兼容性</strong><br>Vue 不支持 IE8 及以下版本，因为 Vue 使用了 IE8 无法模拟的 ECMAScript 5 特性。但它支持所有兼容 ECMAScript 5 的浏览器。</p><p><strong>2.安装nodejs</strong></p><ul><li>Node 是一个让 JavaScript 运行在服务端的开发平台，它让 JavaScript 成为与PHP、Python、Perl、Ruby 等服务端语言平起平坐的脚本语言。发布于2009年5月，由Ryan Dahl开发，实质是对Chrome V8引擎进行了封装。</li><li>通俗点讲 Node.js是一个JavaScript编程语言的运行环境，在没有node.js之前，JavaScript代码几乎只能在浏览器中运行，通过浏览器解释执行。浏览器其实也是JavaScript的一个运行环境，JavaScript在浏览器中运行主要是面向客户端这方面的。后来node.js诞生了，JavaScript就可以在node.js中来运行了，JavaScript可以基于node.js环境做服务端开发。<strong>所以node.js也是JavaScript的服务端运行环境</strong>。</li><li>官方下载地址(<a href="https://nodejs.org/en/">https://nodejs.org/en/</a>) 或者中文网站(<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a>)</li><li>一般选LTS长期稳定版嘛 基本功能都差不多，点击下载并安装</li><li>安装时，安装路径可以自由更改，最后英文路径或者默认，其它点下一步</li><li>安装后，打开Win+R，输入cmd，窗口中输入：node -v 或 npm -v 查看版本号</li></ul><p><strong>3.安装vue 命令行工具 (CLI)</strong></p><ul><li>介绍：Vue 提供了一个官方的 CLI，为单页面应用 (SPA) 快速搭建繁杂的脚手架。CLI是一个全局安装的 npm 包，提供了终端里的 vue 命令。它可以通过 vue create 快速搭建一个新项。</li><li>网址：<a href="https://cli.vuejs.org/zh/">https://cli.vuejs.org/zh/</a></li><li>版本：Vue CLI 4.x 需要 Node.js v8.9 或更高版本 (推荐 v10 以上)</li><li>先安装yarn:  npm i yarn -g (推荐)</li><li>安装vue-cli：<br> npm install -g @vue/cli   （下载模块：npm  install 模块 ）<br>   或者<br> yarn global add @vue/cli   （下载模块：yarn add  模块 ）</li><li>检查其版本是否正确<br>vue –version</li></ul><p><strong>4.创建一个vue项目–通过脚手架vue-cli</strong> </p><ol><li>创建vue项目： vue create vue-project<br>说明：vue项目名称最好是英文 不能包含驼峰命名法</li><li>按需项目需要的依赖配置</li><li>进入项目<br>cd 项目名称</li><li>启动项目<br>npm run serve<br>或者<br>yarn serve </li><li>打包项目<br>npm run build </li></ol><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><blockquote><p>node_moudles   安装包依赖 –模块<br>public         单页面入口 - index.html<br>src             资源文件 – 前端<br>– – assets     静态文件资源 - 放置 css js images<br>– – components 公共组件 - 组件化 （样式 布局 效果）<br>– – App.vue    根组件<br>– – main.js    入口配置文件<br>.browserslistrc 浏览器配置<br>.gitignore      上传git仓库 忽略的文件配置<br>babel.config.js babel配置<br>package.json    项目配置文件 （查看项目安装的依赖 版本 名称… ）<br>readme.md       项目说明文件<br>yarn.lock       配置信息 忽略</p></blockquote><h2 id="Vue组件组成"><a href="#Vue组件组成" class="headerlink" title="Vue组件组成"></a>Vue组件组成</h2><ol><li><p>组成-三部分</p><ol><li>template  视图标签  （template标签不会被渲染 只是包裹作用） 必写</li><li>script    逻辑代码  </li><li>style     样式   lang=’less/scss’ scoped </li></ol></li><li><p>创建组件 </p><ol><li>xxx.vue  后缀.vue结尾</li><li>三部分组件  快捷键 vue</li></ol></li><li><p>组件使用</p><ol><li>引入组件 </li><li>注册组件</li><li>使用组件<pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;    //1. 引入组件    import Banner from './components/Banner.vue'    export default {        name: 'App',        //2. 注册组件        components: {            Banner,        }    }&lt;/script&gt; &lt;!-- 3. 使用组件 --&gt;&lt;Banner&gt;&lt;/Banner&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><h2 id="vue基础语法"><a href="#vue基础语法" class="headerlink" title="vue基础语法"></a>vue基础语法</h2><p><strong>指令：就是以 v-指令=’js环境’ 具体特定的工具 ，指令。</strong></p><h3 id="插值操作-模板语法"><a href="#插值操作-模板语法" class="headerlink" title="插值操作 (模板语法)"></a>插值操作 (模板语法)</h3><ol><li>作用：获取vue数据 显示视图 模板语法来声明式地将数据渲染进 DOM </li><li>语法：</li></ol><p><strong>Mustache</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;div id="app"&gt;  &lt;h2&gt;{{message}}&lt;/h2&gt;  &lt;h2&gt;{{message}}, 李银河!&lt;/h2&gt;  &lt;!--mustache语法中,不仅仅可以直接写变量,也可以写简单的表达式--&gt;  // 获取data里的数据  &lt;h2&gt;{{firstName + lastName}}&lt;/h2&gt;  &lt;h2&gt;{{firstName + ' ' + lastName}}&lt;/h2&gt;  &lt;h2&gt;{{firstName}} {{lastName}}&lt;/h2&gt;  &lt;h2&gt;{{counter * 2}}&lt;/h2&gt;&lt;/div&gt;&lt;script src="../js/vue.js"&gt;&lt;/script&gt;&lt;script&gt;  const app = new Vue({    el: '#app',    // 提供数据    data: {      message: '你好啊',      firstName: 'kobe',      lastName: 'bryant',      counter: 100    },  })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="指令介绍"><a href="#指令介绍" class="headerlink" title="指令介绍"></a>指令介绍</h3><h4 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h4><p>在某些情况下，我们可能不希望界面随意的跟随改变<br>这个时候，我们就可以使用一个Vue的指令<br>v-once:<br>该指令后面不需要跟任何表达式(比如之前的v-for后面是由跟表达式的)<br>该指令表示元素和组件(组件后面才会学习)只渲染一次，不会随着数据的改变而改变。<br>代码如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;div id="app"&gt;  &lt;h2&gt;{{message}}&lt;/h2&gt;  &lt;h2 v-once&gt;{{message}},李银河&lt;/h2&gt;&lt;/div&gt;&lt;script src="../js/vue.js"&gt;&lt;/script&gt;&lt;script&gt;  const app = new Vue({    el: '#app',    data: {      message: '你好啊'    }  })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="v-html-原生HTML"><a href="#v-html-原生HTML" class="headerlink" title="v-html -原生HTML"></a>v-html -原生HTML</h4><p>某些情况下，我们从服务器请求到的数据本身就是一个HTML代码<br>如果我们直接通过插值语法来输出，会将HTML代码也一起输出<br>但是我们可能希望的是按照HTML格式进行解析，并且显示对应的内容<br>可以使用v-html指令<br>该指令后面往往会跟上一个string类型<br>会将string的html解析出来并且进行渲染</p><pre class="line-numbers language-none"><code class="language-none">&lt;div id="app"&gt;  &lt;h2&gt;{{url}}&lt;/h2&gt;  &lt;h2 v-html="url"&gt;&lt;/h2&gt;&lt;/div&gt;&lt;script src="../js/vue.js"&gt;&lt;/script&gt;&lt;script&gt;  const app = new Vue({    el: '#app',    data: {      message: '你好啊',      url: '&lt;a href="http://www.baidu.com"&gt;百度一下&lt;/a&gt;'    }  })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><p>v-text作用和Mustache比较相似：<strong>都是用于将数据显示在界面中</strong><br>v-text<strong>通常情况下，接受一个string类型</strong><br>缺点是不够灵活：第二个h2不会显示李银河</p><pre class="line-numbers language-none"><code class="language-none">&lt;div id="app"&gt;  &lt;h2&gt;{{message}}, 李银河!&lt;/h2&gt;  &lt;h2 v-text="message"&gt;, 李银河!&lt;/h2&gt;&lt;/div&gt;&lt;script src="../js/vue.js"&gt;&lt;/script&gt;&lt;script&gt;  const app = new Vue({    el: '#app',    data: {      message: '你好啊'    }  })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h4><p>v-pre用于跳过这个元素和它子元素的编译过程，用于显示原本的Mustache语法。<br>比如下面的代码<br>第一个h2元素中的内容会被编译解析出来对应的内容<br>第二个h2元素中会直接显示</p><pre class="line-numbers language-none"><code class="language-none">&lt;div id="app"&gt;   &lt;h2&gt;{{message}}&lt;/h2&gt; //你好啊  &lt;h2 v-pre&gt;{{message}}&lt;/h2&gt; //{{message}}&lt;/div&gt;&lt;script src="../js/vue.js"&gt;&lt;/script&gt;&lt;script&gt;  const app = new Vue({    el: '#app',    data: {      message: '你好啊'    }  })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h4><p>在某些情况下，我们浏览器可能会直接显然出未编译的Mustache标签<br>cloak: “斗篷”</p><pre class="line-numbers language-none"><code class="language-none">&lt;div id="app" v-cloak&gt;  &lt;h2&gt;{{message}}&lt;/h2&gt;&lt;/div&gt;&lt;script src="../js/vue.js"&gt;&lt;/script&gt;&lt;script&gt;  // 在vue解析之前, div中有一个属性v-cloak  // 在vue解析之后, div中没有一个属性v-cloak  setTimeout(function () {    const app = new Vue({      el: '#app',      data: {        message: '你好啊'      }    })  }, 1000)&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><h4 id="条件渲染-v-if-（v-else、v-else-if）"><a href="#条件渲染-v-if-（v-else、v-else-if）" class="headerlink" title="条件渲染- v-if  （v-else、v-else-if）"></a>条件渲染- v-if  （v-else、v-else-if）</h4><ol><li>作用：是否显示元素/  true 显示 false 隐藏 </li></ol><p><strong>语法：</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;span v-if="boolean表达式"&gt;&lt;/span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>v-else</strong><br>作用：是对 v-if=’’的结果取反 </p><pre class="line-numbers language-none"><code class="language-none">&lt;span v-if="boolean表达式"&gt;&lt;/span&gt;&lt;span v-else&gt;xxxx &lt;/span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>v-else-if</strong><br>作用：是否显示元素  与v-if  v-else-if 多语句判断</p><pre class="line-numbers language-none"><code class="language-none">&lt;span v-if="boolean表达式"&gt;&lt;/span&gt;&lt;span v-else-if="boolean表达式"&gt;&lt;/span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>案例：</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;条件渲染 vue-if&lt;/h2&gt;     &lt;!-- v-if='boolean' --&gt;    &lt;p&gt;v-if的值：{{flag}}&lt;/p&gt;    &lt;p v-if="flag"&gt;我是v-if为true显示的&lt;/p&gt;    &lt;h4 v-else&gt;我是v-else控制显示&lt;/h4&gt;    &lt;button @click="change()"&gt;点我控制v-if的值&lt;/button&gt;    &lt;!-- 多语句 --&gt;    &lt;p v-if="number&gt;5"&gt; number&gt;5 &lt;/p&gt;    &lt;p v-else-if=" 2&lt; number &lt;=5"&gt; number大于2小于等于5 &lt;/p&gt;    &lt;p v-else&gt; number小于2 &lt;/p&gt;    &lt;input type="text" placeholder="请输入数字来判断number" v-model="number"&gt;    &lt;br&gt;     &lt;span&gt;{{number}}&lt;/span&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {    data(){        return{            flag:false,            number:"",                    }    },    methods:{        change(){            this.flag=!this.flag        }    }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><ol><li>作用：是否显示元素/ true 显示 false 隐藏 </li></ol><p><strong>语法：</strong><br><strong>特点：</strong><br>控制元素的 display:block/none</p><pre class="line-numbers language-none"><code class="language-none">&lt;span v-show="boolean表达式"&gt;&lt;/span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="列表渲染-v-for"><a href="#列表渲染-v-for" class="headerlink" title="列表渲染- v-for"></a>列表渲染- v-for</h3><p><strong>1. 遍历数组</strong><br><strong>语法：</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;li v-for="(item,index) in arr" :key=""&gt;    {{ item }}&lt;/li&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>属性</li><li>item 第一个元素 表示数组的每一项内容</li><li>index 第二个元素 表示数组的下标 0 1 </li><li>arr  数组数据(或者对象)</li><li>:key其实是 v-bind属性  作用：做当前数据的唯一标识  一般写的是id  不推荐 index </li></ul><p><strong>2. 遍历对象</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;div v-for="(value, key, index) in object"&gt;    {{ index }}. {{ key }}: {{ value }}&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>value 对象里每个键值对的值({key:value}中的value)</li><li>key 对象里每个键值对的键名({key:value}中的key)</li><li>index 下标0 1</li><li>object 要遍历的对象名</li></ul><p><strong>案例：</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;数组遍历- v-for&lt;/h2&gt;    &lt;p&gt;直接获取数组数据：arr{{ arr }}&lt;/p&gt;    &lt;p&gt;遍历数组&lt;/p&gt;    &lt;ul&gt;      &lt;li v-for="(item, index) in arr" :key="item.id"&gt;        每一项 {{ item }} -- 下标 {{ index }}      &lt;/li&gt;    &lt;/ul&gt;--------------------------------------------------    &lt;p&gt;遍历内部是对象的数组&lt;/p&gt;    &lt;ul&gt;      &lt;li v-for="(item, index) in books" :key="index"&gt;        &lt;h3&gt;书名：{{ item.name }}&lt;/h3&gt;        &lt;p&gt;价格：{{ item.price }}&lt;/p&gt;      &lt;/li&gt;    &lt;/ul&gt;----------------------------------------------------    &lt;p&gt;遍历对象&lt;/p&gt;    &lt;ul&gt;        &lt;li v-for="(ele,key) in obj " :key="key"&gt;            &lt;p&gt;{{key}}：：{{ele}}&lt;/p&gt;            &lt;!-- &lt;p&gt;姓名：{{ele.uname}}&lt;/p&gt;            &lt;p&gt;年龄：{{ele.age}}&lt;/p&gt; --&gt;        &lt;/li&gt;    &lt;/ul&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data() {    return {      arr: [1, 2, 3, 4],      books: [        {          id: 1,          name: "三国",          price: 20,        },        {          id: 2,          name: "西游记",          price: 30,        },        {          id: 3,          name: "红楼梦",          price: 40,        },      ],      obj: {        uname: "张三",        age: 20,      },    };  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. v-for 与 v-if 一同使用</strong></p><ol><li>注意不推荐在同一元素上使用 v-if 和 v-for 、v-for 的优先级比 v-if 更高</li></ol><p><strong>解决办法：</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;h4&gt;4 v-for 与 v-if 一同使用, v-for 的优先级比 v-if 更高&lt;/h4&gt;    &lt;h4&gt;今天上架了什么水果：&lt;/h4&gt;    &lt;ul&gt;        &lt;template v-for="(item) in zaoshi"&gt;            &lt;li  :key="item.id" v-if="item.flag"&gt;                种类：{{item.fruit}}             &lt;/li&gt;        &lt;/template&gt;    &lt;/ul&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data() {    return {      zaoshi:[          {              id:100,              fruit:'苹果',              flag:true,          },          {              id:101,              fruit:'香蕉',              flag:false,          },          {              id:102,              fruit:'阳光玫瑰',              flag:true,          },          {              id:103,              fruit:'车厘子',              flag:false,          },      ]    };  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="Vue-事件处理"><a href="#Vue-事件处理" class="headerlink" title="Vue 事件处理"></a>Vue 事件处理</h3><ol><li>介绍<br>可以用 v-on 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码</li><li>定义事件<br>语法：&lt;div&nbsp;v-on:事件名=’dosomething’&gt;<br>函数dosomething定义的位置：<br>要求定义mothds属性中</li><li>事件：<br>this指向：事件的this指向 当前组件实例对象<br>事件传递参数：事件传递参数  v-on:click=’canshu(1,2)’<br>事件对象event：</li></ol><ul><li>函数不带参数  第一个参数默认是事件对象 event </li><li>函数带参数    事件对象需要手动传递 $event<br>v-on:事件名=’函数’<br>简写：<br>@事件名=’函数’</li></ul><ol start="4"><li>事件修饰符<br>Vue.js 为 v-on 提供了事件修饰符。修饰符是由点开头的指令后缀来表示的。<blockquote><p>.stop<br>.prevent<br>.capture<br>.self<br>.once<br>.passive</p></blockquote></li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 阻止单击事件继续传播 --&gt;&lt;a v-on:click.stop="doThis"&gt;&lt;/a&gt;&lt;!-- 提交事件不再重载页面 --&gt;&lt;form v-on:submit.prevent="onSubmit"&gt;&lt;/form&gt;&lt;!-- 修饰符可以串联 --&gt;&lt;a v-on:click.stop.prevent="doThat"&gt;&lt;/a&gt;&lt;!-- 只有修饰符 --&gt;&lt;form v-on:submit.prevent&gt;&lt;/form&gt;&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;&lt;div v-on:click.capture="doThis"&gt;...&lt;/div&gt;&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;&lt;!-- 即事件不是从内部元素触发的 --&gt;&lt;div v-on:click.self="doThat"&gt;...&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;      &lt;h2&gt;vue事件处理&lt;/h2&gt;      &lt;!-- 事件修饰符 --&gt;      &lt;div @click="parent"&gt; //父元素          我是小头爸爸          &lt;button @click.stop="child"&gt;我是大头儿子&lt;/button&gt; //子元素      &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {    methods:{        parent(){            console.log('父元素');        },        child(){            console.log('子元素');        },    }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>按键修饰符<br>在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 v-on 在监听键盘事件时添加按键修饰符：<br>.enter  *<br>.tab<br>.delete (捕获“删除”和“退格”键)<br>.esc<br>.space<br>.up<br>.down<br>.left<br>.right</li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` --&gt;&lt;input v-on:keyup.enter="submit"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;      &lt;!-- 按键修饰符 --&gt;      &lt;input type="text" v-on:keyup.enter='getInput'&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {    methods:{        getInput(e){        //if(e.keyCode == 13) {        //    console.log('按下了回车键--触发是搜索。。。');        //}        console.log('按下了回车键--触发是搜索。。。');                   }    }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li><p>系统修饰键<br>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。<br>.ctrl<br>.alt<br>.shift<br>.meta</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;!-- 系统修饰键 --&gt;    &lt;!-- 可以按下ctrl+回车键触发  --&gt;    &lt;textarea @keyup.ctrl.enter="send" cols="30" rows="10"&gt;&lt;/textarea&gt;    &lt;button @click="send"&gt;发送&lt;/button&gt; //  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  methods: {    // 系统修饰键    send(){        console.log('系统修饰键--发送了聊天信息');    }  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>鼠标按钮修饰符<br>.left<br>.right<br>.middle</p></li></ol><hr><h2 id="Vue中key属性的作用-（考点）"><a href="#Vue中key属性的作用-（考点）" class="headerlink" title="Vue中key属性的作用 （考点）"></a>Vue中key属性的作用 （考点）</h2><ol><li>作用：key的作用主要是为了高效的更新虚拟DOM</li><li>高效的Diff算法 <pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;vue中遍历数据v-foe是否添加key 功能&lt;/h2&gt;    &lt;p&gt;key作用：提高更新虚拟DOM速度 --底层diff算法--查思路&lt;/p&gt;    &lt;!-- 默认不带key的遍历 --&gt;    &lt;ul&gt;      &lt;li v-for="item in arr"&gt;{{ item }}&lt;/li&gt;      &lt;button @click="addF"&gt;插入F元素&lt;/button&gt;    &lt;/ul&gt;    &lt;!-- 带key的遍历 --&gt;    &lt;ul&gt;      &lt;li v-for="item in arr" :key="item"&gt;{{ item }}&lt;/li&gt;      &lt;button @click="addF"&gt;插入F元素&lt;/button&gt;    &lt;/ul&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data() {    return {      arr: ["A", "B", "C", "D", "E"],    };  },  methods: {    addF() {      //  增加 F （给数组添加元素 arr.splice(下标,删除的个数,添加的值)）      this.arr.splice(2, 0, "F");    },  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h2><ol><li>说明：在列表渲染中，如果遍历是数组，当数组数据发生改变时，页面什么时候能自动更新(页面重新渲染)</li><li>实现数组视图同步更新</li></ol><ul><li><p>变更方法 （修改了原数组）<br>push()<br>pop()<br>shift()<br>unshift()<br>splice()<br>sort()<br>reverse()</p></li><li><p>替换数组（修改后返回新的数组 原数据不修改 视图想同步更新 覆盖原数组）<br>filter()、concat() 和 slice()</p></li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;数组更新同步&lt;/h2&gt;    &lt;p&gt;arr:{{ arr }}&lt;/p&gt;    &lt;button @click="addArr"&gt;追加数组&lt;/button&gt;    &lt;button @click="sliceArr"&gt;切割数组&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data() {    return {      arr: [1, 2, 3],    };  },  methods: {    addArr() {      // this.arr.push(100)      this.arr.reverse();    },    sliceArr() {      //slice() 返回新的数组 n ce(1);      console.log(newArr);      //替换      this.arr = newArr;    },  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象更新检测"><a href="#对象更新检测" class="headerlink" title="对象更新检测"></a>对象更新检测</h2><ol><li>说明：对象修改后 视图同步更新视图 – 内存：栈内存 堆内存 </li><li>实现对象视图同步更新<pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;对象同步更新&lt;/h2&gt;    &lt;p&gt;对象obj:{{ obj }}&lt;/p&gt;    &lt;button @click="changeUname"&gt;修改对象已存在的属性&lt;/button&gt;    &lt;button @click="obj = { user: 'admin' }"&gt;修改整个obj对象&lt;/button&gt;    &lt;!-- //视图检测不到变化 --&gt;    &lt;button @click="addAttribute"&gt;给obj添加不存在的属性&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {    data(){        return{            obj:{                uname:'张三',                age:20            }        }    },    methods:{        changeUname(){            this.obj.uname = '拉拉'        },        addAttribute(){            // this.obj.love = '女'             // 问题: 视图检测不到变化 vue认为obj没有修改            // 方法一:对象中的扩展运算符(...)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中            // this.obj = {...this.obj}            // 方法二: es6合并对象 Object.assign({},{},{})            // this.obj = Object.assign({},this.obj)            // 方法三: vue官网解决方法            // Vue.set( target, propertyName/index, value )            /**参数：             {对象 | 数组} target 目标元素            {string | number} propertyName/index (要添加的属性)数据类型名字或者index            {any} value  属性的值            用法：向响应式对象中添加一个 property(属性)，并确保这个新 property             同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新             property，因为 Vue 无法探测普通的新增 property              (比如 this.myObject.newProperty = 'hi')            **/                       //这里没有引入Vue了,因为组件实例对象vm身上有$set()方法            this.$set(this.obj,'love','女')                    //删除 同步视图 删除对象的 property。如果对象是响应式的，确保删除能触发更新视图。            this.$delete(this.obj,'age')        }     }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h2><p>介绍：动态的添加class或者是style样式<br><strong>1.绑定 HTML Class</strong></p><ul><li>直接绑定变量 <pre class="line-numbers language-none"><code class="language-none">&lt;div v-bind:class='变量'&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>对象语法 (最常用)<pre class="line-numbers language-none"><code class="language-none">&lt;div v-bind:class="{类名: 表达式-true显示类名、false隐藏 ,类名:boolean}"&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>数组语法<pre class="line-numbers language-none"><code class="language-none">&lt;div v-bind:class="[变量1,变量2, {类名：boolean}]"&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>2.绑定内联样式</strong><br>v-bind:style 的对象语法十分直观——看着非常像 CSS，但其实是一个 JavaScript 对象。CSS property 名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用引号括起来) 来命名</p><ul><li>对象语法 <pre class="line-numbers language-none"><code class="language-none">&lt;div v-bind:style="{css样式:变量,... }"&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>数组语法<pre class="line-numbers language-none"><code class="language-none">&lt;div v-bind:style="[baseStyles, overridingStyles]"&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>直接变量<pre class="line-numbers language-none"><code class="language-none">&lt;div v-bind:style="styleObject"&gt;&lt;/div&gt; data: {     styleObject: {         color: 'red',         fontSize: '13px'     } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>完整练习案例:</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;动态绑定样式class 和 style&lt;/h2&gt;    &lt;h4&gt;动态绑定样式class&lt;/h4&gt;    &lt;!-- 绑定变量 --&gt;    &lt;button @click="active = 'box2'"&gt;切换颜色-绑定变量&lt;/button&gt;    &lt;div v-bind:class="active"&gt;动态绑定样式class&lt;/div&gt;    &lt;hr /&gt;    &lt;!-- 对象语法 --&gt;    &lt;div v-bind:class="{ box: flag }"&gt;对象语法&lt;/div&gt;    &lt;button @click="flag = !flag"&gt;修改flag-对象语法&lt;/button&gt;    &lt;hr /&gt;    &lt;!-- 数组语法 --&gt;    &lt;div class="aa" v-bind:class="[active, { box2: true }]"&gt;数组语法&lt;/div&gt;    &lt;hr /&gt;    &lt;h2&gt;动态绑定内联样式&lt;/h2&gt;    &lt;p&gt;0. 默认的内联写法&lt;/p&gt;    &lt;div style="width: 100px; height: 100px; background: orange"&gt;      默认的内联写法    &lt;/div&gt;    &lt;p&gt;1. 直接变量&lt;/p&gt;    &lt;div v-bind:style="styleObject"&gt;      对象语法    &lt;/div&gt;    &lt;p&gt;2. 对象语法&lt;/p&gt;    &lt;div v-bind:style="{color:'green',fontSize:'30px', width:'100px',height: '100px',backgroundColor:'blue'}"&gt;      对象语法    &lt;/div&gt;    &lt;p&gt;3. 数组语法&lt;/p&gt;    &lt;div :style="[styleObject,{border:'5px solid #333'}]"&gt;数组语法&lt;/div&gt;  &lt;/div&gt;&lt;/template&gt; &lt;script&gt;export default {  data() {    return {      active: "box",      flag: "true",      styleObject:{        width: '100px',        height: '100px',        background: 'orange',      }    };  },  methods: {    changeColor() {      this.active = "box2";    },  },};&lt;/script&gt;&lt;style&gt;.box {  width: 200px;  height: 200px;  background-color: pink;}.box2 {  width: 200px;  height: 200px;  background-color: rgb(21, 226, 253);}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vue-tab栏切换练习"><a href="#Vue-tab栏切换练习" class="headerlink" title="Vue-tab栏切换练习"></a>Vue-tab栏切换练习</h3><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;Vue-tab切换&lt;/h2&gt;    &lt;ul class="nav"&gt;      &lt;li v-for="(item,index) in arr" :key='item' :class="{active:index == num}" @click="changeNav(index)"&gt;          {{item}}-{{index}}    &lt;/li&gt;    &lt;/ul&gt;    &lt;div class="box1"&gt;      &lt;div v-for="(ele,n) in content " :key="ele" :class="{show:n == num}"&gt;{{ele}}&lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data() {    return {      num: 0,      arr: ["选项1", "选项2", "选项3"],      content: ["111", "222", 333],    };  },  methods: {      changeNav(index){          this.num = index                }  },};&lt;/script&gt;&lt;style lang="less" scoped&gt;.nav {  overflow: hidden;  list-style: none;  li {      display: inline;      width: 100px;      height: 40px;      line-height: 40px;      margin-right: 10px;  }  .active{      background: lightblue;  }}.box1 {  margin: auto;  width: 400px;  height: 200px;  border: 1px solid #000;  &gt;div {      display: none;  }  .show {      display: block;  }}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表单输入绑定-v-modele"><a href="#表单输入绑定-v-modele" class="headerlink" title="表单输入绑定 (v-modele)"></a>表单输入绑定 (v-modele)</h2><p><strong>1.介绍</strong><br>你可以用 v-model 指令在表单 input、textarea 及 select 元素上创建双向数据绑定<br>通过指令 v-model=’’ 获取表单输入的信息数据 实现双向数据绑定</p><p><strong>2.语法:</strong><br>会将文本框输入的数据实时传递给绑定到data里的msg中</p><pre class="line-numbers language-none"><code class="language-none">&lt;input type='text' v-model='msg' /&gt;data(){    return{        msg:''    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例:</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;表单输入绑定&lt;/h2&gt;    &lt;!-- &lt;input type="text" :value="msg" name="" id=""&gt; --&gt;    &lt;!-- 1. 文本/密码 v-model=''--&gt;    &lt;input type="text" placeholder="请输入" v-model="formData.msg" @keyup.enter="send" name="" id="" /&gt;    &lt;p&gt;msg:{{formData.msg}}&lt;/p&gt;    &lt;!-- 2. 多行文本 --&gt;    &lt;!-- 3. 单选按钮 --&gt;    性别:    &lt;input type="radio" v-model="formData.sex" name="aa" value="1" /&gt;男    &lt;input type="radio" v-model="formData.sex" name="aa" value="2" /&gt;女    &lt;p&gt;选择的性别:{{ formData.sex }}&lt;/p&gt;     &lt;!-- 爱好: --&gt;    &lt;input type="checkbox" v-model="formData.arr" value="a" /&gt;吃    &lt;input type="checkbox" v-model="formData.arr" value="b" /&gt;喝    &lt;input type="checkbox" v-model="formData.arr" value="c" /&gt;玩    &lt;p&gt;选择的爱好:{{ formData.arr }}&lt;/p&gt;    &lt;!-- 城市: --&gt;    &lt;select name="" id="" v-model="formData.select"&gt;      &lt;option value=""&gt;请选择&lt;/option&gt;      &lt;option value="beijing"&gt;北京&lt;/option&gt;      &lt;option value="shanghai"&gt;上海&lt;/option&gt;      &lt;option value="gaungzhou"&gt;广州&lt;/option&gt;    &lt;/select&gt;    &lt;p&gt;城市选择:{{ formData.select }}&lt;/p&gt;      &lt;button @click="submit"&gt;注册信息&lt;/button&gt;      &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data() {    return {        msg:'初始值',        sex:'',        //对象的语法--------存储表单数据      formData: {        msg: "", //输入框        sex: 1, //性别        arr: [],         select: "",      },    };  },  methods:{    send() {      console.log("输入的数据为:", this.msg);    },    submit() {      //点击按钮--发送输入的数据给后台-- data -- msg  sex arr ...      console.log("提交注册信息表单",this.formData);    },  }};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.修饰符</strong></p><ul><li>lazy&nbsp;  只有当input失去焦点时才更新数据</li><li>number 把input标签中输入的内容转成数字，调用是parseFloat  (Nunber())</li><li>trim   去除左右空格</li></ul><p><strong>案例：</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;h3&gt;表单修饰符 -修饰符 &lt;/h3&gt;    &lt;!-- .lazy 失去焦点或者回车 获取数据 --&gt;    &lt;input type="text" v-model.lazy="search"&gt;    &lt;p&gt;search:{{ search }}&lt;/p&gt;    &lt;input type="text" v-model.trim="msg" name="" id=""&gt;    &lt;p&gt;去空格:{{msg}}&lt;/p&gt;      &lt;!-- .number  转数字 --&gt;    &lt;input type="number" v-model.number="num" name="" id=""&gt;    &lt;p&gt;num:{{ num }}&lt;/p&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data() {    return {        msg:'',        sex:'',      search:'',      num:'只能输入数字',    };  },  methods:{  }};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4.v-model实现原理</strong><br>v-model只不过是一个语法糖而已,真正的实现靠的还是<br>v-bind:绑定响应式数据<br>触发oninput 事件并传递数据<br>v-model&nbsp;是什么。语法糖&nbsp;:value&nbsp;+&nbsp;@input。还要分为两种情况</p><pre class="line-numbers language-none"><code class="language-none">&lt;input v-model="val"&gt;&lt;!-- 基本等价于，因为内部还有一些其他的处理 --&gt;// $event是事件对象，$event.target.value表示input框中的输入值&lt;input :value="val" @input="val = $event.target.value"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例：</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;!-- v-model实现的原理 --&gt;    &lt;input type="text" v-model="inp" name="" id=""&gt;    &lt;p&gt;inp:{{inp}}&lt;/p&gt;     &lt;!-- v-model == v-bind:value='' @input='函数' --&gt;    表单值:&lt;input type="text" :value="val" @input="changeVal" name="" id=""&gt;    &lt;p&gt;val:{{val}}&lt;/p&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data() {    return {        val:'请输入',        msg:'',        inp:'',        sex:'',      search:'',      num:'只能输入数字',    };  },  methods:{    changeVal(e){        console.log(e); //表单的事件对象        console.log(e.target.value); //表单里的文本框内容        this.val = e.target.value; //将文本框内容 赋值给 data里的val 即使用v-bind又让数据进行双向绑定了    }  }};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="计算属性和侦听器"><a href="#计算属性和侦听器" class="headerlink" title="计算属性和侦听器"></a>计算属性和侦听器</h2><p><strong>1. 计算属性</strong></p><ul><li>介绍: 处理数据后把数据缓存起来 使用数据的时候使用的缓存的数据,但是如果原数据修改了重新计算</li><li>语法<pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;计算属性computed&lt;/h2&gt;    &lt;!-- 如果是字符串 取反操作实现 --&gt;    &lt;p&gt;字符串:{{ msg }}&lt;/p&gt;    &lt;!-- 不推荐: 模板语法里面写很多方法  多次使用不方便 --&gt;    // split-先转换为数组， reverse-然后取反， join-最后转为字符串    &lt;p&gt;字符串-取反:{{ msg.split("").reverse().join("") }}&lt;/p&gt;    &lt;p&gt;封装函数-取反:{{qufan()}}&lt;/p&gt;    &lt;p&gt;封装函数-取反:{{qufan()}}&lt;/p&gt;    &lt;p&gt;封装函数-取反:{{qufan()}}&lt;/p&gt;    &lt;p&gt;计算属性-取反：{{msg2}}&lt;/p&gt;    &lt;p&gt;计算属性-取反：{{msg2}}&lt;/p&gt;    &lt;p&gt;计算属性-取反：{{msg2}}&lt;/p&gt;    &lt;p&gt;计算属性-取反：{{msg2}}&lt;/p&gt;    &lt;button @click="msg = 'how are you'"&gt;修改msg&lt;/button&gt;    &lt;!-- 例子: v-for='' v-if不能在同一个元素使用 -- computed处理数据 --&gt;    &lt;h4&gt;早市水果更新:&lt;/h4&gt;     &lt;ul&gt;        &lt;li v-for="item in zaoshi2" :key='item.id'&gt;            {{item.fruit}}        &lt;/li&gt;    &lt;/ul&gt;      &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data() {    return {      msg: "hello vue",      zaoshi: [        {          id: 100,          fruit: "苹果",          flag: false,        },        {          id: 101,          fruit: "阳光玫瑰",          flag: true,        },        {          id: 102,          fruit: "车厘子",          flag: false,        },        {          id: 103,          fruit: "榴莲",          flag: true,        },      ],    };  },  methods: {    qufan() {      console.log("执行了一次取反方法");      return this.msg.split("").reverse().join("");    },  },  //计算属性: 对数据进行加工处理  缓存数据  computed: {    msg2() {      console.log("计算属性: 对数据进行加工处理  缓存数据");      return this.msg.split("").reverse().join("");    },    //处理数据    zaoshi2(){        //过滤方法 返回的满足条件的数组  比如:[1,2,3,4]  =&gt;[3,4]        return this.zaoshi.filter((item)=&gt;{            // if(item.flag == true) {            //     return item.flag            // }            return item.flag        })    }  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>2. 侦听器</strong></p><ul><li>介绍: Vue 通过 watch 选项提供了一个更通用的方法，来响应数据的变化 <pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;      &lt;h2&gt;侦听器-watch&lt;/h2&gt;      &lt;p&gt;功能:监听数据修改了,然后做业务逻辑&lt;/p&gt;      &lt;input type="text" v-model="inp"  name="" id=""&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {    data(){        return{            inp:'',            arr:[]        }    },    //侦听器--数据变化 (当前监听的是inp变化)    watch:{        inp:function(n,o){            console.log('新值:',n ,'旧值:',o);            //业务逻辑  比如输入东西后 网络请求            //模糊查询                    }    }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>3. computed和watch区别 （考点）</strong> </p><ul><li>相同：computed和watch都是观察页面的数据变化的。</li><li>不同：<br>computed：是计算属性，依赖其它属性值:</li><li>支持缓存，只有依赖数据发生改变，才会重新进行计算</li><li>不支持异步，当computed内有异步操作时无效，无法监听数据的变化<br>watch：没有缓存性，更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；</li><li>不支持缓存，数据变，直接会触发相应的操作；</li><li>watch支持异步；</li></ul><h2 id="Vue-的生命周期方法有哪些-一般在哪一步发请求"><a href="#Vue-的生命周期方法有哪些-一般在哪一步发请求" class="headerlink" title="Vue 的生命周期方法有哪些 一般在哪一步发请求"></a>Vue 的生命周期方法有哪些 一般在哪一步发请求</h2><p><strong>生命周期</strong>：事物从诞生到消亡的过程<br>Vue生命周期：<br><img src="https://s1.ax1x.com/2022/04/19/L06cp4.png"></p><h2 id="v-if-和-v-show-的区别"><a href="#v-if-和-v-show-的区别" class="headerlink" title="v-if 和 v-show 的区别"></a>v-if 和 v-show 的区别</h2><p>v-if: 控制元素的渲染或者销毁<br>v-show:控制元素的 display:block/none</p><blockquote><p>场景：<br>频繁切换： v-show<br>初次渲染优化：v-if </p></blockquote><h2 id="Vue-修饰符有哪些"><a href="#Vue-修饰符有哪些" class="headerlink" title="Vue 修饰符有哪些"></a>Vue 修饰符有哪些</h2><h2 id="v-for-为什么要加-key"><a href="#v-for-为什么要加-key" class="headerlink" title="v-for 为什么要加 key"></a>v-for 为什么要加 key</h2><h2 id="理解-Vue-的单向-双向-数据流"><a href="#理解-Vue-的单向-双向-数据流" class="headerlink" title="理解 Vue 的单向/双向 数据流"></a>理解 Vue 的单向/双向 数据流</h2><h3 id="首先了解一下数据绑定"><a href="#首先了解一下数据绑定" class="headerlink" title="首先了解一下数据绑定"></a>首先了解一下数据绑定</h3><p>什么是绑定？<br>比如当前href属性值取决于表达式school.url.toUpperCase()的结果，这两者之间就是有绑定关系，且通过v-bind指令完成数据绑定。</p><pre class="line-numbers language-none"><code class="language-none">&lt;a v-bind:href="school.url.toUpperCase()" v-bind:x="hello"&gt;点我去{{school.name}}学习&lt;/a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="v-bind-单向数据原理"><a href="#v-bind-单向数据原理" class="headerlink" title="v-bind 单向数据原理"></a>v-bind 单向数据原理</h3><p>前面学习的指令主要作用是将值插入到模板的内容当中<br>但除了内容需要动态来决定外，某些属性也希望动态来绑定<br><strong>作用：动态绑定属性</strong><br>缩写：**:**<br>预期：any (with argument) | Object (without argument)<br>参数：attrOrProp (optional)<br><strong>v-bind用于绑定一个或多个属性值，或者向另一个组件传递props值</strong>(这个学到Vue进阶时介绍)<br>在开发中，一般有哪些属性需要动态进行绑定呢？<br>比如图片的链接src、网站的链接href、动态绑定一些类、样式等等<br>例子：通过Vue实例中的data绑定元素的src和href，代码如下：</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>很多时候，我们希望动态的来切换class，比如：<br>当数据为某个状态时，字体显示红色。<br>当数据另一个状态时，字体显示黑色。</p><pre class="line-numbers language-none"><code class="language-none">&lt;div id="app"&gt;  &lt;!-- 错误的做法: 这里不可以使用mustache语法--&gt;  &lt;!--&lt;img src="{{imgURL}}" alt=""&gt;--&gt;  &lt;!-- 正确的做法: 使用v-bind指令 --&gt;  &lt;img v-bind:src="imgURL" alt=""&gt;  &lt;a v-bind:href="aHref"&gt;百度一下&lt;/a&gt;  &lt;!--&lt;h2&gt;{{}}&lt;/h2&gt;--&gt;  &lt;!--语法糖的写法--&gt;  &lt;img :src="imgURL" alt=""&gt;  &lt;a :href="aHref"&gt;百度一下&lt;/a&gt;&lt;/div&gt;&lt;script src="../js/vue.js"&gt;&lt;/script&gt;&lt;script&gt;  const app = new Vue({    el: '#app',    data: {      message: '你好啊',      imgURL: 'https://img11.360buyimg.com/mobilecms/s350x250_jfs/t1/20559/1/1424/73138/5c125595E3cbaa3c8/74fc2f84e53a9c23.jpg!q90!cc_350x250.webp',      aHref: 'http://www.baidu.com'    }  })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="v-bind动态绑定class-对象语法"><a href="#v-bind动态绑定class-对象语法" class="headerlink" title="v-bind动态绑定class(对象语法)"></a>v-bind动态绑定class(对象语法)</h4><ul><li>绑定方式：对象语法<br>含义是:class后面跟的是一个对象</li></ul><ol><li>直接通过{}绑定一个类<pre class="line-numbers language-none"><code class="language-none">&lt;h2 :class="{'active': isActive}"&gt;Hello World&lt;/h2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>也可以通过判断，传入多个值<pre class="line-numbers language-none"><code class="language-none">&lt;h2 :class="{'active': isActive, 'line': isLine}"&gt;Hello World&lt;/h2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>和普通的类同时存在，并不冲突<br>注：如果isActive和isLine都为true，那么会有title/active/line三个类<pre class="line-numbers language-none"><code class="language-none">&lt;h2 class="title" :class="{'active': isActive, 'line': isLine}"&gt;Hello World&lt;/h2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>如果过于复杂，可以放在一个methods或者computed中<br>注：classes是一个计算属性<pre class="line-numbers language-none"><code class="language-none">&lt;h2 class="title" :class="classes"&gt;Hello World&lt;/h2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>比如ul的li标签点击某个标签变颜色</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;div id="app"&gt;  &lt;!-- 当布尔值为true 这个类名1即 active 就会被添加到标签上 --&gt;  &lt;!-- 一个 { } 表示对象 --&gt;  &lt;h2 class="title" v-bind:class="{active: isActive, line: isLine}"&gt;{{message}}&lt;/h2&gt;  &lt;h2 class="title" v-bind:class="getClasses()"&gt;{{message}}&lt;/h2&gt;  &lt;button v-on:click="btnClick"&gt;按钮&lt;/button&gt;&lt;/div&gt;&lt;script&gt;  const app = new Vue({    el: '#app',    data: {      message: '你好啊',      isActive: true,      isLine: true    },    methods: {      btnClick: function () {        this.isActive = !this.isActive      },      getClasses: function () {        return {active: this.isActive}      }    }  })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="v-bind动态绑定class-数组语法"><a href="#v-bind动态绑定class-数组语法" class="headerlink" title="v-bind动态绑定class(数组语法)"></a>v-bind动态绑定class(数组语法)</h4><ul><li>数组语法的含义是:class后面跟的是一个数组。</li></ul><ol><li>直接通过{}绑定一个类<pre class="line-numbers language-none"><code class="language-none">&lt;h2 :class="['active']"&gt;Hello World&lt;/h2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>也可以传入多个值<pre class="line-numbers language-none"><code class="language-none">&lt;h2 :class=“[‘active’, 'line']"&gt;Hello World&lt;/h2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>和普通的类同时存在，并不冲突<br>注：会有title/active/line三个类<pre class="line-numbers language-none"><code class="language-none">&lt;h2 class="title" :class=“[‘active’, 'line']"&gt;Hello World&lt;/h2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>如果过于复杂，可以放在一个methods或者computed中<br>注：classes是一个计算属性<pre class="line-numbers language-none"><code class="language-none">&lt;h2 class="title" :class="classes"&gt;Hello World&lt;/h2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>例如：</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;div id="app"&gt;  &lt;h2 class="title" :class="[active, line]"&gt;{{message}}&lt;/h2&gt;  &lt;h2 class="title" :class="getClasses()"&gt;{{message}}&lt;/h2&gt;&lt;/div&gt;&lt;script src="../js/vue.js"&gt;&lt;/script&gt;&lt;script&gt;  const app = new Vue({    el: '#app',    data: {      message: '你好啊',      active: 'aaaaaa',      line: 'bbbbbbb'    },    methods: {      getClasses: function () {        return [this.active, this.line]      }    }  })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="小案例-点击li标签变色（默认第一li为红色）"><a href="#小案例-点击li标签变色（默认第一li为红色）" class="headerlink" title="小案例 点击li标签变色（默认第一li为红色）"></a>小案例 点击li标签变色（默认第一li为红色）</h4><p>分析：</p><ol><li>v-for绑定给li标签，同时v-on添加点击事件，并且li标签的class用v-bind动态绑定 </li><li>使用v-for绑定到li标签上，自动遍历data中的数据，将下标（index）和每一项内容（item）用插值语法显示到页面</li><li>在data中添加一个isRed属性值为0，想让class样式显示，需要v-bind绑定的red值为true，即该值可以等等于index,因为index的第一个值就是0</li><li>v-on点击事件点击某一个li，将下标的值赋值给isRed，即当前点击的li标签的class样式显示 end~<pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;    .red {      color: red;    }&lt;/style&gt;&lt;!--作业需求: 点击列表中的哪一项, 那么该项的文字变成红色--&gt;&lt;div id="app"&gt;    &lt;ul&gt;      &lt;!-- &lt;li v-for="每一项,下标 in 数据源"&gt;{{item}}&lt;/li&gt; --&gt;      &lt;li v-for="(item,index) in movie"  v-on:click="getColor(index)"       v-bind:class="{red:isRed==index}" &gt;{{index}}--{{item}}&lt;/li&gt;    &lt;/ul&gt;&lt;/div&gt;&lt;script&gt;    const app = new Vue({      el:'#app',      data:{        isRed:0,        movie:['海王','海尔兄弟','火影忍者','进击的巨人']      },      methods:{        getColor: function (index){           this.isRed = index           console.log(this.isRed);        }      },    })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="v-bind绑定style-一"><a href="#v-bind绑定style-一" class="headerlink" title="v-bind绑定style 一"></a>v-bind绑定style 一</h4><p>利用v-bind:style来绑定一些CSS内联样式<br>在写CSS属性名的时候，比如font-size<br>可以使用驼峰式 (camelCase)  fontSize<br>或短横线分隔 (kebab-case，记得用单引号括起来) ‘font-size’</p><h2 id="v-model-双向数据原理"><a href="#v-model-双向数据原理" class="headerlink" title="v-model 双向数据原理"></a>v-model 双向数据原理</h2><h2 id="Vue2-x响应式数据-双向绑定原理"><a href="#Vue2-x响应式数据-双向绑定原理" class="headerlink" title="Vue2.x响应式数据/双向绑定原理"></a>Vue2.x响应式数据/双向绑定原理</h2><p>整体思路是数据劫持+观察者模式<br>Vue 数据双向绑定主要是指：数据变化更新视图，视图变化更新数据。其中，View变化更新Data，可以通过事件监听的方式来实现，所以 Vue数据双向绑定的工作主要是如何根据Data变化更新View。<br><strong>Vue中有两种数据绑定的方式：</strong></p><ol><li>单向绑定(v-bind)：数据只能从data流向页面。</li><li>双向绑定(v-model)：数据不仅能从data流向页面，还可以从页面流向data。<br>备注：</li><li>双向绑定一般都应用在表单类元素上（如：input、select等）</li><li>v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值。<pre class="line-numbers language-none"><code class="language-none">&lt;!-- 准备好一个容器--&gt;&lt;div id="root"&gt;&lt;!-- 普通写法 --&gt;&lt;!-- 单向数据绑定：&lt;input type="text" v-bind:value="name"&gt;双向数据绑定：&lt;input type="text" v-model:value="name"&gt;&lt;!-- 简写 --&gt;单向数据绑定：&lt;input type="text" v-bind:value="name"&gt;双向数据绑定：&lt;input type="text" v-model:value="name"&gt;&lt;!-- 如下代码是错误的，因为v-model只能应用在表单类元素（输入类元素）上 --&gt;&lt;!-- &lt;h2 v-model:x="name"&gt;你好啊&lt;/h2&gt; --&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。  new Vue({  el:'#root',  data:{  name:'哔哩哔哩',  }  })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="虚拟-DOM-是什么-有什么优缺点"><a href="#虚拟-DOM-是什么-有什么优缺点" class="headerlink" title="虚拟 DOM 是什么 有什么优缺点"></a>虚拟 DOM 是什么 有什么优缺点</h2><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p>全称： Model-View-ViewModel ， Model 表示数据模型层。 view 表示视图层， ViewModel 是 View 和 Model 层的桥梁，数据绑定到 viewModel 层并自动渲染到页面中，视图变化通知 viewModel 层更新数据。</p><ul><li>Model层：</li></ul><p><strong>数据层</strong><br>数据可能是我们固定的死数据，更多的是来自我们服务器，从网络上请求下来的数据。</p><ul><li>View层：</li></ul><p><strong>视图层</strong><br>在我们前端开发中，通常就是DOM层。<br>主要的作用是给用户展示各种信息。</p><ul><li>VueModel层：</li></ul><p><strong>视图模型层</strong><br>视图模型层是View和Model沟通的桥梁。<br>一方面它实现了Data Binding，也就是数据绑定，将Model的改变实时的反应到View中<br>另一方面它实现了DOM Listener，也就是DOM监听，当DOM发生一些事件(点击、滚动、touch等)时，可以监听到，并在需要的情况下改变对应的Data。</p><ol><li>M：模型(Model) ：对应 data 中的数据</li><li>V：视图(View) ：模板</li><li>VM：视图模型(ViewModel) ： Vue 实例对象<br>Vm（Vue实例对象）把左边的View和右边Model进行连接在一起<br><img src="https://s1.ax1x.com/2022/04/18/LdwQa9.png"></li></ol><p><strong>观察发现：</strong></p><ol><li>data中所有的属性，最后都出现在了vm身上。</li><li>VM身上所有的属性 及 Vue原型上所有属性，在Vue模板中都可以直接使用。</li></ol><p><strong>执行过程</strong> ：数据在data中经过 VM视图模型放到了页面View上页面上如果有地方需要更改要映射回数据就再给VM视图模型，然后视图模型再给data里的数据 </p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 1 准备好一个容器 也就是 view 视图 模板代码--&gt; &lt;div id="root"&gt;&lt;h1&gt;学校名称：{{name}}&lt;/h1&gt;&lt;h1&gt;学校地址：{{address}}&lt;/h1&gt;&lt;!-- &lt;h1&gt;测试一下1：{{1+1}}&lt;/h1&gt;&lt;h1&gt;测试一下2：{{$options}}&lt;/h1&gt;&lt;h1&gt;测试一下3：{{$emit}}&lt;/h1&gt;&lt;h1&gt;测试一下4：{{_c}}&lt;/h1&gt; --&gt;&lt;/div&gt; &lt;script type="text/javascript"&gt;Vue.config.productionTip = fal    se //阻止 vue 在启动时生成生产提示const vm = new Vue({// 2 VM 视图模型ViewModelel:'#root',data:{ // 3 data里的是模型 modelname:"b站大学",address:"成都",}}) console.log(vm)&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vue的数据代理"><a href="#Vue的数据代理" class="headerlink" title="Vue的数据代理"></a>Vue的数据代理</h2><h3 id="首先学习下-Object-defineProperty-方法"><a href="#首先学习下-Object-defineProperty-方法" class="headerlink" title="首先学习下 Object.defineProperty()方法"></a>首先学习下 Object.defineProperty()方法</h3><p>Object.defineProperty() 方法直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象。<br><strong>defineProperty()参数</strong></p><pre class="line-numbers language-none"><code class="language-none">Object.defineProperty(obj, prop, descriptor)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>obj 需要定义属性的对象</li><li>prop 需被定义或修改的属性名</li><li>descriptor 需被定义或修改的属性的描述符</li></ul><p>例子：定义了一个person对象，里面包含name、sex属性和其它属性值。<br>注意：age属性是通过defineProperty方法中</p><pre class="line-numbers language-none"><code class="language-none">&lt;script type="text/javascript"&gt;let number = 19let person = {name: '张三',sex: '男',}Object.defineProperty(person, 'age', {value:19,        enumerable:true, //控制属性是否可以枚举，默认值是falsewritable:true, //控制属性是否可以被修改，默认值是falseconfigurable:true //控制属性是否可以被删除，默认值是false//当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值get() {console.log('有人读取age属性了')return number},//当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值set(value) {console.log('有人修改了age属性，且值是', value)number = value}}) console.log(Object.keys(person))// Object.keys方法传入一个对象作为参数，可以把传入对象所有属性的属性名提取出来变成数组console.log(person)&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vue中的数据代理"><a href="#Vue中的数据代理" class="headerlink" title="Vue中的数据代理"></a>Vue中的数据代理</h2><h3 id="什么是数据代理"><a href="#什么是数据代理" class="headerlink" title="什么是数据代理"></a>什么是数据代理</h3><p>数据代理：通过一个对象代理对另一个对象中属性的操作（读/写）</p><pre class="line-numbers language-none"><code class="language-none">&lt;script type="text/javascript" &gt;let obj = {x:100 }let obj2 = {y:200Object.defineProperty(obj2,'x',{get(){return obj.x},set(value){obj.x = value}})&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="vue常用ui库"><a href="#vue常用ui库" class="headerlink" title="vue常用ui库"></a>vue常用ui库</h2><p><strong>移动端</strong></p><ul><li>mint-ui （<a href="http://mint-ui.github.io/#!/zh-cn%EF%BC%89">http://mint-ui.github.io/#!/zh-cn）</a></li><li>Vant（<a href="https://youzan.github.io/vant/#/zh-CN/home%EF%BC%89">https://youzan.github.io/vant/#/zh-CN/home）</a></li><li>VUX (<a href="https://vux.li/">https://vux.li/</a>)</li></ul><p><strong>pc端</strong></p><ul><li>element-ui（<a href="https://element.eleme.cn/2.13/#/zh-CN/component/installation%EF%BC%89">https://element.eleme.cn/2.13/#/zh-CN/component/installation）</a></li><li>Ant Design of Vue（<a href="https://www.antdv.com/docs/vue/introduce-cn/%EF%BC%89">https://www.antdv.com/docs/vue/introduce-cn/）</a></li><li>Avue (<a href="https://avuejs.com/">https://avuejs.com/</a>)</li></ul><h2 id="常用webpack配置"><a href="#常用webpack配置" class="headerlink" title="常用webpack配置"></a>常用webpack配置</h2><p><strong>待更新。。。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vue的安装&quot;&gt;&lt;a href=&quot;#Vue的安装&quot; class=&quot;headerlink&quot; title=&quot;Vue的安装&quot;&gt;&lt;/a&gt;Vue的安装&lt;/h2&gt;&lt;h3 id=&quot;安装环境&quot;&gt;&lt;a href=&quot;#安装环境&quot; class=&quot;headerlink&quot; title=&quot;安</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="vue" scheme="https://wuzimo233.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>axios学习</title>
    <link href="https://wuzimo233.github.io/posts/4.html"/>
    <id>https://wuzimo233.github.io/posts/4.html</id>
    <published>2022-04-17T06:12:00.000Z</published>
    <updated>2022-04-18T08:01:30.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p><strong>已经学习过ajax、Promise</strong><br>准备json-server包，快速搭建HTTP服务（用axios的时候需要向服务端发送请求即需要服务端这个角色来与axios结合做实践）</p><ul><li>json-server用于模拟服务端接口数据，可以根据json数据建立一个完整的web服务</li><li>1安装json-server<pre class="line-numbers language-none"><code class="language-none">npm install -g json-server//查看版本号，安装成功json-server -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>2在文件夹下创建一个db.json文件，存放一些数据。<pre class="line-numbers language-none"><code class="language-none">{  "posts": [            //文章    {      "id": 1,      "title": "json-server",      "author": "typicode"    },    {      "id": 2,      "title": "《b站大学》",      "author": "吴老师"    }  ],  "comments": [        //评论    {      "id": 1,      "body": "some comment",      "postId": 1    },    {      "body": "喜大普奔",      "postId": 2,      "id": 2    }  ],  "profile": {        //个人信息    "name": "typicode"  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>3 启动服务<br>进入终端。执行启动json-server命令:<pre class="line-numbers language-none"><code class="language-none">json-server --watch .\db.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h2 id="认识axios"><a href="#认识axios" class="headerlink" title="认识axios"></a>认识axios</h2><h3 id="axios-是什么"><a href="#axios-是什么" class="headerlink" title="axios 是什么?"></a>axios 是什么?</h3><p>axios是目前前端使用非常广泛的基于 promise 的 HTTP 网络请求库，包括Vue/React也是推荐使用axios；<br><strong>本质是XMLHttpRequests请求 即ajax请求</strong></p><h3 id="axios-特性："><a href="#axios-特性：" class="headerlink" title="axios 特性："></a><strong>axios 特性：</strong></h3><ol><li>从浏览器中创建 XMLHttpRequests （浏览器中发送xml请求）</li><li>从 node.js 创建 http 请求 （在node.js中发送http请求）</li><li>支持 Promise API 相关操作</li><li>拦截请求和响应</li><li>转换请求数据和响应数据（对请求和响应的数据作转换）</li><li>取消请求</li><li>自动将结果转换成 JSON 数据</li><li>客户端支持防御 XSRF （阻止跨站攻击）</li></ol><h3 id="axios安装"><a href="#axios安装" class="headerlink" title="axios安装"></a>axios安装</h3><ul><li>1 使用 npm安装:<pre class="line-numbers language-none"><code class="language-none">$ npm install axios<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>2 使用 yarn安装:<pre class="line-numbers language-none"><code class="language-none">$ yarn add axios<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>3 使用 jsDelivr CDN安装:<pre class="line-numbers language-none"><code class="language-none">&lt;script src="https://cdn.bootcdn.net/ajax/libs/axios/0.26.1/axios.min.js"&gt;&lt;/script&gt; console.log(axios);  //ƒ() {for(var n=new Array(arguments.length),r=0;r&lt;n.length;r++)n[r]=arguments[r];return e.apply(t,n)} //建议使用国内CDN网速较快  //去这个网站引入 https://www.bootcdn.cn/axios/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="axios的基本使用"><a href="#axios的基本使用" class="headerlink" title="axios的基本使用"></a>axios的基本使用</h2></li></ul><p><strong>前置：引入了axios</strong><br><strong>准备四个按钮发送不同的请求</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="container"&gt;    &lt;h2 class="page-header"&gt;基本使用&lt;/h2&gt;    &lt;button class="btn btn-primary"&gt; 发送GET请求 &lt;/button&gt;    &lt;button class="btn btn-warning"&gt; 发送POST请求 &lt;/button&gt;    &lt;button class="btn btn-success"&gt; 发送 PUT 请求 &lt;/button&gt;    &lt;button class="btn btn-danger"&gt; 发送 DELETE 请求 &lt;/button&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><pre class="line-numbers language-none"><code class="language-none">//获取按钮const btns = document.querySelectorAll('button');//第一个 （get 查询功能）btns[0].onclick = function () {    //发送ajax请求     axios({        //请求类型        method: 'GET',        //请求地址 刚启动好的json-server地址 且id为2的那篇文章        url: ' http://localhost:3000/posts/2'    }).then(response =&gt; {        console.log(response);    })}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><pre class="line-numbers language-none"><code class="language-none">//添加一篇新的文章 （post 添加功能）btns[1].onclick = function () {    //发送ajax请求    axios({        method: 'POST',                       //请求类型        url: ' http://localhost:3000/posts',  //请求地址        data: {            "title": "招聘摄影",               //请求体            "author": "小吴"            }    }).then(response =&gt; {        console.log(response);    })}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PUT请求"><a href="#PUT请求" class="headerlink" title="PUT请求"></a>PUT请求</h3><pre class="line-numbers language-none"><code class="language-none">//更新文章 需要在url里加上id 比如这里要更新的是id为3的文章（put 更新功能）btns[2].onclick = function () {    //发送ajax请求    axios({        method: 'PUT',                          //请求类型        url: ' http://localhost:3000/posts/3',  //请求地址        data: {                                             "title": "招聘程序员吗",             //修改请求体的数据            "author": "小瑶酱"        }    }).then(response =&gt; {        console.log(response);    })}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DELETE请求"><a href="#DELETE请求" class="headerlink" title="DELETE请求"></a>DELETE请求</h3><pre class="line-numbers language-none"><code class="language-none">//删除文章 （delete 删除功能）btns[3].onclick = function () {    //发送ajax请求    axios({        //请求类型        method: 'DELETE',        //请求地址        url: ' http://localhost:3000/posts/3',    }).then(response =&gt; {        console.log(response);    })}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="axios的其他发送请求"><a href="#axios的其他发送请求" class="headerlink" title="axios的其他发送请求"></a>axios的其他发送请求</h3><h4 id="使用request方法-发送-GET-请求-（接收一个对象类型参数）"><a href="#使用request方法-发送-GET-请求-（接收一个对象类型参数）" class="headerlink" title="使用request方法 发送 GET 请求 （接收一个对象类型参数）"></a>使用request方法 发送 GET 请求 （接收一个对象类型参数）</h4><pre class="line-numbers language-none"><code class="language-none">//获取按钮const btns = document.querySelectorAll('button');btns[0].onclick = function(){    // axios()    axios.request({        method:'GET',        url:'  http://localhost:3000/posts',    // 返回结果依然是Promise对象 用then指定成功的回调    }).then((response) =&gt; {        console.log(response);    })    ;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用POST方法-发送post请求-增加数据"><a href="#使用POST方法-发送post请求-增加数据" class="headerlink" title="//使用POST方法  发送post请求 增加数据"></a>//使用POST方法  发送post请求 增加数据</h4><pre class="line-numbers language-none"><code class="language-none">//获取按钮const btns = document.querySelectorAll('button');        btns[1].onclick = function(){            // axios()            axios.post(                'http://localhost:3000/comments',                 {                    "body": "喜大普奔",                    "postId": 2                }).then(response =&gt; {                    console.log(response);                })        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="axios配置对象"><a href="#axios配置对象" class="headerlink" title="axios配置对象"></a>axios配置对象</h2><pre class="line-numbers language-none"><code class="language-none">{   // `url` 是用于请求的服务器 URL  url: '/user',  // `method` 是创建请求时使用的方法  method: 'get',  // `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。  baseURL: 'https://some-domain.com/api/',  // `transformRequest` 对请求的数据做处理，处理后将结果像服务器发送  // 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法  // 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream  transformRequest: [function (data, headers) {    // 对 data 进行任意转换处理    return data;  }],  // `transformResponse` 对响应的结果做一些改变，改变之后我们用自定义的回调去处理结果  transformResponse: [function (data) {    // 对 data 进行任意转换处理    return data;  }],  // `headers` 对请求头信息做一个配置（身份校验）  headers: {'X-Requested-With': 'XMLHttpRequest'},  // `params` 是即将与请求一起发送的 URL 参数  // 必须是一个无格式对象(plain object)或 URLSearchParams 对象  params: {    ID: 12345  },  // `data` 是作为请求体的设置  // 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'  // 在没有设置 `transformRequest` 时，必须是以下类型之一：  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams  // - 浏览器专属：FormData, File, Blob  // - Node 专属： Stream  data: {    firstName: 'Fred'  },  // `timeout` 指定请求超时的毫秒数(0 表示无超时时间)  // 如果请求话费了超过 `timeout` 的时间，请求将被中断  timeout: 1000,  // `withCredentials` 表示跨域请求时对coken的携带设置  withCredentials: false,  //不携带  // `adapter` 对请求的适配器做设置  // 有两种一种是ajax、一种是node.js里发送http请求的  adapter: function (config) {    /* ... */  },  // `auth` 对请求基础的验证设置用户名和密码   auth: {    username: 'janedoe',    password: 's00pers3cret'  },  // `responseType` 表示服务器响应的数据类型，可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'  responseType: 'json', // 默认  // 响应结果的编码  responseEncoding: 'utf8',   // `xsrfCookieName` 跨域请求标识对cookie的名称设置  xsrfCookieName: 'XSRF-TOKEN',   // `xsrfHeaderName`  是承载 xsrf token 的值的 HTTP 头的名称  xsrfHeaderName: 'X-XSRF-TOKEN', // default  // `onUploadProgress` 上传的一些回调  onUploadProgress: function (progressEvent) {    // 对原生进度事件的处理  },  // `onDownloadProgress` 下载时的一些回调  onDownloadProgress: function (progressEvent) {    // 对原生进度事件的处理  },  // `maxContentLength` 定义允许的响应内容的最大尺寸  maxContentLength: 2000,  // `validateStatus`  对响应结果的成功做一个设置 什么情况下是成功的呢？默认值为响应状态码 大于等于200 小于300  validateStatus: function (status) {    return status &gt;= 200 &amp;&amp; status &lt; 300; // default  },  // `maxRedirects` 最大跳转的次数 默认5次 即向一个服务发送请求，它作了跳转后呢，我们是否需要让它继续往前进行请求   maxRedirects: 5, // 默认的  // 设置socket 文件的位置 作用是像docker的守护进程发送请求的  socketPath: null, // default  // 对客户端的一些信息做一些设置  httpAgent: new http.Agent({ keepAlive: true }),  httpsAgent: new https.Agent({ keepAlive: true }),  // 设置代理   // `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据  // 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。   proxy: {    host: '127.0.0.1',    port: 9000,    auth: {      username: 'mikeymike',      password: 'rapunz3l'    }  },  // `cancelToken` 对ajax请求作一个取消的设置  cancelToken: new CancelToken(function (cancel) {  })}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="axios的默认配置"><a href="#axios的默认配置" class="headerlink" title="axios的默认配置"></a>axios的默认配置</h3><p>例子：点击按钮发送get请求<br>//<strong>没有做默认配置时，每次访问都比较麻烦</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="container"&gt;    &lt;h2 class="page-header"&gt;基本使用&lt;/h2&gt;    &lt;button class="btn btn-primary"&gt; 发送GET请求 &lt;/button&gt;    &lt;button class="btn btn-warning"&gt; 发送POST请求 &lt;/button&gt;    &lt;button class="btn btn-success"&gt; 发送 PUT 请求 &lt;/button&gt;    &lt;button class="btn btn-danger"&gt; 发送 DELETE 请求 &lt;/button&gt;&lt;/div&gt;&lt;script&gt;    // 获取按钮    const btns = document.querySelectorAll('button');    btns[0].onclick = function(){        axios({            method:'GET',            url: 'http://localhost:3000/posts'        }).then(response =&gt; {            console.log(response);        })    }&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用默认配置后</p><pre class="line-numbers language-none"><code class="language-none">//默认配置axios.defaults.method = 'GET';  //设置默认的请求类型为 GETaxios.defaults.baseURL = 'http://localhost:3000' //设置基础urlbtns[0].onclick = function () {    axios({        url: '/posts',    }).then(response =&gt; {        console.log(response);    })//还有其他的默认配置项// axios.defaults.params = {id:100}; 默认的请求url参数 即url后增加 ?id=100// axios.defaults.timeout = 3000;  超时时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="axios创建实例对象"><a href="#axios创建实例对象" class="headerlink" title="axios创建实例对象"></a>axios创建实例对象</h3><p>主要用于：项目中接口数据服务不是来自于单一的服务器，比如有两个服务器A、B，都提供了数据服务。在发送请求时，比如给A发，就要去设置A的协议域名端口，如果用默认方法做只能满足一个服务器，</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="container"&gt;    &lt;h2 class="page-header"&gt;基本使用&lt;/h2&gt;    &lt;button class="btn btn-primary"&gt; 发送GET请求 &lt;/button&gt;    &lt;button class="btn btn-warning" &gt; 发送POST请求 &lt;/button&gt;    &lt;br&gt;&lt;/div&gt;&lt;script&gt;    //获取按钮    const btns = document.querySelectorAll('button');    //创建实例对象 /getJoke    const duanzi = axios.create({        baseURL:'https://api.apiopen.top',        timeout:2000    });    //这里duanzi 与 axios 对象的功能几近是一样的     duanzi({        url:'/getJoke',    }).then((response)=&gt;{        console.log(response);    })    duanzi.get('/getJoke').then((response) =&gt; {        console.log(response.data);    })    const another = axios.create({        baseURL:'http:b.com',        timeout:2000    })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="axios拦截器"><a href="#axios拦截器" class="headerlink" title="axios拦截器"></a>axios拦截器</h2><p>在请求或响应被 then 或 catch 处理前拦截它们。<br>在发送请求之前，借助一些函数对请求的参数和内容作一些处理和检测。如果说都没有问题再去发送请求，有问题的话这个请求就停止或者取消。<br>当服务器返回结果之后，可以通过自己指定的回调处理结果。那么响应拦截器可以在我们处理响应结果之前先对结果做一些预处理。如：失败了就对失败结果做一些提醒或者记录，还能对数据接口做一些格式化的处理。然后再交由我们自己自定义的回调来处理。如果有问题在响应拦截器中就处理掉了。<br>执行顺序是，当用户发送请求后先执行请求拦截器成功/失败的回调，然后走响应拦截器成功/失败的回调，然后再走自定义的成功/失败的回调</p><h3 id="一般情况"><a href="#一般情况" class="headerlink" title="一般情况"></a>一般情况</h3><pre class="line-numbers language-none"><code class="language-none">// Promise相关// 设置请求拦截器  config 配置对象axios.interceptors.request.use(function (config) {    console.log('请求拦截器 成功');    return config;}, function (error) {    console.log('请求拦截器 失败 ');    return Promise.reject(error);});// 设置响应拦截器axios.interceptors.response.use(function (response) {    console.log('响应拦截器 成功');    return response;    // return response;}, function (error) {    console.log('响应拦截器 失败')    return Promise.reject(error);});//发送请求axios({    method: 'GET',    url: 'http://localhost:3000/posts'}).then(response =&gt; {    console.log('自定义回调处理成功的结果');    console.log(response);});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他情况：请求拦截器成功但抛出错误，响应拦截器失败，自定义失败回调"><a href="#其他情况：请求拦截器成功但抛出错误，响应拦截器失败，自定义失败回调" class="headerlink" title="其他情况：请求拦截器成功但抛出错误，响应拦截器失败，自定义失败回调"></a><strong>其他情况：请求拦截器成功但抛出错误，响应拦截器失败，自定义失败回调</strong></h3><pre class="line-numbers language-none"><code class="language-none">// Promise相关// 设置请求拦截器  config 配置对象axios.interceptors.request.use(function (config) {    console.log('请求拦截器 成功');    // return config;    throw '参数出了问题'     //如果这里抛出错误即失败了，返回一个失败的Promise，    //在执行后续的响应回调时就只能走失败的回调了，}, function (error) {    console.log('请求拦截器 失败 ');    return Promise.reject(error);});// 设置响应拦截器axios.interceptors.response.use(function (response) {    console.log('响应拦截器 成功');    return response;    // return response;}, function (error) {    console.log('响应拦截器 失败')    return Promise.reject(error);});//发送请求axios({    method: 'GET',    url: 'http://localhost:3000/posts'}).then(response =&gt; {    console.log('自定义回调处理成功的结果');    console.log(response);}).catch(reason =&gt; {    console.log('自定义回调处理失败的结果');    console.log(reason);})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多个请求、响应的结果顺序"><a href="#多个请求、响应的结果顺序" class="headerlink" title="多个请求、响应的结果顺序"></a><strong>多个请求、响应的结果顺序</strong></h3><p>请求拦截器 成功 2号<br>请求拦截器 成功 1号<br>响应拦截器 成功 1号<br>响应拦截器 成功 2号<br>自定义回调处理成功的结果<br>{data: Array(2), status: 200, statusText: ‘OK’, headers: {…}, config: {…},&nbsp;…}</p><pre class="line-numbers language-none"><code class="language-none">// Promise相关// 设置请求拦截器  config 配置对象axios.interceptors.request.use(function (config) {    console.log('请求拦截器 成功 1号');    //修改 config 中的参数    // config.params = {a:100};    return config;}, function (error) {    console.log('请求拦截器 失败 1号');    return Promise.reject(error);});axios.interceptors.request.use(function (config) {    console.log('请求拦截器 成功 2号');    //修改 config 中的参数    config.timeout = 2000;    return config;}, function (error) {    console.log('请求拦截器 失败 2号');    return Promise.reject(error);});// 设置响应拦截器axios.interceptors.response.use(function (response) {    console.log('响应拦截器 成功 1号');    return response;    // return response;}, function (error) {    console.log('响应拦截器 失败 1号')    return Promise.reject(error);});axios.interceptors.response.use(function (response) {    console.log('响应拦截器 成功 2号')    return response;}, function (error) {    console.log('响应拦截器 失败 2号')    return Promise.reject(error);});//发送请求axios({    method: 'GET',    url: 'http://localhost:3000/posts'}).then(response =&gt; {    console.log('自定义回调处理成功的结果');    console.log(response);}).catch(reason =&gt; {    console.log('自定义回调处理失败的结果');    console.log(reason);})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="axios取消请求"><a href="#axios取消请求" class="headerlink" title="axios取消请求"></a>axios取消请求</h2><ol><li><p>基本流程<br>配置 cancelToken 对象<br>缓存用于取消请求的 cancel 函数<br>在后面特定时机调用 cancel 函数取消请求<br>在错误回调中判断如果 error 是 cancel, 做相应处理</p></li><li><p>实现功能<br>点击按钮, 取消某个正在请求中的请求</p></li><li><p>在请求一个接口前, 取消前面一个未完成的请求</p></li></ol><p>使用 canceltoken 取消请求<br>Axios 的 cancel token API 基于cancelable promises proposal<br>可以使用 CancelToken.source 工厂方法创建 cancel token，像这样：</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="container"&gt;    &lt;h2 class="page-header"&gt;axios取消请求&lt;/h2&gt;    &lt;button class="btn btn-primary"&gt; 发送请求 &lt;/button&gt;    &lt;button class="btn btn-warning" &gt; 取消请求 &lt;/button&gt;&lt;/div&gt;&lt;script&gt;    //获取按钮    const btns = document.querySelectorAll('button');    //2.声明全局变量    let cancel = null;    //发送请求    btns[0].onclick = function(){        // 防止用户疯狂点击按钮发送请求        //检测上一次的请求是否已经完成         if(cancel !== null){            //取消上一次的请求            cancel();        }        axios({            method: 'GET',            url: 'http://localhost:3000/posts',            //1. 添加配置对象的属性            cancelToken: new axios.CancelToken(function(c){                //3. 将 c 的值赋值给 cancel                cancel = c;            })        }).then(response =&gt; {            console.log(response);            //将 cancel 的值初始化            cancel = null;        })    }    //绑定第二个事件取消请求    btns[1].onclick = function(){        cancel();    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="axios源码文件结构说明"><a href="#axios源码文件结构说明" class="headerlink" title="axios源码文件结构说明"></a>axios源码文件结构说明</h2><p><img src="https://s1.ax1x.com/2022/04/18/Ldltuq.png"></p><pre class="line-numbers language-none"><code class="language-none">├──  /dist/       # 项目打包后的文件即最终输出的axios整体文件├── /lib/         # 项目源码目录│     ├── /adapters/    # 定义请求的适配器 xhr、http│     │     ├── http.js                 # 用来在node.js中向   远端服务发送HTTP请求的│     │     └── xhr.js                  # 实现 xhr 适配器(包装 xhr 对象)│     ├── /cancel/      # 定义取消功能│     ├── /core/        # 一些核心功能│     │     ├── Axios.js                # axios 的核心主类 构造函数│     │     ├── dispatchRequest.js      # 用来调用 http 请求适配器方法发送请求的函数│     │     ├── InterceptorManager.js   # 拦截器的管理器│     │     └── settle.js               # 根据 http 响应状态，改变 Promise 的状态│     ├── /helpers/     # 一些辅助方法│     ├── axios.js      # 对外暴露接口│     ├── defaults.js   # axios 的默认配置│     └── utils.js      # 公用工具├── package.json  # 项目信息├── index.d.ts    # 配置 TypeScript 的声明文件└── index.js      # 入口文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="axios的创建过程"><a href="#axios的创建过程" class="headerlink" title="axios的创建过程"></a>axios的创建过程</h2><h2 id="axios对象创建过程模拟实现"><a href="#axios对象创建过程模拟实现" class="headerlink" title="axios对象创建过程模拟实现"></a>axios对象创建过程模拟实现</h2><h2 id="axios发送请求过程详解"><a href="#axios发送请求过程详解" class="headerlink" title="axios发送请求过程详解"></a>axios发送请求过程详解</h2><h2 id="模拟实现axios发送请求"><a href="#模拟实现axios发送请求" class="headerlink" title="模拟实现axios发送请求"></a>模拟实现axios发送请求</h2><h2 id="axios拦截器工作原理"><a href="#axios拦截器工作原理" class="headerlink" title="axios拦截器工作原理"></a>axios拦截器工作原理</h2><h2 id="模拟实现axios拦截器功能"><a href="#模拟实现axios拦截器功能" class="headerlink" title="模拟实现axios拦截器功能"></a>模拟实现axios拦截器功能</h2><h2 id="axios-取消请求工作原理"><a href="#axios-取消请求工作原理" class="headerlink" title="axios 取消请求工作原理"></a>axios 取消请求工作原理</h2><h2 id="模拟实现axios取消请求功能"><a href="#模拟实现axios取消请求功能" class="headerlink" title="模拟实现axios取消请求功能"></a>模拟实现axios取消请求功能</h2><h2 id="axios源码分析总结"><a href="#axios源码分析总结" class="headerlink" title="axios源码分析总结"></a>axios源码分析总结</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前置条件&quot;&gt;&lt;a href=&quot;#前置条件&quot; class=&quot;headerlink&quot; title=&quot;前置条件&quot;&gt;&lt;/a&gt;前置条件&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;已经学习过ajax、Promise&lt;/strong&gt;&lt;br&gt;准备json-server包，快速搭建HTTP服</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Axios" scheme="https://wuzimo233.github.io/tags/Axios/"/>
    
  </entry>
  
  <entry>
    <title>Promise学习</title>
    <link href="https://wuzimo233.github.io/posts/3.html"/>
    <id>https://wuzimo233.github.io/posts/3.html</id>
    <published>2022-04-14T06:30:00.000Z</published>
    <updated>2022-04-18T13:59:32.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认识-Promise"><a href="#认识-Promise" class="headerlink" title="认识 Promise"></a>认识 Promise</h2><ul><li><h3 id="什么是-Promise"><a href="#什么是-Promise" class="headerlink" title="什么是 Promise"></a>什么是 Promise</h3></li></ul><ol><li>抽象表达:<blockquote><p>Promise 是一门新的技术(ES6 规范)<br>Promise 是 JS 中进行异步编程的新解决方案<br>备注：旧方案是单纯使用回调函数</p></blockquote></li><li>具体表达:<blockquote><p>语法上来说: Promise 是一个构造函数<br>从功能上来说: promise 对象用来封装一个异步操作并可以获取其成功/失败的结果值</p></blockquote></li></ol><h3 id="为什么要用-Promise"><a href="#为什么要用-Promise" class="headerlink" title="为什么要用 Promise"></a>为什么要用 Promise</h3><h4 id="指定回调函数的方式更加灵活"><a href="#指定回调函数的方式更加灵活" class="headerlink" title="指定回调函数的方式更加灵活"></a>指定回调函数的方式更加灵活</h4><ol><li>旧的: 必须在启动异步任务前指定</li><li>promise: 启动异步任务 =&gt; 返回 promie 对象 =&gt; 给 promise 对象绑定回调函<br>数(甚至可以在异步任务结束后指定/多个)</li></ol><h4 id="支持链式调用-可以解决回调地狱问题"><a href="#支持链式调用-可以解决回调地狱问题" class="headerlink" title="支持链式调用, 可以解决回调地狱问题"></a>支持链式调用, 可以解决回调地狱问题</h4><blockquote><ol><li>什么是回调地狱?<br> 回调函数嵌套调用, 外部回调函数异步执行的结果是嵌套的回调执行的条件<br> <img src="https://s1.ax1x.com/2022/04/14/LlRNPf.jpg" alt="回调地狱"></li><li>回调地狱的缺点?<br> 不便于阅读<br> 不便于异常处理</li><li>解决方案?<br> promise 链式调用</li><li>终极解决方案?<br> async/await</li></ol></blockquote><h3 id="如何使用-Promise"><a href="#如何使用-Promise" class="headerlink" title="如何使用 Promise"></a>如何使用 Promise</h3><h4 id="Promise-语法结构"><a href="#Promise-语法结构" class="headerlink" title="Promise 语法结构"></a>Promise 语法结构</h4><blockquote><p>语法结构： new Promise((resolve, reject) =&gt; { } 里面是一个函数类型的参数，参数里面的两个参数也是函数<br>在花括号{ }里边包含一个异步操作,如果成功则调用 resolve ，同时只要 resolve 调用就会将 promise 对象 p 的状态设置为『成功』，<br>如果失败则调用 reject，调完 reject 后会将 promise 对象 p 的状态设置为『失败』（即这两个可以修改 promise&gt;对象的状态）<br>接着 promise 对象通过调用 then()方法去指定成功和失败时的回调<br>如果成功就执行第一个回调函数，失败则执行第二个回调函数<br>Promise 除了可以封装异步操作之外，还能获取异步操作里成功和失败的结果值 即下方<strong>Promise 形式实现</strong>案例的 n 值<br>然后可以将 n 值传递给 resolve 和 reject 函数<br>最后下方的 then 方法里的两个回调都能拿到这个结果值作为参数使用</p></blockquote><h4 id="Promise-初体验"><a href="#Promise-初体验" class="headerlink" title="Promise 初体验"></a>Promise 初体验</h4><blockquote><p><strong>案例：需求——点击抽奖按钮两秒后，告诉用户是否中奖，中奖的概率是百分之 30。如果中奖在页面中弹框告知恭喜中奖，没有就弹出再接再厉。</strong></p></blockquote><p><code>一般方法实现</code></p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="container"&gt;    &lt;h2 class="page-header"&gt;Promise 初体验&lt;/h2&gt;    &lt;button class="btn btn-primary" id="btn"&gt;点击抽奖&lt;/button&gt;&lt;/div&gt;&lt;script&gt;    //生成随机数    function rand(m,n){        return Math.ceil(Math.random() * (n-m+1)) + m-1;    }    //获取元素对象    const btn = document.querySelector('#btn');    //绑定单击事件    btn.addEventListener('click', function(){        // 定时器       setTimeout(() =&gt; {           //获取从1 - 100的一个随机数           let n = rand(1, 100);           //判断           if(n &lt;= 30){               alert(n+'恭喜恭喜, 奖品为 10万 RMB 劳斯莱斯优惠券');           }else{               alert(n+'再接再厉');           }       }, 1000);    })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <code>Promise 形式实现 </code></p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="container"&gt;    &lt;h2 class="page-header"&gt;Promise 初体验&lt;/h2&gt;    &lt;button class="btn btn-primary" id="btn"&gt;点击抽奖&lt;/button&gt;&lt;/div&gt;&lt;script&gt;      //生成随机数    function rand(m,n){        return Math.ceil(Math.random() * (n-m+1)) + m-1;    }      //获取元素对象    const btn = document.querySelector('#btn');      //绑定单击事件    btn.addEventListener('click', function(){          // 使用 new Promise(接收一个函数参数) 创建实例          // resolve 解决  函数类型的数据 --成功时调用          // reject  拒绝  函数类型的数据 --失败时调用          const p = new Promise((resolve, reject) =&gt; {              // promise对象可以包裹一个异步操作（直接将上方定时器拿过来）              setTimeout(() =&gt; {                  //30%  1-100  1 2 30                  //获取从1 - 100的一个随机数                  let n = rand(1, 100);                  //判断                  if(n &lt;= 30){                      // Promise除了可以封装异步操作之外，还能获取异步操作里成功和失败的结果值 即这里的n值                      // 可以将n值传递给resolve 和 reject函数                      // 那么下方的then方法里的两个回调都能拿到这个结果值作为参数                      resolve(n); //  调完resolve后会将 promise 对象 p 的状态设置为『成功』                  }else{                      reject(n); // 调完reject后会将 promise 对象 p 的状态设置为『失败』                  }              }, 1000);          });          console.log(p);          //调用 then（里边有两个回调函数参数） 方法 --- 每个promise对象上都有then方法          // 第一个回调是对象状态为成功时的回调，第二个是对象状态失败时的回调函数          // value 值          // reason 理由          p.then((value) =&gt; {              alert('恭喜恭喜, 奖品为 10万 RMB 劳斯莱斯优惠券, 您的中奖数字为 ' + value);          }, (reason) =&gt; {              alert('再接再厉, 您的号码为 ' + reason);          });      })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实践练习-Promise-封装-AJAX"><a href="#实践练习-Promise-封装-AJAX" class="headerlink" title="实践练习 Promise 封装 AJAX"></a>实践练习 Promise 封装 AJAX</h4><pre class="line-numbers language-none"><code class="language-none">// 需求点击按钮发送ajax请求拿到段子接口的数据&lt;div class="container"&gt;    &lt;h2 class="page-header"&gt;Promise 封装 AJAX 操作&lt;/h2&gt;    &lt;button class="btn btn-primary" id="btn"&gt;点击发送 AJAX&lt;/button&gt;&lt;/div&gt;&lt;script&gt;    //接口地址 https://api.apiopen.top/getJoke    //获取元素对象    const btn = document.querySelector('#btn');    // 给按钮绑定点击事件    btn.addEventListener('click', function(){        //首先创建 Promise 对象  p        const p = new Promise((resolve, reject) =&gt; {            //1.创建对象            const xhr = new XMLHttpRequest();            //2. 初始化 get请求 给后边的接口发送            xhr.open('GET', 'https://api.apiopen.top/getJoke');            //3. 发送            xhr.send();            //4. 处理响应结果            xhr.onreadystatechange = function(){                if(xhr.readyState === 4){                    //判断响应状态码 2xx                       if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300){                        //控制台输出响应体                        resolve(xhr.response);                    }else{                        //控制台输出响应状态码                        reject(xhr.status);                    }                }            }        });        //调用then方法        p.then(value=&gt;{            console.log(value);        }, reason=&gt;{            console.warn(reason);        });    });&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Promise的状态-『PromiseState』-的改变"><a href="#Promise的状态-『PromiseState』-的改变" class="headerlink" title="Promise的状态 『PromiseState』 的改变"></a>Promise的状态 『PromiseState』 的改变</h4><p>状态是Promise实例对象当中的一个属性，属性叫做 promiseState 有三种状态</p><ol><li>pending 值未决定的、初始化的默认值</li><li>pending 变为 resolved / fullfilled 即成功</li><li>pending 变为 rejected 即失败<br>说明: pending变化只有这 2 种情况, 且一个 promise 对象只能改变一次<br>无论变为成功还是失败, 都会有一个结果数据<br>成功的结果数据一般称为 value, 失败的结果数据一般称为 reason</li></ol><h4 id="Promise对象-『PromiseResult』的值"><a href="#Promise对象-『PromiseResult』的值" class="headerlink" title="Promise对象 『PromiseResult』的值"></a>Promise对象 『PromiseResult』的值</h4><p>保存着异步任务『成功/失败』的结果<br>以下函数能够修改这个属性的值：</p><ul><li>resolve</li><li>reject </li></ul><h4 id="Promise的基本流程"><a href="#Promise的基本流程" class="headerlink" title="Promise的基本流程"></a>Promise的基本流程</h4><p><img src="https://s1.ax1x.com/2022/04/16/LJc5NR.png" alt="LJcang.md.png"></p><p>首先通过new Promise 创造一个对象，在Promise内部封装异步操作。如果异步操作成功则调用resolve函数，resolve函数调用后会把Promise对象状态改为成功，成功在调用then方法时将调用的是第一个回调函数参数，返回一个新的promise对象<br>如果在Promise内部封装的异步操作失败，则调用reject 函数，reject函数调用后会把Promise对象状态改为失败，失败之后调用的是then方法中的第二个回调函数参数，并且返回一个新的Promise对象</p><h3 id="Promise的Api"><a href="#Promise的Api" class="headerlink" title="Promise的Api"></a>Promise的Api</h3><h4 id="执行器函数"><a href="#执行器函数" class="headerlink" title="执行器函数"></a><strong>执行器函数</strong></h4><p><strong>Promise 构造函数: Promise (excutor) {}</strong><br>//new实例化对象需要接收一个参数，参数是一个函数类型的参数（<strong>也称之为执行器函数</strong>），而且函数当中有两个形参也是函数类型参数resolve、reject，这俩函数是内部定义的，异步任务成功就会调用resolve函数，失败就会调用reject函数。<br>(1) executtor 函数: 执行器 (resolve, reject) =&gt; {}<br>(2) resolve 函数: 内部定义成功时我们调用的函数 value =&gt; {}<br>(3) reject 函数: 内部定义失败时我们调用的函数 reason =&gt; {}<br>说明: 执行器函数 executor 会在 Promise 内部立即同步调用,异步操作在执行器中执行</p><pre class="line-numbers language-none"><code class="language-none">let p = new Promise((resolv, reject) =&gt;     // resolve('ok');    console.log(111);})console.log(222);//结果控制台先打印111 ，后打印222。表明 p对象内部的代码是同步调用的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Promise-then方法"><a href="#Promise-then方法" class="headerlink" title="Promise.then方法"></a><strong>Promise.then方法</strong></h4><p><strong>Promise.prototype.then 方法: (onResolved, onRejected) =&gt; {}</strong><br>// 说明: then方法是用于指定回调的，传递两个参数，第一个参数是传递成功时的回调，第二个参数是传递失败时的回调。返回一个新的 promise 对象<br>(1) onResolved 函数: 成功的回调函数 (value) =&gt; {}<br>(2) onRejected 函数: 失败的回调函数 (reason) =&gt; {}</p><h4 id="Promise-catch方法"><a href="#Promise-catch方法" class="headerlink" title="Promise.catch方法"></a><strong>Promise.catch方法</strong></h4><p><strong>Promise.prototype.catch 方法: (onRejected) =&gt; {}</strong><br>// 说明: catch() 方法是 then()的语法糖, 相当于: then(undefined, onRejected)<strong>，即只能指定失败的回调。</strong></p><ol><li>onRejected 函数: 失败的回调函数 (reason) =&gt; {<pre class="line-numbers language-none"><code class="language-none">let p = new Promise((resolv, reject) =&gt;     // 修改Promise对象的状态    reject('error 失败了');})//  执行catch方法p.catch(reason =&gt; {    console.log(reason);})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Promise-resolve方法"><a href="#Promise-resolve方法" class="headerlink" title="Promise.resolve方法"></a><strong>Promise.resolve方法</strong></h4></li></ol><p><strong>Promise.resolve 方法: (value) =&gt; {}</strong><br>// 说明：它<strong>属于Promise函数对象</strong>，不是实例对象。接收一个参数，返回一个成功或失败的对象<br>// 作用：就是<strong>快速得到一个Promise对象</strong>，还能封装一个值，将这个值转化为Promise对象</p><ol><li>value: 成功的数据或 promise 对象</li></ol><pre class="line-numbers language-none"><code class="language-none">//如果传入的参数为 非Promise类型的对象, 则返回的结果为成功promise对象//如果传入的参数为 Promise 对象, 则参数的结果决定了 resolve 的结果let zimo = Promise.resolve("I Love You");console.log(zimo); // Promise&nbsp;{&lt;fulfilled&gt;: 'I Love You'let p1 = Promise.resolve(new Promise((resolve, reject) =&gt; {    resolve('OK');    // reject('Error');}));p1.then((value) =&gt; {    console.log(value); //ok},(reason)=&gt;{    console.log(reason);})console.log(p1);  // Promise&nbsp;{&lt;fulfilled&gt;: 'OK'}let p2 = Promise.resolve(p1);console.log(p2);  // Promise&nbsp;{&lt;fulfilled&gt;: 'OK'}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Promise-reject方法"><a href="#Promise-reject方法" class="headerlink" title="Promise.reject方法"></a><strong>Promise.reject方法</strong></h4><p><strong>Promise.reject 方法: (reason) =&gt; {}</strong><br>说明: <strong>快速返回一个失败的 promise 对象</strong><br>即便传入成功的Promise对象结果也是失败</p><ol><li>reason: 失败的原因<pre class="line-numbers language-none"><code class="language-none">let p1 = Promise.reject(520);p1.catch((reason) =&gt;{    console.log(reason);  // Promise&nbsp;{&lt;rejected&gt;: 520}})console.log(p1);          // 520let p2 = Promise.reject('iloveyou');let p3 = Promise.reject(new Promise((resolve, reject) =&gt; {    resolve('OK');}));console.log(p2);        // Promise&nbsp;{&lt;rejected&gt;: 'iloveyou'}console.log(p3);        //Promise&nbsp;{&lt;rejected&gt;: Promise}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="Promise-all-方法"><a href="#Promise-all-方法" class="headerlink" title="Promise.all 方法"></a>Promise.all 方法</h4><p><strong>Promise.all 方法: (promises) =&gt; {}</strong></p><ol><li>promises: 包含 n 个 promise 的数组<br>说明: <strong>接收一个参数，参数一般是Promise组成的数组</strong>，返回一个新的 promise, 只有所有的 promise 都成功才成功, 只要有一个失败了就直接失败。<pre class="line-numbers language-none"><code class="language-none">let p1 = new Promise((resolve, reject) =&gt; {    resolve('OK');})// let p2 = Promise.resolve('Success');let p2 = Promise.reject('Error');let p3 = Promise.resolve('Oh Yeah');const result = Promise.all([p1, p2, p3]);console.log(result); //[PromiseState]]: "rejected"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="Promise-race-方法"><a href="#Promise-race-方法" class="headerlink" title="Promise.race 方法"></a>Promise.race 方法</h4><p><strong>Promise.race 方法: (promises) =&gt; {}</strong></p><ol><li>promises: 包含 n 个 promise 的数组<br>说明: <strong>接收一个参数，参数一般是Promise组成的数组</strong>，返回一个新的 promise, 第一个改变状态的 promise对象就是最终的结果状态。<pre class="line-numbers language-none"><code class="language-none">let p1 = new Promise((resolve, reject) =&gt; {        setTimeout(() =&gt; {            resolve('OK');        }, 1000);    })let p3 = Promise.resolve('Oh Yeah');let p2 = Promise.resolve('Success');//调用const result = Promise.race([p1, p3, p2]); console.log(result);  // [[PromiseState]]: "fulfilled"  // [[PromiseResult]]: "Oh Yeah"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="Promise的几个关键问题"><a href="#Promise的几个关键问题" class="headerlink" title="Promise的几个关键问题"></a>Promise的几个关键问题</h2><h3 id="如何改变-promise-的状态"><a href="#如何改变-promise-的状态" class="headerlink" title="如何改变 promise 的状态?"></a>如何改变 promise 的状态?</h3><ol><li><strong>第一种方式 调用 resolve 函数</strong>: 如果当前Promise对象是 pending状态就会变为fulfilled(resolve)</li><li><strong>第二种方式 调用 reject 函数</strong>: 如果当前Promise对象是 pending状态就会变为 rejected</li><li><strong>第三种方式 抛出异常</strong>: 如果当前是 pending 就会变为 rejected<pre class="line-numbers language-none"><code class="language-none">let p = new Promise((resolve, reject) =&gt; { //初始化状态是pending    //第一种方式  调用 resolve 函数    // resolve('ok'); // pending   =&gt; fulfilled (resolved)    //第二种方式  调用 reject 函数    // reject("error");// pending  =&gt;  rejected     //3. 抛出错误    throw '出问题了'; //pending  =&gt;  rejected });console.log(p);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="一个-promise-指定多个成功-失败回调函数-都会调用吗"><a href="#一个-promise-指定多个成功-失败回调函数-都会调用吗" class="headerlink" title="一个 promise 指定多个成功/失败回调函数, 都会调用吗?"></a>一个 promise 指定多个成功/失败回调函数, 都会调用吗?</h3><p>简单说问题是：用then方法为一个Promise对象去指定多个回调，这些回调是否都会执行？<br><strong>答案：当 promise 改变为对应状态时都会调用</strong></p><pre class="line-numbers language-none"><code class="language-none">let p = new Promise((resolve, reject) =&gt; {    resolve('OK');});///指定回调 - 1p.then(value =&gt; {    console.log(value);});//指定回调 - 2p.then(value =&gt; {    alert(value);}); <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="改变-promise-状态和指定回调函数谁先谁后"><a href="#改变-promise-状态和指定回调函数谁先谁后" class="headerlink" title="改变 promise 状态和指定回调函数谁先谁后?"></a>改变 promise 状态和指定回调函数谁先谁后?</h3><p>答案： 都有可能 <strong>正常情况下是先指定回调再改变状态, 但也可以先改状态再指定回调</strong><br><strong>当这个执行器函数是异步任务时候时then方法先执行，但then方法需要在Promise对象改变状态后才执行</strong></p><pre class="line-numbers language-none"><code class="language-none">let p = new Promise((resolve, reject) =&gt; {    setTimeout(() =&gt; {        resolve('OK');    }, 1000); //当这个执行器函数是异步任务时候时then方法先执行，但then方法需要在Promi对象改变状态后才执行});p.then(value =&gt; {    console.log(value);},reason=&gt;{    })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>如何先改状态再指定回调?<br>① 在执行器中直接调用 resolve()/reject()<br>② 延迟更长时间才调用 then()</li><li>什么时候才能得到数据?<br>① 如果先指定的回调, 那当状态发生改变时, 回调函数就会调用, 得到数据<br>② 如果先改变的状态, 那当指定回调时, 回调函数就会调用, 得到数据</li></ol><h3 id="promise-then-返回的新-promise-的结果状态由什么决定"><a href="#promise-then-返回的新-promise-的结果状态由什么决定" class="headerlink" title="promise.then()返回的新 promise 的结果状态由什么决定?"></a>promise.then()返回的新 promise 的结果状态由什么决定?</h3><p>(1) 简单表达: 由 then()指定的回调函数执行的结果决定<br>(2) 详细表达:<br>① 如果抛出异常, 新 promise 变为 rejected, reason 为抛出的异常<br>② 如果返回的是非 promise 的任意值, 新 promise 变为 resolved, value 为返回的值<br>③ 如果返回的是另一个新 promise, 此 promise 的结果就会成为新 promise 的结果</p><h3 id="promise-如何串连多个操作任务"><a href="#promise-如何串连多个操作任务" class="headerlink" title="promise 如何串连多个操作任务?"></a>promise 如何串连多个操作任务?</h3><p>(1) promise 的 then()返回一个新的 promise, 即可以在后边接着调用then()方法，可以看成 then()方法的链式调用<br>(2) 通过 then 的链式调用串连多个同步/异步任务</p><pre class="line-numbers language-none"><code class="language-none">let p = new Promise((resolve, reject) =&gt; {    setTimeout(() =&gt; {        resolve('OK');    }, 1000); //异步任务});p.then(value =&gt; {                  return new Promise((resolve, reject) =&gt; {        resolve("success");    });}).then(value =&gt; {            //这里的Promise状态由他指定的回调函数的返回值绝定，此处回调函数没写返回值即为Undefined 所以这里的then方法返回结果就是一个成功的Promise且成功的结果就是回调函数返回的结果Undefined，因为成功了所以后边的then方法也会执行第一个回调函数，并且输出前边成功的结果所以依然是Undefined    console.log(value);       // success}).then(value =&gt; {          console.log(value);       //undefined})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="promise-异常传透"><a href="#promise-异常传透" class="headerlink" title="promise 异常传透?"></a>promise 异常传透?</h3><p>(1) 当使用 promise 的 then 链式调用时, 可以在最后指定失败的回调,<br>(2) 前面任何操作出了异常, 都会传到最后失败的回调中处理<br>例如：下方启动了一个Promise，后续用then方法又进行了几个其他的任务，这时候只需要在最后的位置去指定失败的回调就可以。</p><pre class="line-numbers language-none"><code class="language-none">let p = new Promise((resolve, reject) =&gt; {    setTimeout(() =&gt; {        resolve('OK');        // reject('Err');    }, 1000);});p.then(value =&gt; {    // console.log(111);    throw '失败啦!';}).then(value =&gt; {    console.log(222);}).then(value =&gt; {    console.log(333);}).catch(reason =&gt; {    console.warn(reason); //失败啦!});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中断-promise-链"><a href="#中断-promise-链" class="headerlink" title="中断 promise 链?"></a>中断 promise 链?</h3><p>(1) 当使用 promise 的 then 链式调用时, 在中间中断, 不再调用后面的回调函数<br>(2) 办法: 在回调函数中返回一个 pendding 状态的 promise 对象</p><pre class="line-numbers language-none"><code class="language-none">let p = new Promise((resolve, reject) =&gt; {    setTimeout(() =&gt; {        resolve('OK');    }, 1000);});p.then(value =&gt; {    console.log(111);           // 111    //有且只有一个方式 返回一个pending状态的Promise对象    return new Promise(() =&gt; {});  //下方的then方法因为没有发现前边的Promise对象状态发生改变所以就不执行了}).then(value =&gt; {    console.log(222);}).then(value =&gt; {    console.log(333);}).catch(reason =&gt; {    console.warn(reason);});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="自定义（手写）Promise-后续学习"><a href="#自定义（手写）Promise-后续学习" class="headerlink" title="自定义（手写）Promise(后续学习)"></a>自定义（手写）Promise(后续学习)</h2><h3 id="定义整体结构"><a href="#定义整体结构" class="headerlink" title="定义整体结构"></a>定义整体结构</h3><h3 id="Promise-构造函数的实现"><a href="#Promise-构造函数的实现" class="headerlink" title="Promise 构造函数的实现"></a>Promise 构造函数的实现</h3><h3 id="promise-then-catch-的实现"><a href="#promise-then-catch-的实现" class="headerlink" title="promise.then()/catch()的实现"></a>promise.then()/catch()的实现</h3><h3 id="Promise-resolve-reject-的实现"><a href="#Promise-resolve-reject-的实现" class="headerlink" title="Promise.resolve()/reject()的实现"></a>Promise.resolve()/reject()的实现</h3><h3 id="Promise-all-race-的实现"><a href="#Promise-all-race-的实现" class="headerlink" title="Promise.all/race()的实现"></a>Promise.all/race()的实现</h3><h3 id="Promise-resolveDelay-rejectDelay-的实现"><a href="#Promise-resolveDelay-rejectDelay-的实现" class="headerlink" title="Promise.resolveDelay()/rejectDelay()的实现"></a>Promise.resolveDelay()/rejectDelay()的实现</h3><h3 id="ES5-function-完整版本"><a href="#ES5-function-完整版本" class="headerlink" title="ES5 function 完整版本"></a>ES5 function 完整版本</h3><h3 id="ES6-class-完整版本"><a href="#ES6-class-完整版本" class="headerlink" title="ES6 class 完整版本"></a>ES6 class 完整版本</h3><hr><h2 id="async-与-await"><a href="#async-与-await" class="headerlink" title="async 与 await"></a>async 与 await</h2><h3 id="async-函数"><a href="#async-函数" class="headerlink" title="async 函数"></a>async 函数</h3><ol><li>函数的返回结果为 promise 对象</li><li>promise 对象的结果由 async 函数执行的返回值决定<pre class="line-numbers language-none"><code class="language-none">//和then方法返回规则一摸一样async function main(){    //1. 如果返回值是一个非Promise类型的数据    // return 521;    //2. 如果返回的是一个Promise对象    // return new Promise((resolve, reject) =&gt; {    //     // resolve('OK');    //     reject('Error');    // });    //3. 抛出异常    throw "Oh NO"; //[PromiseState]]: "rejected" [PromiseResult]]: "Oh NO"}let result = main();console.log(result);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="await-表达式"><a href="#await-表达式" class="headerlink" title="await 表达式"></a>await 表达式</h3><ol><li>await 右侧的表达式一般为 promise 对象, 但也可以是其它的值</li><li>如果表达式是 promise 对象, await 返回的是 promise 成功的值</li><li>如果表达式是其它值, 直接将此值作为 await 的返回值</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>await 必须写在 async 函数中, 但 async 函数中可以没有 await</li><li>如果 await 的 promise 失败了, 就会抛出异常, 需要通过 try…catch 捕获处理</li></ol><pre class="line-numbers language-none"><code class="language-none">async function lala(){    let p = new Promise((resolve, reject) =&gt; {        // resolve('OK');        reject('Error');    })    //1. 右侧为promise的情况 await 返回的是 promise 成功的值即 'ok'    // let res = await p;    // console.log(res);        //ok    //2. 右侧为其他类型的数据    //let res2 = await 20;    //console.log(res2);        //20    //3. 如果promise是失败的状态    try{        let res3 = await p;     }catch(e){        console.log(e);          //抛出一个错误 使用try...catch    }}lala()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="async与await结合"><a href="#async与await结合" class="headerlink" title="async与await结合"></a>async与await结合</h3><pre class="line-numbers language-none"><code class="language-none">/** * 读取同级目录resource文件夹下 有1.html  2.html 3.html 的文件内容 想去读取到 */const fs = require('fs');const util = require('util');// util里有个方法可以将api转换成一个Promise形态的函数const mineReadFile = util.promisify(fs.readFile);//回调函数的方式// fs.readFile('./resource/1.html', (err, data1) =&gt; {//     if(err) throw err;//     fs.readFile('./resource/2.html', (err, data2) =&gt; {//         if(err) throw err;//         fs.readFile('./resource/3.html', (err, data3) =&gt; {//             if(err) throw err;//             console.log(data1 + data2 + data3); //读取到文件信息//         });//     });// });//async 与 await方式 就用不到回调函数// 1.首先写一个async函数async function main(){    try{        //2.读取第一个文件的内容        let data1 = await mineReadFile('./resource/1x.html');        let data2 = await mineReadFile('./resource/2.html');        let data3 = await mineReadFile('./resource/3.html');        console.log(data1 + data2 + data3);    }catch(e){        // console.log(e);   // Error: ENOENT: no such file or directory......        console.log(e.code); // ENOENT    }}main();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="async与await结合发送AJAX"><a href="#async与await结合发送AJAX" class="headerlink" title="async与await结合发送AJAX"></a>async与await结合发送AJAX</h3><pre class="line-numbers language-none"><code class="language-none">&lt;button id="btn"&gt;点击获取段子&lt;/button&gt;&lt;script&gt;    //一般使用axios封装好的    function sendAJAX(url){        return new Promise((resolve, reject) =&gt; {            const xhr = new XMLHttpRequest();            xhr.responseType = 'json';            xhr.open("GET", url);            xhr.send();            //处理结果            xhr.onreadystatechange = function(){                if(xhr.readyState === 4){                    //判断成功                    if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300){                        //成功的结果                        resolve(xhr.response);                    }else{                        reject(xhr.status);                    }                }            }        });    }    //段子接口地址 https://api.apiopen.top/getJoke    let btn = document.querySelector('#btn');    btn.addEventListener('click',async function(){        //获取段子信息          let duanzi = await sendAJAX('https://api.apiopen.top/getJoke'); //发送ajax请求的函数返回的结果是一个Promise对象        console.log(duanzi);    });&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;认识-Promise&quot;&gt;&lt;a href=&quot;#认识-Promise&quot; class=&quot;headerlink&quot; title=&quot;认识 Promise&quot;&gt;&lt;/a&gt;认识 Promise&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;什么是-Promise&quot;&gt;&lt;a href=&quot;#什</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Promise" scheme="https://wuzimo233.github.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>Ajax学习</title>
    <link href="https://wuzimo233.github.io/posts/2.html"/>
    <id>https://wuzimo233.github.io/posts/2.html</id>
    <published>2022-04-14T02:22:11.000Z</published>
    <updated>2022-04-15T17:25:48.460Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认识-Ajax"><a href="#认识-Ajax" class="headerlink" title="认识 Ajax"></a>认识 Ajax</h2><h3 id="什么是-Ajax"><a href="#什么是-Ajax" class="headerlink" title="什么是 Ajax"></a>什么是 Ajax</h3><blockquote><p>Ajax 是一种异步请求数据的 web 开发技术，对于改善用户的体验和页面性能很有帮助。<br>刚好回顾下什么是异步同步，大部分的请求是同步的，就是说我必须等待后台请求给我返回结果了才能往下操作。通俗讲的话，我要去烧水、水热了后去洗碗、扫地。同步来做的话就是依次等待水烧热后我再去洗碗，洗了碗后我再去扫地。异步做的话我把水壶接通电源（发送请求）、接着水壶它烧它的，我去扫地了，可能扫完地后水热了，再用水壶的水来洗碗。<br>还可以说我今天一天没有逛朋友圈，晚上终于有空翻朋友圈，好不容易翻到了上午的朋友圈，突然觉得某个动态有意思我想评论一下或者点赞，如果页面上有刷新，那我点赞后直接就刷新了朋友圈，我又得从新翻很久才能回到刚才的动态页面。如果是不会刷新，即点赞后马上就显示了点赞记录。这就是无刷新技术通过Dom操作来实现的效果。所以Ajax通常会结合Dom一起操作。<br>简单地说，在不需要重新刷新整个页面的情况下，Ajax 通过异步请求加载后台数据，能在网页的局部更新数据。<br>常见运用场景有表单验证是否登入成功、百度搜索下拉框提示和快递单号查询等等。<br><strong>Ajax 的目的是提高用户体验，较少网络数据的传输量。</strong>同时，由于 AJAX 请求获取的是数据而不是 HTML 文档，因此它也节省了网络带宽，让互联网用户的网络冲浪体验变得更加顺畅。<br><strong>AJAX=Asynchronous JavaScript and XML(异步的 JavaScript 和 XML)</strong><br>Ajax 不是一门编程语言，而是一种用于创建更好更快以及交互性更强的 Web 应用程序的技术</p></blockquote><ul><li>传统的网页(即不用 ajax 技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。</li><li>使用 ajax 技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</li><li>使用 Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的 Web 用户界面。</li><li>增加 B/S 体验性 （B/S 未来的主流，持续增长）</li></ul><hr><h3 id="Ajax-原理是什么"><a href="#Ajax-原理是什么" class="headerlink" title="Ajax 原理是什么"></a>Ajax 原理是什么</h3><p>在解释 Ajax 原理之前，我们不妨先举个 “领导想找小李汇报一下工作” 例子，领导想找小李问点事，就委托秘书去叫小李，自己就接着做其他事情，直到秘书告诉他小李已经到了，最后小李跟领导汇报工作。<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/18/167bd019240a457b~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp" alt="图源网络侵删"></p><p>Ajax 请求数据流程与“领导想找小李汇报一下工作”类似。其中最核心的依赖是浏览器提供的 XMLHttpRequest 对象，它扮演的角色相当于秘书，使得浏览器可以发出 HTTP 请求与接收 HTTP 响应。浏览器接着做其他事情，等收到 XHR 返回来的数据再渲染页面。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/18/167bd023855c0bf7~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp" alt="图源网络侵删"></p><p><strong>理解了 Ajax 的工作原理后，接下来我们探讨下如何使用 Ajax</strong></p><hr><h3 id="利用-AJAX-可以做："><a href="#利用-AJAX-可以做：" class="headerlink" title="利用 AJAX 可以做："></a>利用 AJAX 可以做：</h3><p>注册时，输入用户名自动检测用户已经存在<br>登陆时，提示用户密码错误<br>删除数据时，将行 ID 发送到后台，后台在数据库中删除，数据库删除成功后，在页面 DOM 中将数据行也删除<br>我们可以使用前端的一个标签来伪造一个 ajax 的样子。iframe 标签</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- iframe 元素会创建包含另外一个文档的内联框架（即行内框架） --&gt;    &lt;div&gt;        &lt;p&gt;请输入要加载的地址：&lt;span id="currentTime"&gt;&lt;/span&gt;&lt;/p&gt;        &lt;p&gt;            &lt;input id="url" type="text" value="https://www.baidu.com/" /&gt;            &lt;input type="button" value="提交" onclick="LoadPage()"&gt;        &lt;/p&gt;    &lt;/div&gt;    &lt;div&gt;        &lt;h3&gt;加载页面位置：&lt;/h3&gt;        &lt;iframe id="iframePosition" style="width: 100%;height: 500px;"&gt;&lt;/iframe&gt;    &lt;/div&gt;    &lt;script type="text/javascript"&gt;        window.onload = function () {            var myDate = new Date(); //获取当前时间 并传递给p标签里的span            document.getElementById('currentTime').innerText = myDate.getTime();        };        function LoadPage() {            var targetUrl = document.getElementById('url').value; //获取input框的网址            console.log(targetUrl);            document.getElementById("iframePosition").src = targetUrl; //把网址传给内联标签iframe标签的src属性        }    &lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这里简单的制造了一个在当前页面打开其他页面不刷新整体页面的场景，ajax 可以实现更多更高级的类似功能</strong></p><hr><h2 id="Ajax-的使用"><a href="#Ajax-的使用" class="headerlink" title="Ajax 的使用"></a>Ajax 的使用</h2><h3 id="原生Ajax-的使用"><a href="#原生Ajax-的使用" class="headerlink" title="原生Ajax 的使用"></a>原生Ajax 的使用</h3><p><strong>1.创建 Ajax 核心对象 XMLHttpRequest(记得考虑兼容性)</strong></p><pre class="line-numbers language-none"><code class="language-none">var xhr=null;if (window.XMLHttpRequest) {    // 兼容 IE7+, Firefox, Chrome, Opera, Safari    xhr=new XMLHttpRequest();} else {  // 兼容 IE6, IE5  xhr=new ActiveXObject("Microsoft.XMLHTTP");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.向服务器发送请求</strong></p><pre class="line-numbers language-none"><code class="language-none">xhr.open(method,url,async);  send(string);//post请求时才使用字符串参数，否则不用带参数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>。。。太麻烦了 后期再学原生吧</p><h3 id="jQuery-ajax-的使用"><a href="#jQuery-ajax-的使用" class="headerlink" title="jQuery.ajax 的使用"></a>jQuery.ajax 的使用</h3><p><strong>浏览器中提供的 XMLHttpRequest 用法比较复杂，所以 jQuery 对 XMLHttpRequest 进行了封装，提供了一系列 Ajax 相关的函数，极大地降低了 Ajax 的使用难度。</strong><br><strong>jQuery Ajax 本质就是 XMLHttpRequest，对他进行了封装，方便调用！</strong><br>纯 JS 原生实现 Ajax 暂时不去了解了，直接使用 jquery 提供的，方便学习和使用，避免重复造轮子，有空再去了解下 JS 原生 的XMLHttpRequest把···<br>Ajax 的核心是<strong>XMLHttpRequest</strong>对象(XHR)。XHR 为向服务器发送请求和解析服务器响应提供了接口，<strong>能够以异步方式从服务器获取新数据。</strong></p><p>使用 jQuery 需要先从官网下载jQuery.js并导入到文件<br>就可以使用$符号，它是jquery中代表jquery对象的引用,“jQuery”是核心对象。通过该对象可以获取jQuery对象，调用jQuery提供的方法等。$ &lt;==&gt; jQuery</p><p><strong>通过 jQuery AJAX 方法，能够从远程服务器上请求文本、HTML、XML 或 JSON – 同时能够把这些外部数据直接载入网页的被选元素中。</strong></p><blockquote><p>jQuery 中发起 Ajax 请求最常用的三个方法如下：<br>$.get()<br>$.post()<br>$.ajax()</p></blockquote><h4 id="get-函数的语法"><a href="#get-函数的语法" class="headerlink" title="$.get()函数的语法"></a>$.get()函数的语法</h4><ul><li><p>jQuery 中 $.get() 函数的功能单一，专门用来发起 get 请求</p></li><li><p><strong>将服务器上的资源请求到客户端来进行使用。</strong></p><pre class="line-numbers language-none"><code class="language-none">$.get(url, [data], [callback])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="center">参数名</th><th align="center">参数类型</th><th align="center">是否必选</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">url</td><td align="center">string</td><td align="center">是</td><td align="center">要请求的资源地址</td></tr><tr><td align="center">data</td><td align="center">object</td><td align="center">否</td><td align="center">请求资源期间要携带的参数</td></tr><tr><td align="center">callback</td><td align="center">function</td><td align="center">否</td><td align="center">请求成功时的回调函数</td></tr></tbody></table></li><li><p>$.get()发起不带参数的请求<br>使用 $.get() 函数发起不带参数的请求时，直接提供请求的 URL 地址和请求成功之后的回调函数即可，示例代码如下：</p><pre class="line-numbers language-none"><code class="language-none">$.get('http://www.liulongbin.top:3006/api/getbooks', function(res) {    console.log(res) // 这里的 res 是服务器返回的数据})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>$.get()发起带参数的请求<br>使用 $.get() 函数发起带参数的请求时，示例代码如下：</p><pre class="line-numbers language-none"><code class="language-none">$.get('http://www.liulongbin.top:3006/api/getbooks', { id: 1 }, function(res) {    console.log(res)})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="post-函数的语法"><a href="#post-函数的语法" class="headerlink" title="$.post()函数的语法"></a>$.post()函数的语法</h4><ul><li>jQuery 中 $.post() 函数的功能单一，专门用来发起 post 请求，从而<strong>向服务器提交数据。</strong></li></ul><p>$.post() 函数的语法如下：</p><pre class="line-numbers language-none"><code class="language-none">$.post(url, [data], [callback])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="center">参数名</th><th align="center">参数类型</th><th align="center">是否必选</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">url</td><td align="center">string</td><td align="center">是</td><td align="center">提交数据的地址</td></tr><tr><td align="center">data</td><td align="center">object</td><td align="center">否</td><td align="center">要提交的数据</td></tr><tr><td align="center">callback</td><td align="center">function</td><td align="center">否</td><td align="center">数据提交成功时的回调函数</td></tr></tbody></table><p>使用 $post() 向服务器提交数据的示例代码如下：</p><pre class="line-numbers language-none"><code class="language-none">$.post(   'http://www.liulongbin.top:3006/api/addbook', // 请求的URL地址   { bookname: '水浒传', author: '施耐庵', publisher: '上海图书出版社' }, // 提交的数据   function(res) { // 回调函数      console.log(res)   })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ajax-函数的语法"><a href="#ajax-函数的语法" class="headerlink" title="$.ajax()函数的语法"></a><strong>$.ajax()函数的语法</strong></h4><ul><li>相比于$.get()和$.post() 函数，jQuery 中提供的 $.ajax() 函数，是一个功能比较综合的函数</li><li>它允许我们对 Ajax 请求进行更详细的配置</li></ul><p>$.ajax() 函数的基本语法如下：</p><pre class="line-numbers language-none"><code class="language-none">$.ajax({   type: '', // 请求的方式，例如 GET 或 POST   url: '',  // 请求的 URL 地址   data: { },// 这次请求要携带的数据   success: function(res) { } // 请求成功之后的回调函数})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用$.ajax()发起GET请求</strong><br>使用 $.ajax() 发起 GET 请求时，只需要将 type 属性的值设置为 ‘GET’ 即可：</p><pre class="line-numbers language-none"><code class="language-none">$.ajax({   type: 'GET', // 请求的方式   url: 'http://www.liulongbin.top:3006/api/getbooks',  // 请求的 URL 地址   data: { id: 1 },// 这次请求要携带的数据   success: function(res) { // 请求成功之后的回调函数       console.log(res)   }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用$.ajax()发起POST请求</strong><br>使用 $.ajax() 发起 POST 请求时，只需要将 type 属性的值设置为 ‘POST’ 即可：</p><pre class="line-numbers language-none"><code class="language-none">$.ajax({   type: 'POST', // 请求的方式   url: 'http://www.liulongbin.top:3006/api/addbook',  // 请求的 URL 地址   data: { // 要提交给服务器的数据      bookname:&nbsp;'水浒传',      author:&nbsp;'施耐庵',      publisher:&nbsp;'上海图书出版社'    },   success: function(res) { // 请求成功之后的回调函数       console.log(res)   }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>jQuery.ajax(…)<br>       部分参数：<br>              url：请求地址（待载入页面的URL地址）<br>             data：要发送的数据（待发送给后台的值key/value参数）<br>          success：载入成功之后执行的回调函数(全局)<br>             type：请求方式，GET、POST（1.9.0之后用method）<br>          // 下边的了解下不常用<br>          headers：请求头<br>      contentType：即将发送信息至服务器的内容编码类型(默认: “application/x-www-form-urlencoded; charset=UTF-8”)<br>            async：是否异步<br>          timeout：设置请求超时时间（毫秒）<br>       beforeSend：发送请求前执行的函数(全局)<br>         complete：完成之后执行的回调函数(全局)<br>            error：失败之后执行的回调函数(全局)<br>          accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型<br>         dataType：将服务器端返回的数据转换成指定类型<br>            “xml”: 将服务器端返回的内容转换成xml格式<br>           “text”: 将服务器端返回的内容转换成普通文本格式<br>           “html”: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。<br>         “script”: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式<br>           “json”: 将服务器端返回的内容转换成相应的JavaScript对象<br>          “jsonp”: JSONP 格式使用 JSONP 形式调用函数时，如 “myurl?callback=?” jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</p></blockquote><hr><h2 id="接口相关知识"><a href="#接口相关知识" class="headerlink" title="接口相关知识"></a>接口相关知识</h2><ul><li><h3 id="接口的概念"><a href="#接口的概念" class="headerlink" title="接口的概念"></a>接口的概念</h3><blockquote><ul><li>使用 Ajax 请求数据时，被请求的 URL 地址，就叫做数据接口（简称接口）。同时，每个接口必须有请求方式。<br>例如：<br><a href="http://www.liulongbin.top:3006/api/getbooks">www.liulongbin.top:3006/api/getbooks</a> 获取图书列表的接口(GET请求)<br><a href="http://www.liulongbin.top:3006/api/addbook">www.liulongbin.top:3006/api/addbook</a> 添加图书的接口（POST请求）</li></ul></blockquote></li><li><h3 id="分析接口的请求过程"><a href="#分析接口的请求过程" class="headerlink" title="分析接口的请求过程"></a>分析接口的请求过程</h3></li></ul><p>通过GET方式请求接口的过程<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b198025f2e648b4b58d2df1d8673536~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="图源网络侵删"></p><p>通过POST方式请求接口的过程<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/20019a7779564e18a12c0c66668f9422~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="图源网络侵删"></p><h2 id="Ajax的优缺点"><a href="#Ajax的优缺点" class="headerlink" title="Ajax的优缺点"></a>Ajax的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>1.无刷新更新数据。<br>AJAX最大优点就是能在不刷新整个页面的前提下与服务器通信维护数据。这使得Web应用程序更为迅捷地响应用户交互，并避免了在网络上发送那些没有改变的信息，减少用户等待时间，带来非常好的用户体验。<br>2.异步与服务器通信。<br>AJAX使用异步方式与服务器通信，不需要打断用户的操作，具有更加迅速的响应能力。优化了Browser和Server之间的沟通，减少不必要的数据传输、时间及降低网络上数据流量。<br>3.前端和后端负载平衡。<br>AJAX可以把以前一些服务器负担的工作转嫁到客户端，利用客户端闲置的能力来处理，减轻服务器和带宽的负担，节约空间和宽带租用成本。并且减轻服务器的负担，AJAX的原则是“按需取数据”，可以最大程度的减少冗余请求和响应对服务器造成的负担，提升站点性能。<br>4.基于标准被广泛支持。<br>AJAX基于标准化的并被广泛支持的技术，不需要下载浏览器插件或者小程序，但需要客户允许JavaScript在浏览器上执行。随着Ajax的成熟，一些简化Ajax使用方法的程序库也相继问世。同样，也出现了另一种辅助程序设计的技术，为那些不支持JavaScript的用户提供替代功能。<br> 5.界面与应用分离。<br>Ajax使WEB中的界面与应用分离（也可以说是数据与呈现分离），有利于分工合作、减少非技术人员对页面的修改造成的WEB应用程序错误、提高效率、也更加适用于现在的发布系统。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>1.AjAX干掉了Back和加入收藏书签功能，即对浏览器机制的破坏。<br>2.AJAX的安全问题。<br>3.因为网络延迟需要给用户提供必要提示</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;认识-Ajax&quot;&gt;&lt;a href=&quot;#认识-Ajax&quot; class=&quot;headerlink&quot; title=&quot;认识 Ajax&quot;&gt;&lt;/a&gt;认识 Ajax&lt;/h2&gt;&lt;h3 id=&quot;什么是-Ajax&quot;&gt;&lt;a href=&quot;#什么是-Ajax&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="前端" scheme="https://wuzimo233.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习" scheme="https://wuzimo233.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Ajax" scheme="https://wuzimo233.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>博客与博主</title>
    <link href="https://wuzimo233.github.io/posts/1.html"/>
    <id>https://wuzimo233.github.io/posts/1.html</id>
    <published>2022-04-12T17:17:00.000Z</published>
    <updated>2022-04-15T06:14:16.957Z</updated>
    
    <content type="html"><![CDATA[<p>相遇皆是缘分</p><h3 id="为什么建博客？"><a href="#为什么建博客？" class="headerlink" title="为什么建博客？"></a>为什么建博客？</h3><p>因为学习一些知识总是学了就忘，或者敲了不复习，记得手写笔记也根本不爱翻动。花了大半天时间搭建个博客来记录未来学到的知识，勤能补拙吧~</p><h3 id="展望博客"><a href="#展望博客" class="headerlink" title="展望博客"></a>展望博客</h3><p>我会整理一些个人所学的知识（前端方向和一些其它数码、科技、摄影先暂时想这么多）或生活方面有兴趣的事发到博客上。</p><h3 id="关于博主"><a href="#关于博主" class="headerlink" title="关于博主"></a>关于博主</h3><p>普普通通的社畜。。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> 勇敢就是，在你还没开始的时候就知道自己会输，但依然要去做，而且无论如何都要把它坚持到底。你很少能赢，但有时也会。​ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>go on！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;相遇皆是缘分&lt;/p&gt;
&lt;h3 id=&quot;为什么建博客？&quot;&gt;&lt;a href=&quot;#为什么建博客？&quot; class=&quot;headerlink&quot; title=&quot;为什么建博客？&quot;&gt;&lt;/a&gt;为什么建博客？&lt;/h3&gt;&lt;p&gt;因为学习一些知识总是学了就忘，或者敲了不复习，记得手写笔记也根本不爱翻动</summary>
      
    
    
    
    <category term="感想" scheme="https://wuzimo233.github.io/categories/%E6%84%9F%E6%83%B3/"/>
    
    
    <category term="生活" scheme="https://wuzimo233.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
