<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Promise学习</title>
      <link href="/posts/3.html"/>
      <url>/posts/3.html</url>
      
        <content type="html"><![CDATA[<h2 id="认识-Promise"><a href="#认识-Promise" class="headerlink" title="认识 Promise"></a>认识 Promise</h2><ul><li><h3 id="什么是-Promise"><a href="#什么是-Promise" class="headerlink" title="什么是 Promise"></a>什么是 Promise</h3></li></ul><ol><li>抽象表达:<blockquote><p>Promise 是一门新的技术(ES6 规范)<br>Promise 是 JS 中进行异步编程的新解决方案<br>备注：旧方案是单纯使用回调函数</p></blockquote></li><li>具体表达:<blockquote><p>语法上来说: Promise 是一个构造函数<br>从功能上来说: promise 对象用来封装一个异步操作并可以获取其成功/失败的结果值</p></blockquote></li></ol><h3 id="为什么要用-Promise"><a href="#为什么要用-Promise" class="headerlink" title="为什么要用 Promise"></a>为什么要用 Promise</h3><h4 id="指定回调函数的方式更加灵活"><a href="#指定回调函数的方式更加灵活" class="headerlink" title="指定回调函数的方式更加灵活"></a>指定回调函数的方式更加灵活</h4><ol><li>旧的: 必须在启动异步任务前指定</li><li>promise: 启动异步任务 =&gt; 返回 promie 对象 =&gt; 给 promise 对象绑定回调函<br>数(甚至可以在异步任务结束后指定/多个)</li></ol><h4 id="支持链式调用-可以解决回调地狱问题"><a href="#支持链式调用-可以解决回调地狱问题" class="headerlink" title="支持链式调用, 可以解决回调地狱问题"></a>支持链式调用, 可以解决回调地狱问题</h4><blockquote><ol><li>什么是回调地狱?<br> 回调函数嵌套调用, 外部回调函数异步执行的结果是嵌套的回调执行的条件<br> <img src="https://s1.ax1x.com/2022/04/14/LlRNPf.jpg" alt="回调地狱"></li><li>回调地狱的缺点?<br> 不便于阅读<br> 不便于异常处理</li><li>解决方案?<br> promise 链式调用</li><li>终极解决方案?<br> async/await</li></ol></blockquote><h3 id="如何使用-Promise"><a href="#如何使用-Promise" class="headerlink" title="如何使用 Promise"></a>如何使用 Promise</h3><h4 id="Promise-初体验"><a href="#Promise-初体验" class="headerlink" title="Promise 初体验"></a>Promise 初体验</h4><blockquote><p><strong>案例：需求——点击抽奖按钮两秒后，告诉用户是否中奖，中奖的概率是百分之 30。如果中奖在页面中弹框告知恭喜中奖，没有就弹出再接再厉。</strong></p></blockquote><p><code>一般方法实现</code></p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="container"&gt;    &lt;h2 class="page-header"&gt;Promise 初体验&lt;/h2&gt;    &lt;button class="btn btn-primary" id="btn"&gt;点击抽奖&lt;/button&gt;&lt;/div&gt;&lt;script&gt;    //生成随机数    function rand(m,n){        return Math.ceil(Math.random() * (n-m+1)) + m-1;    }    //获取元素对象    const btn = document.querySelector('#btn');    //绑定单击事件    btn.addEventListener('click', function(){        // 定时器       setTimeout(() =&gt; {           //获取从1 - 100的一个随机数           let n = rand(1, 100);           //判断           if(n &lt;= 30){               alert(n+'恭喜恭喜, 奖品为 10万 RMB 劳斯莱斯优惠券');           }else{               alert(n+'再接再厉');           }       }, 1000);    })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Promise 语法结构</strong></p><blockquote><p>语法结构： new Promise((resolve, reject) =&gt; { } 里面是一个函数类型的参数，参数里面的两个参数也是函数<br>在花括号{ }里边包含一个异步操作,如果成功则调用 resolve ，同时只要 resolve 调用就会将 promise 对象 p 的状态设置为『成功』，<br>如果失败则调用 reject，调完 reject 后会将 promise 对象 p 的状态设置为『失败』（即这两个可以修改 promise&gt;对象的状态）<br>接着 promise 对象通过调用 then()方法去指定成功和失败时的回调<br>如果成功就执行第一个回调函数，失败则执行第二个回调函数<br>Promise 除了可以封装异步操作之外，还能获取异步操作里成功和失败的结果值 即下方案例的 n 值<br>然后可以将 n 值传递给 resolve 和 reject 函数<br>最后下方的 then 方法里的两个回调都能拿到这个结果值作为参数使用</p></blockquote><p> <code>Promise 形式实现 </code></p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="container"&gt;    &lt;h2 class="page-header"&gt;Promise 初体验&lt;/h2&gt;    &lt;button class="btn btn-primary" id="btn"&gt;点击抽奖&lt;/button&gt;&lt;/div&gt;&lt;script&gt;      //生成随机数    function rand(m,n){        return Math.ceil(Math.random() * (n-m+1)) + m-1;    }      //获取元素对象    const btn = document.querySelector('#btn');      //绑定单击事件    btn.addEventListener('click', function(){          // 使用 new Promise(接收一个函数参数) 创建实例          // resolve 解决  函数类型的数据 --成功时调用          // reject  拒绝  函数类型的数据 --失败时调用          const p = new Promise((resolve, reject) =&gt; {              // promise对象可以包裹一个异步操作（直接将上方定时器拿过来）              setTimeout(() =&gt; {                  //30%  1-100  1 2 30                  //获取从1 - 100的一个随机数                  let n = rand(1, 100);                  //判断                  if(n &lt;= 30){                      // Promise除了可以封装异步操作之外，还能获取异步操作里成功和失败的结果值 即这里的n值                      // 可以将n值传递给resolve 和 reject函数                      // 那么下方的then方法里的两个回调都能拿到这个结果值作为参数                      resolve(n); //  调完resolve后会将 promise 对象 p 的状态设置为『成功』                  }else{                      reject(n); // 调完reject后会将 promise 对象 p 的状态设置为『失败』                  }              }, 1000);          });          console.log(p);          //调用 then（里边有两个回调函数参数） 方法 --- 每个promise对象上都有then方法          // 第一个回调是对象状态为成功时的回调，第二个是对象状态失败时的回调函数          // value 值          // reason 理由          p.then((value) =&gt; {              alert('恭喜恭喜, 奖品为 10万 RMB 劳斯莱斯优惠券, 您的中奖数字为 ' + value);          }, (reason) =&gt; {              alert('再接再厉, 您的号码为 ' + reason);          });      })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实践练习"><a href="#实践练习" class="headerlink" title="实践练习"></a>实践练习</h4><hr><h2 id="自定义手写-Promise"><a href="#自定义手写-Promise" class="headerlink" title="自定义手写 Promise"></a>自定义手写 Promise</h2><h3 id="定义整体结构"><a href="#定义整体结构" class="headerlink" title="定义整体结构"></a>定义整体结构</h3><h3 id="定义整体结构-1"><a href="#定义整体结构-1" class="headerlink" title="定义整体结构"></a>定义整体结构</h3><h3 id="定义整体结构-2"><a href="#定义整体结构-2" class="headerlink" title="定义整体结构"></a>定义整体结构</h3><h2 id="async-与-await"><a href="#async-与-await" class="headerlink" title="async 与 await"></a>async 与 await</h2>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax学习</title>
      <link href="/posts/2.html"/>
      <url>/posts/2.html</url>
      
        <content type="html"><![CDATA[<h2 id="认识-Ajax"><a href="#认识-Ajax" class="headerlink" title="认识 Ajax"></a>认识 Ajax</h2><h3 id="什么是-Ajax"><a href="#什么是-Ajax" class="headerlink" title="什么是 Ajax"></a>什么是 Ajax</h3><blockquote><p>Ajax 是一种异步请求数据的 web 开发技术，对于改善用户的体验和页面性能很有帮助。<br>刚好回顾下什么是异步同步，大部分的请求是同步的，就是说我必须等待后台请求给我返回结果了才能往下操作。通俗讲的话，我要去烧水、水热了后去洗碗、扫地。同步来做的话就是依次等待水烧热后我再去洗碗，洗了碗后我再去扫地。异步做的话我把水壶接通电源（发送请求）、接着水壶它烧它的，我去扫地了，可能扫完地后水热了，再用水壶的水来洗碗。<br>还可以说我今天一天没有逛朋友圈，晚上终于有空翻朋友圈，好不容易翻到了上午的朋友圈，突然觉得某个动态有意思我想评论一下或者点赞，如果页面上有刷新，那我点赞后直接就刷新了朋友圈，我又得从新翻很久才能回到刚才的动态页面。如果是不会刷新，即点赞后马上就显示了点赞记录。这就是无刷新技术通过Dom操作来实现的效果。所以Ajax通常会结合Dom一起操作。<br>简单地说，在不需要重新刷新整个页面的情况下，Ajax 通过异步请求加载后台数据，能在网页的局部更新数据。<br>常见运用场景有表单验证是否登入成功、百度搜索下拉框提示和快递单号查询等等。<br><strong>Ajax 的目的是提高用户体验，较少网络数据的传输量。</strong>同时，由于 AJAX 请求获取的是数据而不是 HTML 文档，因此它也节省了网络带宽，让互联网用户的网络冲浪体验变得更加顺畅。<br><strong>AJAX=Asynchronous JavaScript and XML(异步的 JavaScript 和 XML)</strong><br>Ajax 不是一门编程语言，而是一种用于创建更好更快以及交互性更强的 Web 应用程序的技术</p></blockquote><ul><li>传统的网页(即不用 ajax 技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。</li><li>使用 ajax 技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</li><li>使用 Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的 Web 用户界面。</li><li>增加 B/S 体验性 （B/S 未来的主流，持续增长）</li></ul><hr><h3 id="Ajax-原理是什么"><a href="#Ajax-原理是什么" class="headerlink" title="Ajax 原理是什么"></a>Ajax 原理是什么</h3><p>在解释 Ajax 原理之前，我们不妨先举个 “领导想找小李汇报一下工作” 例子，领导想找小李问点事，就委托秘书去叫小李，自己就接着做其他事情，直到秘书告诉他小李已经到了，最后小李跟领导汇报工作。<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/18/167bd019240a457b~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp" alt="图源网络侵删"></p><p>Ajax 请求数据流程与“领导想找小李汇报一下工作”类似。其中最核心的依赖是浏览器提供的 XMLHttpRequest 对象，它扮演的角色相当于秘书，使得浏览器可以发出 HTTP 请求与接收 HTTP 响应。浏览器接着做其他事情，等收到 XHR 返回来的数据再渲染页面。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/18/167bd023855c0bf7~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp" alt="图源网络侵删"></p><p><strong>理解了 Ajax 的工作原理后，接下来我们探讨下如何使用 Ajax</strong></p><hr><h3 id="利用-AJAX-可以做："><a href="#利用-AJAX-可以做：" class="headerlink" title="利用 AJAX 可以做："></a>利用 AJAX 可以做：</h3><p>注册时，输入用户名自动检测用户已经存在<br>登陆时，提示用户密码错误<br>删除数据时，将行 ID 发送到后台，后台在数据库中删除，数据库删除成功后，在页面 DOM 中将数据行也删除<br>我们可以使用前端的一个标签来伪造一个 ajax 的样子。iframe 标签</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- iframe 元素会创建包含另外一个文档的内联框架（即行内框架） --&gt;    &lt;div&gt;        &lt;p&gt;请输入要加载的地址：&lt;span id="currentTime"&gt;&lt;/span&gt;&lt;/p&gt;        &lt;p&gt;            &lt;input id="url" type="text" value="https://www.baidu.com/" /&gt;            &lt;input type="button" value="提交" onclick="LoadPage()"&gt;        &lt;/p&gt;    &lt;/div&gt;    &lt;div&gt;        &lt;h3&gt;加载页面位置：&lt;/h3&gt;        &lt;iframe id="iframePosition" style="width: 100%;height: 500px;"&gt;&lt;/iframe&gt;    &lt;/div&gt;    &lt;script type="text/javascript"&gt;        window.onload = function () {            var myDate = new Date(); //获取当前时间 并传递给p标签里的span            document.getElementById('currentTime').innerText = myDate.getTime();        };        function LoadPage() {            var targetUrl = document.getElementById('url').value; //获取input框的网址            console.log(targetUrl);            document.getElementById("iframePosition").src = targetUrl; //把网址传给内联标签iframe标签的src属性        }    &lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这里简单的制造了一个在当前页面打开其他页面不刷新整体页面的场景，ajax 可以实现更多更高级的类似功能</strong></p><hr><h2 id="Ajax-的使用"><a href="#Ajax-的使用" class="headerlink" title="Ajax 的使用"></a>Ajax 的使用</h2><h3 id="原生Ajax-的使用"><a href="#原生Ajax-的使用" class="headerlink" title="原生Ajax 的使用"></a>原生Ajax 的使用</h3><p><strong>1.创建 Ajax 核心对象 XMLHttpRequest(记得考虑兼容性)</strong></p><pre class="line-numbers language-none"><code class="language-none">var xhr=null;if (window.XMLHttpRequest) {    // 兼容 IE7+, Firefox, Chrome, Opera, Safari    xhr=new XMLHttpRequest();} else {  // 兼容 IE6, IE5  xhr=new ActiveXObject("Microsoft.XMLHTTP");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.向服务器发送请求</strong></p><pre class="line-numbers language-none"><code class="language-none">xhr.open(method,url,async);  send(string);//post请求时才使用字符串参数，否则不用带参数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>。。。太麻烦了 后期再学原生吧</p><h3 id="jQuery-ajax-的使用"><a href="#jQuery-ajax-的使用" class="headerlink" title="jQuery.ajax 的使用"></a>jQuery.ajax 的使用</h3><p><strong>浏览器中提供的 XMLHttpRequest 用法比较复杂，所以 jQuery 对 XMLHttpRequest 进行了封装，提供了一系列 Ajax 相关的函数，极大地降低了 Ajax 的使用难度。</strong><br><strong>jQuery Ajax 本质就是 XMLHttpRequest，对他进行了封装，方便调用！</strong><br>纯 JS 原生实现 Ajax 暂时不去了解了，直接使用 jquery 提供的，方便学习和使用，避免重复造轮子，有空再去了解下 JS 原生 的XMLHttpRequest把···<br>Ajax 的核心是<strong>XMLHttpRequest</strong>对象(XHR)。XHR 为向服务器发送请求和解析服务器响应提供了接口，<strong>能够以异步方式从服务器获取新数据。</strong></p><p>使用 jQuery 需要先从官网下载jQuery.js并导入到文件<br>就可以使用$符号，它是jquery中代表jquery对象的引用,“jQuery”是核心对象。通过该对象可以获取jQuery对象，调用jQuery提供的方法等。$ &lt;==&gt; jQuery</p><p><strong>通过 jQuery AJAX 方法，能够从远程服务器上请求文本、HTML、XML 或 JSON – 同时能够把这些外部数据直接载入网页的被选元素中。</strong></p><blockquote><p>jQuery 中发起 Ajax 请求最常用的三个方法如下：<br>$.get()<br>$.post()<br>$.ajax()</p></blockquote><h4 id="get-函数的语法"><a href="#get-函数的语法" class="headerlink" title="$.get()函数的语法"></a>$.get()函数的语法</h4><ul><li><p>jQuery 中 $.get() 函数的功能单一，专门用来发起 get 请求</p></li><li><p><strong>将服务器上的资源请求到客户端来进行使用。</strong></p><pre class="line-numbers language-none"><code class="language-none">$.get(url, [data], [callback])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="center">参数名</th><th align="center">参数类型</th><th align="center">是否必选</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">url</td><td align="center">string</td><td align="center">是</td><td align="center">要请求的资源地址</td></tr><tr><td align="center">data</td><td align="center">object</td><td align="center">否</td><td align="center">请求资源期间要携带的参数</td></tr><tr><td align="center">callback</td><td align="center">function</td><td align="center">否</td><td align="center">请求成功时的回调函数</td></tr></tbody></table></li><li><p>$.get()发起不带参数的请求<br>使用 $.get() 函数发起不带参数的请求时，直接提供请求的 URL 地址和请求成功之后的回调函数即可，示例代码如下：</p><pre class="line-numbers language-none"><code class="language-none">$.get('http://www.liulongbin.top:3006/api/getbooks', function(res) {    console.log(res) // 这里的 res 是服务器返回的数据})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>$.get()发起带参数的请求<br>使用 $.get() 函数发起带参数的请求时，示例代码如下：</p><pre class="line-numbers language-none"><code class="language-none">$.get('http://www.liulongbin.top:3006/api/getbooks', { id: 1 }, function(res) {    console.log(res)})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="post-函数的语法"><a href="#post-函数的语法" class="headerlink" title="$.post()函数的语法"></a>$.post()函数的语法</h4><ul><li>jQuery 中 $.post() 函数的功能单一，专门用来发起 post 请求，从而<strong>向服务器提交数据。</strong></li></ul><p>$.post() 函数的语法如下：</p><pre class="line-numbers language-none"><code class="language-none">$.post(url, [data], [callback])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，三个参数各自代表的含义如下：<br>| 参数名 | 参数类型 | 是否必选 | 说明 |<br>| :—-:| :—-: | :—-: | :—-: |<br>| url | string | 是 | 提交数据的地址 |<br>| data | object | 否 | 要提交的数据 |<br>| callback | function | 否 | 数据提交成功时的回调函数 |</p><p>使用 $post() 向服务器提交数据的示例代码如下：</p><pre class="line-numbers language-none"><code class="language-none">$.post(   'http://www.liulongbin.top:3006/api/addbook', // 请求的URL地址   { bookname: '水浒传', author: '施耐庵', publisher: '上海图书出版社' }, // 提交的数据   function(res) { // 回调函数      console.log(res)   })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ajax-函数的语法"><a href="#ajax-函数的语法" class="headerlink" title="$.ajax()函数的语法"></a><strong>$.ajax()函数的语法</strong></h4><ul><li>相比于$.get()和$.post() 函数，jQuery 中提供的 $.ajax() 函数，是一个功能比较综合的函数</li><li>它允许我们对 Ajax 请求进行更详细的配置</li></ul><p>$.ajax() 函数的基本语法如下：</p><pre class="line-numbers language-none"><code class="language-none">$.ajax({   type: '', // 请求的方式，例如 GET 或 POST   url: '',  // 请求的 URL 地址   data: { },// 这次请求要携带的数据   success: function(res) { } // 请求成功之后的回调函数})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用$.ajax()发起GET请求</strong><br>使用 $.ajax() 发起 GET 请求时，只需要将 type 属性的值设置为 ‘GET’ 即可：</p><pre class="line-numbers language-none"><code class="language-none">$.ajax({   type: 'GET', // 请求的方式   url: 'http://www.liulongbin.top:3006/api/getbooks',  // 请求的 URL 地址   data: { id: 1 },// 这次请求要携带的数据   success: function(res) { // 请求成功之后的回调函数       console.log(res)   }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用$.ajax()发起POST请求</strong><br>使用 $.ajax() 发起 POST 请求时，只需要将 type 属性的值设置为 ‘POST’ 即可：</p><pre class="line-numbers language-none"><code class="language-none">$.ajax({   type: 'POST', // 请求的方式   url: 'http://www.liulongbin.top:3006/api/addbook',  // 请求的 URL 地址   data: { // 要提交给服务器的数据      bookname:&nbsp;'水浒传',      author:&nbsp;'施耐庵',      publisher:&nbsp;'上海图书出版社'    },   success: function(res) { // 请求成功之后的回调函数       console.log(res)   }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>jQuery.ajax(…)<br>       部分参数：<br>              url：请求地址（待载入页面的URL地址）<br>             data：要发送的数据（待发送给后台的值key/value参数）<br>          success：载入成功之后执行的回调函数(全局)<br>             type：请求方式，GET、POST（1.9.0之后用method）<br>          // 下边的了解下不常用<br>          headers：请求头<br>      contentType：即将发送信息至服务器的内容编码类型(默认: “application/x-www-form-urlencoded; charset=UTF-8”)<br>            async：是否异步<br>          timeout：设置请求超时时间（毫秒）<br>       beforeSend：发送请求前执行的函数(全局)<br>         complete：完成之后执行的回调函数(全局)<br>            error：失败之后执行的回调函数(全局)<br>          accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型<br>         dataType：将服务器端返回的数据转换成指定类型<br>            “xml”: 将服务器端返回的内容转换成xml格式<br>           “text”: 将服务器端返回的内容转换成普通文本格式<br>           “html”: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。<br>         “script”: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式<br>           “json”: 将服务器端返回的内容转换成相应的JavaScript对象<br>          “jsonp”: JSONP 格式使用 JSONP 形式调用函数时，如 “myurl?callback=?” jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</p></blockquote><hr><h2 id="接口相关知识"><a href="#接口相关知识" class="headerlink" title="接口相关知识"></a>接口相关知识</h2><ul><li><h3 id="接口的概念"><a href="#接口的概念" class="headerlink" title="接口的概念"></a>接口的概念</h3><blockquote><ul><li>使用 Ajax 请求数据时，被请求的 URL 地址，就叫做数据接口（简称接口）。同时，每个接口必须有请求方式。<br>例如：<br><a href="http://www.liulongbin.top:3006/api/getbooks">www.liulongbin.top:3006/api/getbooks</a> 获取图书列表的接口(GET请求)<br><a href="http://www.liulongbin.top:3006/api/addbook">www.liulongbin.top:3006/api/addbook</a> 添加图书的接口（POST请求）</li></ul></blockquote></li><li><h3 id="分析接口的请求过程"><a href="#分析接口的请求过程" class="headerlink" title="分析接口的请求过程"></a>分析接口的请求过程</h3></li></ul><p>通过GET方式请求接口的过程<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b198025f2e648b4b58d2df1d8673536~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="图源网络侵删"></p><p>通过POST方式请求接口的过程<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/20019a7779564e18a12c0c66668f9422~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="图源网络侵删"></p><h2 id="Ajax的优缺点"><a href="#Ajax的优缺点" class="headerlink" title="Ajax的优缺点"></a>Ajax的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>1.无刷新更新数据。<br>AJAX最大优点就是能在不刷新整个页面的前提下与服务器通信维护数据。这使得Web应用程序更为迅捷地响应用户交互，并避免了在网络上发送那些没有改变的信息，减少用户等待时间，带来非常好的用户体验。<br>2.异步与服务器通信。<br>AJAX使用异步方式与服务器通信，不需要打断用户的操作，具有更加迅速的响应能力。优化了Browser和Server之间的沟通，减少不必要的数据传输、时间及降低网络上数据流量。<br>3.前端和后端负载平衡。<br>AJAX可以把以前一些服务器负担的工作转嫁到客户端，利用客户端闲置的能力来处理，减轻服务器和带宽的负担，节约空间和宽带租用成本。并且减轻服务器的负担，AJAX的原则是“按需取数据”，可以最大程度的减少冗余请求和响应对服务器造成的负担，提升站点性能。<br>4.基于标准被广泛支持。<br>AJAX基于标准化的并被广泛支持的技术，不需要下载浏览器插件或者小程序，但需要客户允许JavaScript在浏览器上执行。随着Ajax的成熟，一些简化Ajax使用方法的程序库也相继问世。同样，也出现了另一种辅助程序设计的技术，为那些不支持JavaScript的用户提供替代功能。<br> 5.界面与应用分离。<br>Ajax使WEB中的界面与应用分离（也可以说是数据与呈现分离），有利于分工合作、减少非技术人员对页面的修改造成的WEB应用程序错误、提高效率、也更加适用于现在的发布系统。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>1.AjAX干掉了Back和加入收藏书签功能，即对浏览器机制的破坏。<br>2.AJAX的安全问题。<br>3.因为网络延迟需要给用户提供必要提示</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客与博主</title>
      <link href="/posts/1.html"/>
      <url>/posts/1.html</url>
      
        <content type="html"><![CDATA[<p>相遇皆是缘分</p><h3 id="为什么建博客？"><a href="#为什么建博客？" class="headerlink" title="为什么建博客？"></a>为什么建博客？</h3><p>因为学习一些知识总是学了就忘，或者敲了不复习，记得手写笔记也根本不爱翻动。花了大半天时间搭建个博客来记录未来学到的知识，勤能补拙吧~</p><h3 id="展望博客"><a href="#展望博客" class="headerlink" title="展望博客"></a>展望博客</h3><p>我会整理一些个人所学的知识（前端方向和一些其它数码、科技、摄影先暂时想这么多）或生活方面有兴趣的事发到博客上。</p><h3 id="关于博主"><a href="#关于博主" class="headerlink" title="关于博主"></a>关于博主</h3><p>普普通通的社畜。。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> 勇敢就是，在你还没开始的时候就知道自己会输，但依然要去做，而且无论如何都要把它坚持到底。你很少能赢，但有时也会。​ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>go on！</p>]]></content>
      
      
      <categories>
          
          <category> 感想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/posts/4.html"/>
      <url>/posts/4.html</url>
      
        <content type="html"><![CDATA[<h2 id="认识-Promise"><a href="#认识-Promise" class="headerlink" title="认识 Promise"></a>认识 Promise</h2><p>大文帝</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
